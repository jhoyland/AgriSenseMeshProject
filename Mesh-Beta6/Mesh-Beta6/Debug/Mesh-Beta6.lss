
Mesh-Beta6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000bea  00000c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000170  0080010a  0080010a  00000c88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c46  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de5  00000000  00000000  00003bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000132e  00000000  00000000  000049d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d0  00000000  00000000  00005d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a50  00000000  00000000  000063d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001936  00000000  00000000  00006e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000875e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	e3 c2       	rjmp	.+1478   	; 0x5ca <__vector_1>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	ea ee       	ldi	r30, 0xEA	; 234
  3c:	fb e0       	ldi	r31, 0x0B	; 11
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	aa 30       	cpi	r26, 0x0A	; 10
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	22 e0       	ldi	r18, 0x02	; 2
  4c:	aa e0       	ldi	r26, 0x0A	; 10
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	aa 37       	cpi	r26, 0x7A	; 122
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	27 d3       	rcall	.+1614   	; 0x6aa <main>
  5c:	c4 c5       	rjmp	.+2952   	; 0xbe6 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <bytes_to_word>:
uint16_t bytes_to_word(uint8_t* b)
{
    uint16_t hi = (uint16_t) b[0];
    uint16_t lo = (uint16_t) b[1];

    return (hi << 8) | lo;
  60:	fc 01       	movw	r30, r24
  62:	20 81       	ld	r18, Z
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	32 2f       	mov	r19, r18
  68:	22 27       	eor	r18, r18
  6a:	81 81       	ldd	r24, Z+1	; 0x01
}
  6c:	a9 01       	movw	r20, r18
  6e:	48 2b       	or	r20, r24
  70:	ca 01       	movw	r24, r20
  72:	08 95       	ret

00000074 <word_to_bytes>:

void word_to_bytes(uint8_t* b, uint16_t d)
{
    b[0] = (uint8_t)(d >> 8);
  74:	fc 01       	movw	r30, r24
  76:	70 83       	st	Z, r23
    b[1] = (uint8_t)(255 & d);
  78:	61 83       	std	Z+1, r22	; 0x01
  7a:	08 95       	ret

0000007c <handle_tx>:
	//mrf_send16(pi_address,buff,PK_SZ_TXRX_BUFFER);
	send_message(pi_address,buff);
}

void send_down_to_pi(uint8_t* buff) //sends the message down the nodes until it reaches the pi
{
  7c:	08 95       	ret

0000007e <set_light>:
  7e:	fc 01       	movw	r30, r24
  80:	82 85       	ldd	r24, Z+10	; 0x0a
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	49 f0       	breq	.+18     	; 0x98 <set_light+0x1a>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	61 f0       	breq	.+24     	; 0xa2 <set_light+0x24>
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	69 f4       	brne	.+26     	; 0xa8 <set_light+0x2a>
  8e:	9b b1       	in	r25, 0x0b	; 11
  90:	80 e2       	ldi	r24, 0x20	; 32
  92:	89 27       	eor	r24, r25
  94:	8b b9       	out	0x0b, r24	; 11
  96:	08 95       	ret
  98:	9b b1       	in	r25, 0x0b	; 11
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	89 27       	eor	r24, r25
  9e:	8b b9       	out	0x0b, r24	; 11
  a0:	08 95       	ret
  a2:	8b b1       	in	r24, 0x0b	; 11
  a4:	80 58       	subi	r24, 0x80	; 128
  a6:	8b b9       	out	0x0b, r24	; 11
  a8:	08 95       	ret

000000aa <set_downstairs_neighbor>:
  aa:	04 96       	adiw	r24, 0x04	; 4
  ac:	d9 df       	rcall	.-78     	; 0x60 <bytes_to_word>
  ae:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <downstairs_neighbor+0x1>
  b2:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <downstairs_neighbor>
  b6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <neighbor_count>
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <neighbor_count>
  c0:	08 95       	ret

000000c2 <set_last_node>:
	send_downstream(transmit_data_buffer);	//send it downstream
}

void set_last_node(uint8_t* buff)
{	//executes upon "network complete" confirmation. Assigns the "end of the chain" for all nodes.
	last_node = bytes_to_word(&buff[PK_COMMAND_HEADER+PK_CMD_DATA_0]);
  c2:	0a 96       	adiw	r24, 0x0a	; 10
  c4:	cd df       	rcall	.-102    	; 0x60 <bytes_to_word>
  c6:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <last_node+0x1>
  ca:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <last_node>
  ce:	08 95       	ret

000000d0 <send_message>:
	Pk_Set_Final_Node(transmit_data_buffer,bytes_to_word(&message[PK_SRC_ADDR_HI]));
	send_message(bytes_to_word(&message[PK_SRC_ADDR_HI]), transmit_data_buffer); //return this to the requester
}

void send_message(uint16_t target, uint8_t* buff) //sends a message to the target specified
{
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	8c 01       	movw	r16, r24
  da:	eb 01       	movw	r28, r22
	//note: blink delay is 200ms
	Pk_Set_Packet_Size(buff,PK_SZ_TXRX_BUFFER); //this should be a function that finds the packet size maybe?
  dc:	68 e2       	ldi	r22, 0x28	; 40
  de:	ce 01       	movw	r24, r28
  e0:	ec d4       	rcall	.+2520   	; 0xaba <Pk_Set_Packet_Size>
	Pk_Set_Target_Node(buff,target);
  e2:	b8 01       	movw	r22, r16
  e4:	ce 01       	movw	r24, r28
  e6:	ec d4       	rcall	.+2520   	; 0xac0 <Pk_Set_Target_Node>
	Pk_Set_Src_Node(buff,THIS_DEVICE);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	ce 01       	movw	r24, r28
  ee:	03 d5       	rcall	.+2566   	; 0xaf6 <Pk_Set_Src_Node>
	//if(bytes_to_word(&buff[PK_COMMAND_HEADER+PK_CMD_HI]) == CMD_PROBE_NEIGHBORS) Pk_Set_Final_Node(buff,target); //why was this here?
	//_delay_ms(200); //this is very important maybe?
	//mrf_send16(pi_address,buff,PK_SZ_TXRX_BUFFER); //for debugging
	BLINK(LIGHT_PORT,YELLOW_LIGHT);
  f0:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	8f e4       	ldi	r24, 0x4F	; 79
  f4:	93 ec       	ldi	r25, 0xC3	; 195
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <send_message+0x26>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <send_message+0x2c>
  fc:	00 00       	nop
  fe:	5e 98       	cbi	0x0b, 6	; 11
 100:	8f e4       	ldi	r24, 0x4F	; 79
 102:	93 ec       	ldi	r25, 0xC3	; 195
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <send_message+0x34>
 108:	00 c0       	rjmp	.+0      	; 0x10a <send_message+0x3a>
 10a:	00 00       	nop
	mrf_send16(target,buff,PK_SZ_TXRX_BUFFER);
 10c:	48 e2       	ldi	r20, 0x28	; 40
 10e:	be 01       	movw	r22, r28
 110:	c8 01       	movw	r24, r16
 112:	68 d3       	rcall	.+1744   	; 0x7e4 <mrf_send16>
	
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	08 95       	ret

0000011e <ping_handler>:
	
}


void ping_handler(uint8_t* message) //this loop will only enter upon receiving the message CMD_PING
{ 
 11e:	ef 92       	push	r14
 120:	0f 93       	push	r16
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
	if(Network_Set)
 126:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <Network_Set>
 12a:	22 23       	and	r18, r18
 12c:	81 f0       	breq	.+32     	; 0x14e <ping_handler+0x30>
	{
		//this is to determine if the chain is still present
		if(message[PK_COMMAND_HEADER+PK_CMD_DATA_0] == 0)
 12e:	fc 01       	movw	r30, r24
 130:	22 85       	ldd	r18, Z+10	; 0x0a
 132:	21 11       	cpse	r18, r1
 134:	0c c0       	rjmp	.+24     	; 0x14e <ping_handler+0x30>
 136:	ec 01       	movw	r28, r24
		{ //first "Accessory bit" is 0: This is just a boring ping									  
			Pk_Set_Command(message,CMD_ECHO,0,0,0,0); //respond with "echo" in the command location
 138:	e1 2c       	mov	r14, r1
 13a:	00 e0       	ldi	r16, 0x00	; 0
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	63 e4       	ldi	r22, 0x43	; 67
 140:	75 e4       	ldi	r23, 0x45	; 69
 142:	c3 d4       	rcall	.+2438   	; 0xaca <Pk_Set_Command>
			send_message(bytes_to_word(&message[PK_SRC_ADDR_HI]),message); //send it back to the originator
 144:	ce 01       	movw	r24, r28
 146:	04 96       	adiw	r24, 0x04	; 4
 148:	8b df       	rcall	.-234    	; 0x60 <bytes_to_word>
 14a:	be 01       	movw	r22, r28
 14c:	c1 df       	rcall	.-126    	; 0xd0 <send_message>
	}
	else
	{
		//send a message stating that the network has to be set up before you can ping??
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	0f 91       	pop	r16
 154:	ef 90       	pop	r14
 156:	08 95       	ret

00000158 <continue_setup>:
	probe_neighbor_status(node_list[target_index]); //start by searching node 0x0001 -> must wait for a response
	wait_for_response(message);
}

void continue_setup(uint8_t target) //tells the next node to do the setup routine
{
 158:	ef 92       	push	r14
 15a:	0f 93       	push	r16
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
	Pk_Set_Command(transmit_data_buffer,CMD_SETUP,0,0,0,0);
 160:	e1 2c       	mov	r14, r1
 162:	00 e0       	ldi	r16, 0x00	; 0
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	65 e5       	ldi	r22, 0x55	; 85
 16a:	75 e4       	ldi	r23, 0x45	; 69
 16c:	81 e3       	ldi	r24, 0x31	; 49
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	ac d4       	rcall	.+2392   	; 0xaca <Pk_Set_Command>
	send_message(target,transmit_data_buffer);
 172:	61 e3       	ldi	r22, 0x31	; 49
 174:	72 e0       	ldi	r23, 0x02	; 2
 176:	8c 2f       	mov	r24, r28
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	aa df       	rcall	.-172    	; 0xd0 <send_message>
	node_status = IDLE;
 17c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <node_status>
}
 180:	cf 91       	pop	r28
 182:	0f 91       	pop	r16
 184:	ef 90       	pop	r14
 186:	08 95       	ret

00000188 <send_directly_to_pi>:
}


void send_directly_to_pi(uint8_t* buff)
{
	BLINK(LIGHT_PORT,YELLOW_LIGHT);
 188:	5e 9a       	sbi	0x0b, 6	; 11
 18a:	ef e4       	ldi	r30, 0x4F	; 79
 18c:	f3 ec       	ldi	r31, 0xC3	; 195
 18e:	31 97       	sbiw	r30, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <send_directly_to_pi+0x6>
 192:	00 c0       	rjmp	.+0      	; 0x194 <send_directly_to_pi+0xc>
 194:	00 00       	nop
 196:	5e 98       	cbi	0x0b, 6	; 11
 198:	ef e4       	ldi	r30, 0x4F	; 79
 19a:	f3 ec       	ldi	r31, 0xC3	; 195
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <send_directly_to_pi+0x14>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <send_directly_to_pi+0x1a>
 1a2:	00 00       	nop
	//mrf_send16(pi_address,buff,PK_SZ_TXRX_BUFFER);
	send_message(pi_address,buff);
 1a4:	bc 01       	movw	r22, r24
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1ae:	90 df       	rcall	.-224    	; 0xd0 <send_message>
 1b0:	08 95       	ret

000001b2 <send_downstream>:
{
	
}

void send_downstream(uint8_t* buff)
{   
 1b2:	ef 92       	push	r14
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	ec 01       	movw	r28, r24
	//TODO: Check if it has a downstairs neighbor, not if the network is set
	//This function should always enter the downstairs neighbor as the "final node", as it will propogate down to the pi.
	if(Network_Set)
 1be:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <Network_Set>
 1c2:	88 23       	and	r24, r24
 1c4:	c1 f0       	breq	.+48     	; 0x1f6 <send_downstream+0x44>
	{
		if(THIS_DEVICE == last_node) Pk_Add_Data(buff,0x7777,0); //testing
 1c6:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <last_node>
 1ca:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <last_node+0x1>
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	29 f4       	brne	.+10     	; 0x1dc <send_downstream+0x2a>
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	67 e7       	ldi	r22, 0x77	; 119
 1d6:	77 e7       	ldi	r23, 0x77	; 119
 1d8:	ce 01       	movw	r24, r28
 1da:	90 d4       	rcall	.+2336   	; 0xafc <Pk_Add_Data>
		Pk_Set_Final_Node(buff,downstairs_neighbor.id);
 1dc:	0c e5       	ldi	r16, 0x5C	; 92
 1de:	12 e0       	ldi	r17, 0x02	; 2
 1e0:	f8 01       	movw	r30, r16
 1e2:	60 81       	ld	r22, Z
 1e4:	71 81       	ldd	r23, Z+1	; 0x01
 1e6:	ce 01       	movw	r24, r28
 1e8:	6d d4       	rcall	.+2266   	; 0xac4 <Pk_Set_Final_Node>
		send_message(downstairs_neighbor.id,buff);
 1ea:	be 01       	movw	r22, r28
 1ec:	f8 01       	movw	r30, r16
 1ee:	80 81       	ld	r24, Z
 1f0:	91 81       	ldd	r25, Z+1	; 0x01
 1f2:	6e df       	rcall	.-292    	; 0xd0 <send_message>
 1f4:	16 c0       	rjmp	.+44     	; 0x222 <send_downstream+0x70>
	}
	else
	{
		Pk_Set_Command(transmit_data_buffer,CMD_TO_PI,0,0,0,0);
 1f6:	e1 2c       	mov	r14, r1
 1f8:	00 e0       	ldi	r16, 0x00	; 0
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	6e ec       	ldi	r22, 0xCE	; 206
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	81 e3       	ldi	r24, 0x31	; 49
 204:	92 e0       	ldi	r25, 0x02	; 2
 206:	61 d4       	rcall	.+2242   	; 0xaca <Pk_Set_Command>
		Pk_Add_Data(transmit_data_buffer,0x8888,0);
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	68 e8       	ldi	r22, 0x88	; 136
 20c:	78 e8       	ldi	r23, 0x88	; 136
 20e:	81 e3       	ldi	r24, 0x31	; 49
 210:	92 e0       	ldi	r25, 0x02	; 2
 212:	74 d4       	rcall	.+2280   	; 0xafc <Pk_Add_Data>
		PORTD |= (1<<GREEN_LIGHT);
 214:	5f 9a       	sbi	0x0b, 7	; 11
		send_message(pi_address,buff);
 216:	be 01       	movw	r22, r28
 218:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 21c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 220:	57 df       	rcall	.-338    	; 0xd0 <send_message>
	}

}
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	ef 90       	pop	r14
 22c:	08 95       	ret

0000022e <get_adc_data>:
{
	
} 

void get_adc_data(uint8_t* buff) //buff is the message
{
 22e:	cf 93       	push	r28
	//gets the ADC value from a channel. Adds it to a buffer
	uint8_t channel = buff[PK_COMMAND_HEADER+PK_CMD_DATA_0];
	uint8_t location = buff[PK_COMMAND_HEADER+PK_CMD_DATA_1];
 230:	fc 01       	movw	r30, r24
 232:	c3 85       	ldd	r28, Z+11	; 0x0b
	uint8_t data_buffer[3]; //temporary little buffer to add the ADC data to
	memset(data_buffer,0,sizeof(data_buffer));
	//uint16_t data = get_adc_value(channel); //collect the data as one 16 bit value
	//word_to_bytes(data_buffer,data); //puts the data into the data buffer
	word_to_bytes(&transmit_data_buffer[PK_DATA_START+location*3],get_adc_value(channel));
 234:	82 85       	ldd	r24, Z+10	; 0x0a
 236:	6e d4       	rcall	.+2268   	; 0xb14 <get_adc_value>
 238:	2c 2f       	mov	r18, r28
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	2c 0f       	add	r18, r28
 23e:	31 1d       	adc	r19, r1
 240:	2c 0f       	add	r18, r28
 242:	31 1d       	adc	r19, r1
 244:	bc 01       	movw	r22, r24
 246:	c9 01       	movw	r24, r18
 248:	81 5c       	subi	r24, 0xC1	; 193
 24a:	9d 4f       	sbci	r25, 0xFD	; 253
 24c:	13 df       	rcall	.-474    	; 0x74 <word_to_bytes>
	
	send_downstream(transmit_data_buffer);
 24e:	81 e3       	ldi	r24, 0x31	; 49
 250:	92 e0       	ldi	r25, 0x02	; 2
 252:	af df       	rcall	.-162    	; 0x1b2 <send_downstream>
}
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <confirm_network_complete>:
		send_message(downstairs_neighbor.id,buff);
	}
}

void confirm_network_complete() //relays the fact that the network has reached the last node, should reach the pi
{
 258:	ef 92       	push	r14
 25a:	0f 93       	push	r16
	node_status = IDLE;
 25c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <node_status>
	Network_Set = true;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <Network_Set>
	Pk_Set_Command(transmit_data_buffer,CMD_NETWORK_COMPLETE,0,0,0,0);
 266:	e1 2c       	mov	r14, r1
 268:	00 e0       	ldi	r16, 0x00	; 0
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	65 e5       	ldi	r22, 0x55	; 85
 270:	75 e5       	ldi	r23, 0x55	; 85
 272:	81 e3       	ldi	r24, 0x31	; 49
 274:	92 e0       	ldi	r25, 0x02	; 2
 276:	29 d4       	rcall	.+2130   	; 0xaca <Pk_Set_Command>
	word_to_bytes(&transmit_data_buffer[PK_COMMAND_HEADER+PK_CMD_DATA_0],THIS_DEVICE); //writes the address of this node to the CMD_DATA_0 and CMD_DATA_1
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	8b e3       	ldi	r24, 0x3B	; 59
 27e:	92 e0       	ldi	r25, 0x02	; 2
 280:	f9 de       	rcall	.-526    	; 0x74 <word_to_bytes>
	//used so nodes know what the last node is
	send_downstream(transmit_data_buffer);	//send it downstream
 282:	81 e3       	ldi	r24, 0x31	; 49
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	95 df       	rcall	.-214    	; 0x1b2 <send_downstream>
}
 288:	0f 91       	pop	r16
 28a:	ef 90       	pop	r14
 28c:	08 95       	ret

0000028e <set_upstairs_neighbor>:
{
	//if the node has a downstairs neighbor, it needs an upstairs neighbor unless it is the last node
	//the node needs to ask the others in the field if they have a neighbor, and if not, choose that one as an upstairs neighbor
	//if a node received this request, and it has 1 neighbor, it should tell the requester to ask someone else
	//the number of neighbors will be loaded into PK_CMD_DATA_0
	if(message[PK_COMMAND_HEADER+PK_CMD_DATA_0] == 0) //this holds the number of neighbors the probed node has
 28e:	fc 01       	movw	r30, r24
 290:	22 85       	ldd	r18, Z+10	; 0x0a
 292:	21 11       	cpse	r18, r1
 294:	16 c0       	rjmp	.+44     	; 0x2c2 <set_upstairs_neighbor+0x34>
	{
		//in this case: node has successfully probed a "neighborless" node
		//the probed node is now an upstairs neighbor
		upstairs_neighbor.id = bytes_to_word(&message[PK_SRC_ADDR_HI]);
 296:	04 96       	adiw	r24, 0x04	; 4
 298:	e3 de       	rcall	.-570    	; 0x60 <bytes_to_word>
 29a:	ef e6       	ldi	r30, 0x6F	; 111
 29c:	f2 e0       	ldi	r31, 0x02	; 2
 29e:	80 83       	st	Z, r24
 2a0:	91 83       	std	Z+1, r25	; 0x01
		++neighbor_count; //increase the amount of neighbors. Generally speaking, this should always result in 2.
 2a2:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <neighbor_count>
 2a6:	9f 5f       	subi	r25, 0xFF	; 255
 2a8:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <neighbor_count>
		if(neighbor_count >= 2) Network_Set = true;
 2ac:	92 30       	cpi	r25, 0x02	; 2
 2ae:	18 f0       	brcs	.+6      	; 0x2b6 <set_upstairs_neighbor+0x28>
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <Network_Set>
		//if(Network_Set) {PORTD |= (1<<RED_LIGHT); PORTD &= ~(1<<GREEN_LIGHT);}
		node_status = IDLE;
 2b6:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <node_status>
		target_index = 0;
 2ba:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <target_index>
		//if(neighbor_count >2 ) PORTD|= (1<<YELLOW_LIGHT); //seeing if I'm over-counting neighbors
		continue_setup(upstairs_neighbor.id);
 2be:	4c df       	rcall	.-360    	; 0x158 <continue_setup>
 2c0:	08 95       	ret
	}
	else 
	{	
		++target_index; //increment through the list
 2c2:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <target_index>
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <target_index>
		//node status should still be WAITING_FOR_RESPONSE
		//so the waiting loop will continue unless the target_index is above the node count
		if(target_index > node_count) //we have exceeded the number of nodes available without finding a free node
 2cc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <node_count>
 2d0:	98 17       	cp	r25, r24
 2d2:	a0 f4       	brcc	.+40     	; 0x2fc <set_upstairs_neighbor+0x6e>
		{
			//this node is the last node, relay that info back to the pi
			upstairs_neighbor.id = 0x9999; //no upstairs neighbor
 2d4:	89 e9       	ldi	r24, 0x99	; 153
 2d6:	99 e9       	ldi	r25, 0x99	; 153
 2d8:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <upstairs_neighbor+0x1>
 2dc:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <upstairs_neighbor>
			++neighbor_count;
 2e0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <neighbor_count>
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
 2e6:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <neighbor_count>
			last_node = THIS_DEVICE;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <last_node+0x1>
 2f2:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <last_node>
			target_index = 0;
 2f6:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <target_index>
			//if(Network_Set) {PORTD |= (1<<RED_LIGHT); PORTD &= ~(1<<GREEN_LIGHT);}
			//Pk_Add_Data(transmit_data_buffer,0x9999); //look for this message
			confirm_network_complete();
 2fa:	ae df       	rcall	.-164    	; 0x258 <confirm_network_complete>
 2fc:	08 95       	ret

000002fe <send_upstream>:
	}

}

void send_upstream(uint8_t* buff)
{
 2fe:	ef 92       	push	r14
 300:	0f 93       	push	r16
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	ec 01       	movw	r28, r24
	if(upstairs_neighbor.id != 0x9999) //0x9999 means this is the last node
 308:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <upstairs_neighbor>
 30c:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <upstairs_neighbor+0x1>
 310:	89 39       	cpi	r24, 0x99	; 153
 312:	29 e9       	ldi	r18, 0x99	; 153
 314:	92 07       	cpc	r25, r18
 316:	19 f0       	breq	.+6      	; 0x31e <__stack+0x1f>
	{
		send_message(upstairs_neighbor.id,buff);
 318:	be 01       	movw	r22, r28
 31a:	da de       	rcall	.-588    	; 0xd0 <send_message>
 31c:	10 c0       	rjmp	.+32     	; 0x33e <__stack+0x3f>
	}
	else
	{
		Pk_Set_Command(buff,bytes_to_word(&buff[PK_CMD_HI]),9,0,0,0); //add a bit to indicate an error has ocurred
 31e:	ce 01       	movw	r24, r28
 320:	02 96       	adiw	r24, 0x02	; 2
 322:	9e de       	rcall	.-708    	; 0x60 <bytes_to_word>
 324:	e1 2c       	mov	r14, r1
 326:	00 e0       	ldi	r16, 0x00	; 0
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	49 e0       	ldi	r20, 0x09	; 9
 32c:	bc 01       	movw	r22, r24
 32e:	ce 01       	movw	r24, r28
 330:	cc d3       	rcall	.+1944   	; 0xaca <Pk_Set_Command>
		send_message(downstairs_neighbor.id,buff);
 332:	be 01       	movw	r22, r28
 334:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <downstairs_neighbor>
 338:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <downstairs_neighbor+0x1>
 33c:	c9 de       	rcall	.-622    	; 0xd0 <send_message>
	}
}
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	0f 91       	pop	r16
 344:	ef 90       	pop	r14
 346:	08 95       	ret

00000348 <probe_neighbor_status>:
void set_last_node(uint8_t* buff)
{	//executes upon "network complete" confirmation. Assigns the "end of the chain" for all nodes.
	last_node = bytes_to_word(&buff[PK_COMMAND_HEADER+PK_CMD_DATA_0]);
}
void probe_neighbor_status(uint16_t target)  //sends a request to see how many neighbors a node has during setup
{
 348:	ef 92       	push	r14
 34a:	0f 93       	push	r16
	//TODO: This only works during a network setup first routine.
	if(target == THIS_DEVICE) target = node_list[++target_index]; //to avoid possibly sending a message to itself. Unsure if possible
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	29 f4       	brne	.+10     	; 0x35a <probe_neighbor_status+0x12>
 350:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <target_index>
 354:	8f 5f       	subi	r24, 0xFF	; 255
 356:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <target_index>
	Pk_Set_Final_Node(transmit_data_buffer,node_list[target_index]);
 35a:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <target_index>
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	ee 0f       	add	r30, r30
 362:	ff 1f       	adc	r31, r31
 364:	ed 5f       	subi	r30, 0xFD	; 253
 366:	fe 4f       	sbci	r31, 0xFE	; 254
 368:	60 81       	ld	r22, Z
 36a:	71 81       	ldd	r23, Z+1	; 0x01
 36c:	81 e3       	ldi	r24, 0x31	; 49
 36e:	92 e0       	ldi	r25, 0x02	; 2
 370:	a9 d3       	rcall	.+1874   	; 0xac4 <Pk_Set_Final_Node>
	//Pk_Set_Data_Direction(transmit_data_buffer,0);
	Pk_Set_Command(transmit_data_buffer,CMD_PROBE_NEIGHBORS,0,0,0,0);
 372:	e1 2c       	mov	r14, r1
 374:	00 e0       	ldi	r16, 0x00	; 0
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	62 e4       	ldi	r22, 0x42	; 66
 37c:	72 e4       	ldi	r23, 0x42	; 66
 37e:	81 e3       	ldi	r24, 0x31	; 49
 380:	92 e0       	ldi	r25, 0x02	; 2
 382:	a3 d3       	rcall	.+1862   	; 0xaca <Pk_Set_Command>
	send_message(node_list[target_index],transmit_data_buffer);
 384:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <target_index>
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	ee 0f       	add	r30, r30
 38c:	ff 1f       	adc	r31, r31
 38e:	ed 5f       	subi	r30, 0xFD	; 253
 390:	fe 4f       	sbci	r31, 0xFE	; 254
 392:	61 e3       	ldi	r22, 0x31	; 49
 394:	72 e0       	ldi	r23, 0x02	; 2
 396:	80 81       	ld	r24, Z
 398:	91 81       	ldd	r25, Z+1	; 0x01
 39a:	9a de       	rcall	.-716    	; 0xd0 <send_message>
}
 39c:	0f 91       	pop	r16
 39e:	ef 90       	pop	r14
 3a0:	08 95       	ret

000003a2 <wait_for_response>:
	}
}


void wait_for_response(uint8_t * message)
{
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
	//TODO: Find out if receiving a message ensures a second message is not sent
	//this function waits for a response with a timer. If the time has passed and a message has not been received, the next node is searched
	//this is needed because the first message a node receives upon a reboot is thrown out
	//also controls for possibly randomly dropped messages
	node_status = WAITING_FOR_RESPONSE; //change the node status
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <node_status>
	PORTD |= (1<<GREEN_LIGHT);
 3ae:	5f 9a       	sbi	0x0b, 7	; 11
	uint8_t overflow_counter = 0;
	uint8_t repeat_counter = 0;
	PRR |= (0<<PRTWI); //write 1 to the PRTWI bit on PRR (power reduction register) to ensure clock is running: Should default to 0. This is just in case?
 3b0:	e4 e6       	ldi	r30, 0x64	; 100
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	80 83       	st	Z, r24
	TCCR0A |= (1<<CTC0); //set CTC bit (clear timer compare)
 3b8:	85 b5       	in	r24, 0x25	; 37
 3ba:	88 60       	ori	r24, 0x08	; 8
 3bc:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1<<CS02) | (1<< CS00); //clock select 1024 prescaler
 3be:	85 b5       	in	r24, 0x25	; 37
 3c0:	85 60       	ori	r24, 0x05	; 5
 3c2:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0; //set the 8 bit timer to 0
 3c4:	16 bc       	out	0x26, r1	; 38
	while(node_status == WAITING_FOR_RESPONSE)
	{
		//mrf_check_flags(&handle_rx,&handle_tx);		
		while((TIFR0 & 0x01) == 0) mrf_check_flags(&handle_rx,&handle_tx); //repeated action while the overflow hasn't occurred
		TCNT0 = 0; //write 0 to the counter on overflow
		TIFR0 = 0x01; //timer interrupt flag register cleared by writing 1. (this is super important, by the way)
 3c6:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t repeat_counter = 0;
	PRR |= (0<<PRTWI); //write 1 to the PRTWI bit on PRR (power reduction register) to ensure clock is running: Should default to 0. This is just in case?
	TCCR0A |= (1<<CTC0); //set CTC bit (clear timer compare)
	TCCR0A |= (1<<CS02) | (1<< CS00); //clock select 1024 prescaler
	TCNT0 = 0; //set the 8 bit timer to 0
	while(node_status == WAITING_FOR_RESPONSE)
 3c8:	38 c0       	rjmp	.+112    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	{
		//mrf_check_flags(&handle_rx,&handle_tx);		
		while((TIFR0 & 0x01) == 0) mrf_check_flags(&handle_rx,&handle_tx); //repeated action while the overflow hasn't occurred
 3ca:	6e e3       	ldi	r22, 0x3E	; 62
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	8f ea       	ldi	r24, 0xAF	; 175
 3d0:	92 e0       	ldi	r25, 0x02	; 2
 3d2:	bd d2       	rcall	.+1402   	; 0x94e <mrf_check_flags>
 3d4:	a8 9b       	sbis	0x15, 0	; 21
 3d6:	f9 cf       	rjmp	.-14     	; 0x3ca <wait_for_response+0x28>
		TCNT0 = 0; //write 0 to the counter on overflow
 3d8:	16 bc       	out	0x26, r1	; 38
		TIFR0 = 0x01; //timer interrupt flag register cleared by writing 1. (this is super important, by the way)
 3da:	d5 bb       	out	0x15, r29	; 21
 3dc:	c1 50       	subi	r28, 0x01	; 1
		++overflow_counter; //increment overflow counter
		//So what happens now? If I get a message that I'm waiting for (the command) this function needs to exit.
		//if I get something else, or nothing at all, the function needs to continue
		if(overflow_counter >= 10 ) //by calculator 39 ~= 10 seconds
 3de:	79 f5       	brne	.+94     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			{
				probe_neighbor_status(node_list[target_index]);
 3e0:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <target_index>
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	ed 5f       	subi	r30, 0xFD	; 253
 3ec:	fe 4f       	sbci	r31, 0xFE	; 254
 3ee:	80 81       	ld	r24, Z
 3f0:	91 81       	ldd	r25, Z+1	; 0x01
 3f2:	aa df       	rcall	.-172    	; 0x348 <probe_neighbor_status>
 3f4:	11 50       	subi	r17, 0x01	; 1
				++repeat_counter;
				overflow_counter = 0;
				if(repeat_counter >= 2)
 3f6:	11 f5       	brne	.+68     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
					{
						BLINK(LIGHT_PORT,RED_LIGHT);
 3f8:	5d 9a       	sbi	0x0b, 5	; 11
 3fa:	8f e4       	ldi	r24, 0x4F	; 79
 3fc:	93 ec       	ldi	r25, 0xC3	; 195
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <wait_for_response+0x5c>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 00       	nop
 406:	5d 98       	cbi	0x0b, 5	; 11
 408:	8f e4       	ldi	r24, 0x4F	; 79
 40a:	93 ec       	ldi	r25, 0xC3	; 195
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 412:	00 00       	nop
						++target_index;
 414:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <target_index>
 418:	ef 5f       	subi	r30, 0xFF	; 255
 41a:	e0 93 61 02 	sts	0x0261, r30	; 0x800261 <target_index>
						repeat_counter = 0;
						overflow_counter = 0;
						if(target_index > node_count) confirm_network_complete();
 41e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <node_count>
 422:	8e 17       	cp	r24, r30
 424:	10 f4       	brcc	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 426:	18 df       	rcall	.-464    	; 0x258 <confirm_network_complete>
 428:	08 c0       	rjmp	.+16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
						else probe_neighbor_status(node_list[target_index]);
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	ee 0f       	add	r30, r30
 42e:	ff 1f       	adc	r31, r31
 430:	ed 5f       	subi	r30, 0xFD	; 253
 432:	fe 4f       	sbci	r31, 0xFE	; 254
 434:	80 81       	ld	r24, Z
 436:	91 81       	ldd	r25, Z+1	; 0x01
 438:	87 df       	rcall	.-242    	; 0x348 <probe_neighbor_status>
	}
}


void wait_for_response(uint8_t * message)
{
 43a:	12 e0       	ldi	r17, 0x02	; 2
 43c:	ca e0       	ldi	r28, 0x0A	; 10
	uint8_t repeat_counter = 0;
	PRR |= (0<<PRTWI); //write 1 to the PRTWI bit on PRR (power reduction register) to ensure clock is running: Should default to 0. This is just in case?
	TCCR0A |= (1<<CTC0); //set CTC bit (clear timer compare)
	TCCR0A |= (1<<CS02) | (1<< CS00); //clock select 1024 prescaler
	TCNT0 = 0; //set the 8 bit timer to 0
	while(node_status == WAITING_FOR_RESPONSE)
 43e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <node_status>
 442:	82 30       	cpi	r24, 0x02	; 2
 444:	19 f4       	brne	.+6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	{
		//mrf_check_flags(&handle_rx,&handle_tx);		
		while((TIFR0 & 0x01) == 0) mrf_check_flags(&handle_rx,&handle_tx); //repeated action while the overflow hasn't occurred
 446:	a8 9b       	sbis	0x15, 0	; 21
 448:	c0 cf       	rjmp	.-128    	; 0x3ca <wait_for_response+0x28>
 44a:	c6 cf       	rjmp	.-116    	; 0x3d8 <wait_for_response+0x36>
						else probe_neighbor_status(node_list[target_index]);
					}
				}
		}
	
}
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	08 95       	ret

00000454 <setup_network>:
		break;
	}
}

void setup_network(uint8_t* message)
{	
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	ec 01       	movw	r28, r24
	//this function should only enter once, when the node is told to setup the network initially
	//TODO: Have a case where the network is already setup
	node_status = SETTING_UP; //flag for set up routine
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <node_status>
	neighbor_count = 0; //default it to 0 -> when routine is entered
 460:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <neighbor_count>
	target_index = 0; //default
 464:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <target_index>
	upstairs_neighbor.id = 0x0000; //default
 468:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <upstairs_neighbor+0x1>
 46c:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <upstairs_neighbor>
	downstairs_neighbor.id = 0x0000; //default
 470:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <downstairs_neighbor+0x1>
 474:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <downstairs_neighbor>
	set_downstairs_neighbor(message); //set the downstairs node for this (node that messages will be relayed to) as the person who requested this
 478:	ce 01       	movw	r24, r28
 47a:	17 de       	rcall	.-978    	; 0xaa <set_downstairs_neighbor>
	probe_neighbor_status(node_list[target_index]); //start by searching node 0x0001 -> must wait for a response
 47c:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <target_index>
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	ee 0f       	add	r30, r30
 484:	ff 1f       	adc	r31, r31
 486:	ed 5f       	subi	r30, 0xFD	; 253
 488:	fe 4f       	sbci	r31, 0xFE	; 254
 48a:	80 81       	ld	r24, Z
 48c:	91 81       	ldd	r25, Z+1	; 0x01
 48e:	5c df       	rcall	.-328    	; 0x348 <probe_neighbor_status>
	wait_for_response(message);
 490:	ce 01       	movw	r24, r28
 492:	87 df       	rcall	.-242    	; 0x3a2 <wait_for_response>
}
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <confirm_neighbor>:
	//Pk_Set_Data_Direction(transmit_data_buffer,0);
	Pk_Set_Command(transmit_data_buffer,CMD_PROBE_NEIGHBORS,0,0,0,0);
	send_message(node_list[target_index],transmit_data_buffer);
}
void confirm_neighbor(uint8_t* message) //responds to a request for the number of neighbors
{
 49a:	ef 92       	push	r14
 49c:	0f 93       	push	r16
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	ec 01       	movw	r28, r24
	Pk_Set_Command(transmit_data_buffer,CMD_NEIGHBOR_COUNT,neighbor_count,0,0,0);
 4a4:	e1 2c       	mov	r14, r1
 4a6:	00 e0       	ldi	r16, 0x00	; 0
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <neighbor_count>
 4ae:	64 e4       	ldi	r22, 0x44	; 68
 4b0:	74 e4       	ldi	r23, 0x44	; 68
 4b2:	81 e3       	ldi	r24, 0x31	; 49
 4b4:	92 e0       	ldi	r25, 0x02	; 2
 4b6:	09 d3       	rcall	.+1554   	; 0xaca <Pk_Set_Command>
	Pk_Set_Final_Node(transmit_data_buffer,bytes_to_word(&message[PK_SRC_ADDR_HI]));
 4b8:	24 96       	adiw	r28, 0x04	; 4
 4ba:	ce 01       	movw	r24, r28
 4bc:	d1 dd       	rcall	.-1118   	; 0x60 <bytes_to_word>
 4be:	bc 01       	movw	r22, r24
 4c0:	81 e3       	ldi	r24, 0x31	; 49
 4c2:	92 e0       	ldi	r25, 0x02	; 2
 4c4:	ff d2       	rcall	.+1534   	; 0xac4 <Pk_Set_Final_Node>
	send_message(bytes_to_word(&message[PK_SRC_ADDR_HI]), transmit_data_buffer); //return this to the requester
 4c6:	ce 01       	movw	r24, r28
 4c8:	cb dd       	rcall	.-1130   	; 0x60 <bytes_to_word>
 4ca:	61 e3       	ldi	r22, 0x31	; 49
 4cc:	72 e0       	ldi	r23, 0x02	; 2
 4ce:	00 de       	rcall	.-1024   	; 0xd0 <send_message>
}
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	0f 91       	pop	r16
 4d6:	ef 90       	pop	r14
 4d8:	08 95       	ret

000004da <COMMAND_HANDLER>:
	//doesn't really need to do anything upon sending a packet... yet...?
}


void COMMAND_HANDLER(uint8_t* message) //Looks at the command bits and decides what to do with the given command
{	
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	ec 01       	movw	r28, r24
	switch(bytes_to_word(&message[PK_COMMAND_HEADER+PK_CMD_HI])) //look at the command given to the node
 4e0:	08 96       	adiw	r24, 0x08	; 8
 4e2:	be dd       	rcall	.-1156   	; 0x60 <bytes_to_word>
 4e4:	81 34       	cpi	r24, 0x41	; 65
 4e6:	24 e4       	ldi	r18, 0x44	; 68
 4e8:	92 07       	cpc	r25, r18
 4ea:	01 f1       	breq	.+64     	; 0x52c <COMMAND_HANDLER+0x52>
 4ec:	58 f4       	brcc	.+22     	; 0x504 <COMMAND_HANDLER+0x2a>
 4ee:	8d 3d       	cpi	r24, 0xDD	; 221
 4f0:	91 05       	cpc	r25, r1
 4f2:	81 f1       	breq	.+96     	; 0x554 <COMMAND_HANDLER+0x7a>
 4f4:	82 34       	cpi	r24, 0x42	; 66
 4f6:	22 e4       	ldi	r18, 0x42	; 66
 4f8:	92 07       	cpc	r25, r18
 4fa:	f1 f0       	breq	.+60     	; 0x538 <COMMAND_HANDLER+0x5e>
 4fc:	8e 3c       	cpi	r24, 0xCE	; 206
 4fe:	91 05       	cpc	r25, r1
 500:	59 f5       	brne	.+86     	; 0x558 <COMMAND_HANDLER+0x7e>
 502:	25 c0       	rjmp	.+74     	; 0x54e <COMMAND_HANDLER+0x74>
 504:	82 35       	cpi	r24, 0x52	; 82
 506:	25 e4       	ldi	r18, 0x45	; 69
 508:	92 07       	cpc	r25, r18
 50a:	69 f0       	breq	.+26     	; 0x526 <COMMAND_HANDLER+0x4c>
 50c:	20 f4       	brcc	.+8      	; 0x516 <COMMAND_HANDLER+0x3c>
 50e:	84 34       	cpi	r24, 0x44	; 68
 510:	94 44       	sbci	r25, 0x44	; 68
 512:	a9 f0       	breq	.+42     	; 0x53e <COMMAND_HANDLER+0x64>
 514:	21 c0       	rjmp	.+66     	; 0x558 <COMMAND_HANDLER+0x7e>
 516:	85 35       	cpi	r24, 0x55	; 85
 518:	25 e4       	ldi	r18, 0x45	; 69
 51a:	92 07       	cpc	r25, r18
 51c:	51 f0       	breq	.+20     	; 0x532 <COMMAND_HANDLER+0x58>
 51e:	85 35       	cpi	r24, 0x55	; 85
 520:	95 45       	sbci	r25, 0x55	; 85
 522:	81 f0       	breq	.+32     	; 0x544 <COMMAND_HANDLER+0x6a>
 524:	19 c0       	rjmp	.+50     	; 0x558 <COMMAND_HANDLER+0x7e>
	{
		case CMD_PING: //node is being pinged
		ping_handler(message);
 526:	ce 01       	movw	r24, r28
 528:	fa dd       	rcall	.-1036   	; 0x11e <ping_handler>
		break;
 52a:	16 c0       	rjmp	.+44     	; 0x558 <COMMAND_HANDLER+0x7e>
		case CMD_ECHO: //node pinged responded to a ping
		echo_handler(message);
		break;
		case CMD_DATA:
		get_adc_data(message); //collect data from the required sensors TODO: Implement ADC collection
 52c:	ce 01       	movw	r24, r28
 52e:	7f de       	rcall	.-770    	; 0x22e <get_adc_data>
		break;
 530:	13 c0       	rjmp	.+38     	; 0x558 <COMMAND_HANDLER+0x7e>
		case CMD_SETUP:
		setup_network(message);//node is now in network setup mode
 532:	ce 01       	movw	r24, r28
 534:	8f df       	rcall	.-226    	; 0x454 <setup_network>
		break;
 536:	10 c0       	rjmp	.+32     	; 0x558 <COMMAND_HANDLER+0x7e>
		case CMD_PROBE_NEIGHBORS: //node has received a request to return the number (and ID?) of its neighbors
		confirm_neighbor(message);
 538:	ce 01       	movw	r24, r28
 53a:	af df       	rcall	.-162    	; 0x49a <confirm_neighbor>
		break;
 53c:	0d c0       	rjmp	.+26     	; 0x558 <COMMAND_HANDLER+0x7e>
		case CMD_NEIGHBOR_COUNT: //has received a response containing the number of neighbors (during a setup routine)
		set_upstairs_neighbor(message);
 53e:	ce 01       	movw	r24, r28
 540:	a6 de       	rcall	.-692    	; 0x28e <set_upstairs_neighbor>
		break;
 542:	0a c0       	rjmp	.+20     	; 0x558 <COMMAND_HANDLER+0x7e>
		case CMD_NETWORK_COMPLETE:
		set_last_node(message);
 544:	ce 01       	movw	r24, r28
 546:	bd dd       	rcall	.-1158   	; 0xc2 <set_last_node>
		send_downstream(message);//relay the message down that the network is complete. Should go all the way to the pi.
 548:	ce 01       	movw	r24, r28
 54a:	33 de       	rcall	.-922    	; 0x1b2 <send_downstream>
		break;
 54c:	05 c0       	rjmp	.+10     	; 0x558 <COMMAND_HANDLER+0x7e>
		case CMD_TO_PI:
		send_directly_to_pi(message);
 54e:	ce 01       	movw	r24, r28
 550:	1b de       	rcall	.-970    	; 0x188 <send_directly_to_pi>
		break;
 552:	02 c0       	rjmp	.+4      	; 0x558 <COMMAND_HANDLER+0x7e>
		case CMD_SET_LIGHT:
		set_light(message);
 554:	ce 01       	movw	r24, r28
 556:	93 dd       	rcall	.-1242   	; 0x7e <set_light>
		default:
		//command not recognized
		break;	
	}
	
}
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	08 95       	ret

0000055e <handle_rx>:
struct neighbor upstairs_neighbor; //up towards the end of the line



void handle_rx()
{	//TODO: case where network is not set up and the command is not intended for this node
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
	running_status |= (1<<RU_RX_HANDLE);  //MUTEX
 562:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 566:	88 60       	ori	r24, 0x08	; 8
 568:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	memcpy(recieved_data_buffer,mrf_get_rxdata(),mrf_rx_datalength()); //makes a copy of the rx data to a buffer
 56c:	0a d2       	rcall	.+1044   	; 0x982 <mrf_rx_datalength>
 56e:	ec 01       	movw	r28, r24
 570:	a1 d2       	rcall	.+1346   	; 0xab4 <mrf_get_rxdata>
 572:	ae 01       	movw	r20, r28
 574:	bc 01       	movw	r22, r24
 576:	89 e0       	ldi	r24, 0x09	; 9
 578:	92 e0       	ldi	r25, 0x02	; 2
 57a:	2c d3       	rcall	.+1624   	; 0xbd4 <memcpy>
	BLINK(LIGHT_PORT,GREEN_LIGHT);
 57c:	5f 9a       	sbi	0x0b, 7	; 11
 57e:	8f e4       	ldi	r24, 0x4F	; 79
 580:	93 ec       	ldi	r25, 0xC3	; 195
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <handle_rx+0x24>
 586:	00 c0       	rjmp	.+0      	; 0x588 <handle_rx+0x2a>
 588:	00 00       	nop
 58a:	5f 98       	cbi	0x0b, 7	; 11
 58c:	8f e4       	ldi	r24, 0x4F	; 79
 58e:	93 ec       	ldi	r25, 0xC3	; 195
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <handle_rx+0x32>
 594:	00 c0       	rjmp	.+0      	; 0x596 <handle_rx+0x38>
 596:	00 00       	nop
	//INSTRUCTIONS CAN ONLY GO UP, DATA CAN ONLY GO DOWN
	//WHEN DATA IS ACQUIRED (OR A LIGHT IS ACTIVATED IN THE TEST CASE), THE ONLY COMMAND WILL BE "SEND DOWNSTREAM"
	//A COMMAND WILL ONLY BE SENT FROM A DOWNSTAIRS NODE
	//if there is no "final node" selected (for individual node targeting) or this is the "final node", execute the command
	if((bytes_to_word(&recieved_data_buffer[PK_FINAL_ADDR_HI]) == 0x0000) || (bytes_to_word(&recieved_data_buffer[PK_FINAL_ADDR_HI]) == THIS_DEVICE)) COMMAND_HANDLER(recieved_data_buffer); 
 598:	8b e0       	ldi	r24, 0x0B	; 11
 59a:	92 e0       	ldi	r25, 0x02	; 2
 59c:	61 dd       	rcall	.-1342   	; 0x60 <bytes_to_word>
 59e:	89 2b       	or	r24, r25
 5a0:	29 f0       	breq	.+10     	; 0x5ac <handle_rx+0x4e>
 5a2:	8b e0       	ldi	r24, 0x0B	; 11
 5a4:	92 e0       	ldi	r25, 0x02	; 2
 5a6:	5c dd       	rcall	.-1352   	; 0x60 <bytes_to_word>
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	21 f4       	brne	.+8      	; 0x5b4 <handle_rx+0x56>
 5ac:	89 e0       	ldi	r24, 0x09	; 9
 5ae:	92 e0       	ldi	r25, 0x02	; 2
 5b0:	94 df       	rcall	.-216    	; 0x4da <COMMAND_HANDLER>
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <handle_rx+0x5c>
	//case where there is a node being selected but it is not this one:
	else send_upstream(recieved_data_buffer);
 5b4:	89 e0       	ldi	r24, 0x09	; 9
 5b6:	92 e0       	ldi	r25, 0x02	; 2
 5b8:	a2 de       	rcall	.-700    	; 0x2fe <send_upstream>
	/*if(bytes_to_word(&recieved_data_buffer[PK_COMMAND_HEADER+PK_CMD_HI]) == CMD_SETUP) setup_network(recieved_data_buffer); //executes the setup routine, regardless of final target
	else if(bytes_to_word(&recieved_data_buffer[PK_FINAL_ADDR_HI]) == THIS_DEVICE) COMMAND_HANDLER(recieved_data_buffer); //executes a command
	else if(THIS_DEVICE != last_node) send_upstream(recieved_data_buffer); //send it upstairs to the next node if it's not intended for this node
	else {Pk_Add_Data(recieved_data_buffer,0x9999,0); send_directly_to_pi(recieved_data_buffer);} //9999 means something wrong has happened*/
	running_status &= ~(1<<RU_RX_HANDLE);
 5ba:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 5be:	87 7f       	andi	r24, 0xF7	; 247
 5c0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
}
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	08 95       	ret

000005ca <__vector_1>:
	mrf_send16(target,buff,PK_SZ_TXRX_BUFFER);
	
}

ISR(INT0_vect) //for when the MRF interrupts (sending or receiving a message)
{
 5ca:	1f 92       	push	r1
 5cc:	0f 92       	push	r0
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	0f 92       	push	r0
 5d2:	11 24       	eor	r1, r1
 5d4:	2f 93       	push	r18
 5d6:	3f 93       	push	r19
 5d8:	4f 93       	push	r20
 5da:	5f 93       	push	r21
 5dc:	6f 93       	push	r22
 5de:	7f 93       	push	r23
 5e0:	8f 93       	push	r24
 5e2:	9f 93       	push	r25
 5e4:	af 93       	push	r26
 5e6:	bf 93       	push	r27
 5e8:	ef 93       	push	r30
 5ea:	ff 93       	push	r31
	running_status |= (1<<RU_INTERRUPT);
 5ec:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 5f0:	80 61       	ori	r24, 0x10	; 16
 5f2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	mrf_interrupt_handler();
 5f6:	d2 d1       	rcall	.+932    	; 0x99c <mrf_interrupt_handler>
	running_status &= ~(1<<RU_INTERRUPT);
 5f8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 5fc:	8f 7e       	andi	r24, 0xEF	; 239
 5fe:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 602:	ff 91       	pop	r31
 604:	ef 91       	pop	r30
 606:	bf 91       	pop	r27
 608:	af 91       	pop	r26
 60a:	9f 91       	pop	r25
 60c:	8f 91       	pop	r24
 60e:	7f 91       	pop	r23
 610:	6f 91       	pop	r22
 612:	5f 91       	pop	r21
 614:	4f 91       	pop	r20
 616:	3f 91       	pop	r19
 618:	2f 91       	pop	r18
 61a:	0f 90       	pop	r0
 61c:	0f be       	out	0x3f, r0	; 63
 61e:	0f 90       	pop	r0
 620:	1f 90       	pop	r1
 622:	18 95       	reti

00000624 <setup>:


void setup()
{
	//LED setup
	DDRD |= (1 << RED_LIGHT); //set PD7 to output for LED
 624:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << YELLOW_LIGHT);
 626:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << GREEN_LIGHT);
 628:	57 9a       	sbi	0x0a, 7	; 10
	
	//SPI port setup
	PORTB |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<ADC_CS) | (1<<SPI_SS) | (1<<MRF_CS) ; //set these ports to high (required)
 62a:	85 b1       	in	r24, 0x05	; 5
 62c:	8c 6e       	ori	r24, 0xEC	; 236
 62e:	85 b9       	out	0x05, r24	; 5
	DDRB |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<ADC_CS) | (1<<SPI_SS) | (1<<MRF_CS) ;  //set these to output
 630:	84 b1       	in	r24, 0x04	; 4
 632:	8c 6e       	ori	r24, 0xEC	; 236
 634:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<SPI_MISO);	//master in slave out, input on attiny
 636:	24 98       	cbi	0x04, 4	; 4
	
	spi_setup();
 638:	8a d2       	rcall	.+1300   	; 0xb4e <spi_setup>
	mrf_reset();
 63a:	43 d0       	rcall	.+134    	; 0x6c2 <mrf_reset>
	mrf_init();
 63c:	44 d1       	rcall	.+648    	; 0x8c6 <mrf_init>
	
	mrf_set_pan(ASMP_PANID); //set PANID
 63e:	8e ef       	ldi	r24, 0xFE	; 254
 640:	9a ec       	ldi	r25, 0xCA	; 202
 642:	ad d0       	rcall	.+346    	; 0x79e <mrf_set_pan>
	mrf_address16_write(THIS_DEVICE); //set device address -> 16 bit addressing
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	b4 d0       	rcall	.+360    	; 0x7b2 <mrf_address16_write>
	sei(); //starts interrupts, essential to let chip know message is being handled
 64a:	78 94       	sei
	EIMSK |= (1<<INT0);
 64c:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC01);
 64e:	e9 e6       	ldi	r30, 0x69	; 105
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	80 81       	ld	r24, Z
 654:	82 60       	ori	r24, 0x02	; 2
 656:	80 83       	st	Z, r24
	
	memset(transmit_data_buffer,0,PK_SZ_TXRX_BUFFER); //clear buffer to 0 on reset, possibly not needed
 658:	88 e2       	ldi	r24, 0x28	; 40
 65a:	e1 e3       	ldi	r30, 0x31	; 49
 65c:	f2 e0       	ldi	r31, 0x02	; 2
 65e:	df 01       	movw	r26, r30
 660:	98 2f       	mov	r25, r24
 662:	1d 92       	st	X+, r1
 664:	9a 95       	dec	r25
 666:	e9 f7       	brne	.-6      	; 0x662 <setup+0x3e>
	memset(recieved_data_buffer,0,PK_SZ_TXRX_BUFFER); //clear buffer to 0 on reset
 668:	e9 e0       	ldi	r30, 0x09	; 9
 66a:	f2 e0       	ldi	r31, 0x02	; 2
 66c:	df 01       	movw	r26, r30
 66e:	1d 92       	st	X+, r1
 670:	8a 95       	dec	r24
 672:	e9 f7       	brne	.-6      	; 0x66e <setup+0x4a>
	
	Network_Set = false; //default to network setup: No down or up neighbor
 674:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <Network_Set>
	node_status = IDLE; //default to idle
 678:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <node_status>
	neighbor_count = 0; //setup resets these values to 0
 67c:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <neighbor_count>
	target_index = 0;
 680:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <target_index>
	last_node = 0x0000;
 684:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <last_node+0x1>
 688:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <last_node>
	
	BLINK(LIGHT_PORT,GREEN_LIGHT);
 68c:	5f 9a       	sbi	0x0b, 7	; 11
 68e:	8f e4       	ldi	r24, 0x4F	; 79
 690:	93 ec       	ldi	r25, 0xC3	; 195
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	f1 f7       	brne	.-4      	; 0x692 <setup+0x6e>
 696:	00 c0       	rjmp	.+0      	; 0x698 <setup+0x74>
 698:	00 00       	nop
 69a:	5f 98       	cbi	0x0b, 7	; 11
 69c:	af e4       	ldi	r26, 0x4F	; 79
 69e:	b3 ec       	ldi	r27, 0xC3	; 195
 6a0:	11 97       	sbiw	r26, 0x01	; 1
 6a2:	f1 f7       	brne	.-4      	; 0x6a0 <setup+0x7c>
 6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <setup+0x82>
 6a6:	00 00       	nop
 6a8:	08 95       	ret

000006aa <main>:
}


int main(void)
{
    setup();
 6aa:	bc df       	rcall	.-136    	; 0x624 <setup>
 6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <main+0xe>
    while (1) 
    {
		while(node_status == IDLE) mrf_check_flags(&handle_rx, &handle_tx); //check for interrupts
 6ae:	6e e3       	ldi	r22, 0x3E	; 62
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	8f ea       	ldi	r24, 0xAF	; 175
 6b4:	92 e0       	ldi	r25, 0x02	; 2
 6b6:	4b d1       	rcall	.+662    	; 0x94e <mrf_check_flags>
 6b8:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <node_status>
 6bc:	88 23       	and	r24, r24
 6be:	b9 f3       	breq	.-18     	; 0x6ae <main+0x4>
 6c0:	fd cf       	rjmp	.-6      	; 0x6bc <main+0x12>

000006c2 <mrf_reset>:
        mrf_write_long(MRF_TESTMODE, 0x00); // Disable PA/LNA on MRF24J40MB module.
    }
}

void mrf_rx_flush(void) {
    mrf_write_short(MRF_RXFLUSH, 0x01);
 6c2:	59 98       	cbi	0x0b, 1	; 11
 6c4:	87 ea       	ldi	r24, 0xA7	; 167
 6c6:	91 e6       	ldi	r25, 0x61	; 97
 6c8:	01 97       	sbiw	r24, 0x01	; 1
 6ca:	f1 f7       	brne	.-4      	; 0x6c8 <mrf_reset+0x6>
 6cc:	00 c0       	rjmp	.+0      	; 0x6ce <mrf_reset+0xc>
 6ce:	00 00       	nop
 6d0:	59 9a       	sbi	0x0b, 1	; 11
 6d2:	83 e2       	ldi	r24, 0x23	; 35
 6d4:	94 ef       	ldi	r25, 0xF4	; 244
 6d6:	01 97       	sbiw	r24, 0x01	; 1
 6d8:	f1 f7       	brne	.-4      	; 0x6d6 <mrf_reset+0x14>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <mrf_reset+0x1a>
 6dc:	00 00       	nop
 6de:	08 95       	ret

000006e0 <mrf_read_short>:
 6e0:	cf 93       	push	r28
 6e2:	df 93       	push	r29
 6e4:	cb e0       	ldi	r28, 0x0B	; 11
 6e6:	d1 e0       	ldi	r29, 0x01	; 1
 6e8:	88 0f       	add	r24, r24
 6ea:	8e 77       	andi	r24, 0x7E	; 126
 6ec:	88 83       	st	Y, r24
 6ee:	19 82       	std	Y+1, r1	; 0x01
 6f0:	26 e0       	ldi	r18, 0x06	; 6
 6f2:	42 e0       	ldi	r20, 0x02	; 2
 6f4:	be 01       	movw	r22, r28
 6f6:	ce 01       	movw	r24, r28
 6f8:	37 d2       	rcall	.+1134   	; 0xb68 <spi_transfer_nbytes>
 6fa:	89 81       	ldd	r24, Y+1	; 0x01
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	08 95       	ret

00000702 <mrf_read_long>:
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	cb e0       	ldi	r28, 0x0B	; 11
 708:	d1 e0       	ldi	r29, 0x01	; 1
 70a:	9c 01       	movw	r18, r24
 70c:	36 95       	lsr	r19
 70e:	27 95       	ror	r18
 710:	36 95       	lsr	r19
 712:	27 95       	ror	r18
 714:	36 95       	lsr	r19
 716:	27 95       	ror	r18
 718:	20 68       	ori	r18, 0x80	; 128
 71a:	28 83       	st	Y, r18
 71c:	82 95       	swap	r24
 71e:	88 0f       	add	r24, r24
 720:	80 7e       	andi	r24, 0xE0	; 224
 722:	89 83       	std	Y+1, r24	; 0x01
 724:	1a 82       	std	Y+2, r1	; 0x02
 726:	26 e0       	ldi	r18, 0x06	; 6
 728:	43 e0       	ldi	r20, 0x03	; 3
 72a:	be 01       	movw	r22, r28
 72c:	ce 01       	movw	r24, r28
 72e:	1c d2       	rcall	.+1080   	; 0xb68 <spi_transfer_nbytes>
 730:	8a 81       	ldd	r24, Y+2	; 0x02
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	08 95       	ret

00000738 <mrf_write_short>:
 738:	eb e0       	ldi	r30, 0x0B	; 11
 73a:	f1 e0       	ldi	r31, 0x01	; 1
 73c:	88 0f       	add	r24, r24
 73e:	8e 77       	andi	r24, 0x7E	; 126
 740:	81 60       	ori	r24, 0x01	; 1
 742:	80 83       	st	Z, r24
 744:	61 83       	std	Z+1, r22	; 0x01
 746:	26 e0       	ldi	r18, 0x06	; 6
 748:	42 e0       	ldi	r20, 0x02	; 2
 74a:	bf 01       	movw	r22, r30
 74c:	cf 01       	movw	r24, r30
 74e:	0c d2       	rcall	.+1048   	; 0xb68 <spi_transfer_nbytes>
 750:	08 95       	ret

00000752 <mrf_write_long>:
 752:	eb e0       	ldi	r30, 0x0B	; 11
 754:	f1 e0       	ldi	r31, 0x01	; 1
 756:	9c 01       	movw	r18, r24
 758:	36 95       	lsr	r19
 75a:	27 95       	ror	r18
 75c:	36 95       	lsr	r19
 75e:	27 95       	ror	r18
 760:	36 95       	lsr	r19
 762:	27 95       	ror	r18
 764:	20 68       	ori	r18, 0x80	; 128
 766:	20 83       	st	Z, r18
 768:	82 95       	swap	r24
 76a:	88 0f       	add	r24, r24
 76c:	80 7e       	andi	r24, 0xE0	; 224
 76e:	80 61       	ori	r24, 0x10	; 16
 770:	81 83       	std	Z+1, r24	; 0x01
 772:	62 83       	std	Z+2, r22	; 0x02
 774:	26 e0       	ldi	r18, 0x06	; 6
 776:	43 e0       	ldi	r20, 0x03	; 3
 778:	bf 01       	movw	r22, r30
 77a:	cf 01       	movw	r24, r30
 77c:	f5 d1       	rcall	.+1002   	; 0xb68 <spi_transfer_nbytes>
 77e:	08 95       	ret

00000780 <mrf_get_pan>:
 780:	cf 93       	push	r28
 782:	82 e0       	ldi	r24, 0x02	; 2
 784:	ad df       	rcall	.-166    	; 0x6e0 <mrf_read_short>
 786:	c8 2f       	mov	r28, r24
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	aa df       	rcall	.-172    	; 0x6e0 <mrf_read_short>
 78c:	2c 2f       	mov	r18, r28
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	32 2f       	mov	r19, r18
 792:	22 27       	eor	r18, r18
 794:	a9 01       	movw	r20, r18
 796:	48 2b       	or	r20, r24
 798:	ca 01       	movw	r24, r20
 79a:	cf 91       	pop	r28
 79c:	08 95       	ret

0000079e <mrf_set_pan>:
 79e:	cf 93       	push	r28
 7a0:	c8 2f       	mov	r28, r24
 7a2:	69 2f       	mov	r22, r25
 7a4:	82 e0       	ldi	r24, 0x02	; 2
 7a6:	c8 df       	rcall	.-112    	; 0x738 <mrf_write_short>
 7a8:	6c 2f       	mov	r22, r28
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	c5 df       	rcall	.-118    	; 0x738 <mrf_write_short>
 7ae:	cf 91       	pop	r28
 7b0:	08 95       	ret

000007b2 <mrf_address16_write>:
 7b2:	cf 93       	push	r28
 7b4:	c8 2f       	mov	r28, r24
 7b6:	69 2f       	mov	r22, r25
 7b8:	84 e0       	ldi	r24, 0x04	; 4
 7ba:	be df       	rcall	.-132    	; 0x738 <mrf_write_short>
 7bc:	6c 2f       	mov	r22, r28
 7be:	83 e0       	ldi	r24, 0x03	; 3
 7c0:	bb df       	rcall	.-138    	; 0x738 <mrf_write_short>
 7c2:	cf 91       	pop	r28
 7c4:	08 95       	ret

000007c6 <mrf_address16_read>:
 7c6:	cf 93       	push	r28
 7c8:	84 e0       	ldi	r24, 0x04	; 4
 7ca:	8a df       	rcall	.-236    	; 0x6e0 <mrf_read_short>
 7cc:	c8 2f       	mov	r28, r24
 7ce:	83 e0       	ldi	r24, 0x03	; 3
 7d0:	87 df       	rcall	.-242    	; 0x6e0 <mrf_read_short>
 7d2:	2c 2f       	mov	r18, r28
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	32 2f       	mov	r19, r18
 7d8:	22 27       	eor	r18, r18
 7da:	a9 01       	movw	r20, r18
 7dc:	48 2b       	or	r20, r24
 7de:	ca 01       	movw	r24, r20
 7e0:	cf 91       	pop	r28
 7e2:	08 95       	ret

000007e4 <mrf_send16>:
 7e4:	df 92       	push	r13
 7e6:	ef 92       	push	r14
 7e8:	ff 92       	push	r15
 7ea:	0f 93       	push	r16
 7ec:	1f 93       	push	r17
 7ee:	cf 93       	push	r28
 7f0:	df 93       	push	r29
 7f2:	d8 2f       	mov	r29, r24
 7f4:	c9 2f       	mov	r28, r25
 7f6:	7b 01       	movw	r14, r22
 7f8:	d4 2e       	mov	r13, r20
 7fa:	69 e0       	ldi	r22, 0x09	; 9
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	a8 df       	rcall	.-176    	; 0x752 <mrf_write_long>
 802:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <ignoreBytes>
 806:	67 5f       	subi	r22, 0xF7	; 247
 808:	6d 0d       	add	r22, r13
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	a1 df       	rcall	.-190    	; 0x752 <mrf_write_long>
 810:	61 e6       	ldi	r22, 0x61	; 97
 812:	82 e0       	ldi	r24, 0x02	; 2
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	9d df       	rcall	.-198    	; 0x752 <mrf_write_long>
 818:	68 e8       	ldi	r22, 0x88	; 136
 81a:	83 e0       	ldi	r24, 0x03	; 3
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	99 df       	rcall	.-206    	; 0x752 <mrf_write_long>
 820:	61 e0       	ldi	r22, 0x01	; 1
 822:	84 e0       	ldi	r24, 0x04	; 4
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	95 df       	rcall	.-214    	; 0x752 <mrf_write_long>
 828:	ab df       	rcall	.-170    	; 0x780 <mrf_get_pan>
 82a:	19 2f       	mov	r17, r25
 82c:	68 2f       	mov	r22, r24
 82e:	85 e0       	ldi	r24, 0x05	; 5
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	8f df       	rcall	.-226    	; 0x752 <mrf_write_long>
 834:	61 2f       	mov	r22, r17
 836:	86 e0       	ldi	r24, 0x06	; 6
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	8b df       	rcall	.-234    	; 0x752 <mrf_write_long>
 83c:	6d 2f       	mov	r22, r29
 83e:	87 e0       	ldi	r24, 0x07	; 7
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	87 df       	rcall	.-242    	; 0x752 <mrf_write_long>
 844:	6c 2f       	mov	r22, r28
 846:	88 e0       	ldi	r24, 0x08	; 8
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	83 df       	rcall	.-250    	; 0x752 <mrf_write_long>
 84c:	bc df       	rcall	.-136    	; 0x7c6 <mrf_address16_read>
 84e:	c9 2f       	mov	r28, r25
 850:	68 2f       	mov	r22, r24
 852:	89 e0       	ldi	r24, 0x09	; 9
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	7d df       	rcall	.-262    	; 0x752 <mrf_write_long>
 858:	6c 2f       	mov	r22, r28
 85a:	8a e0       	ldi	r24, 0x0A	; 10
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	79 df       	rcall	.-270    	; 0x752 <mrf_write_long>
 860:	c0 91 86 01 	lds	r28, 0x0186	; 0x800186 <ignoreBytes>
 864:	d0 91 87 01 	lds	r29, 0x0187	; 0x800187 <ignoreBytes+0x1>
 868:	2b 96       	adiw	r28, 0x0b	; 11
 86a:	dd 20       	and	r13, r13
 86c:	61 f0       	breq	.+24     	; 0x886 <mrf_send16+0xa2>
 86e:	87 01       	movw	r16, r14
 870:	ed 0c       	add	r14, r13
 872:	f1 1c       	adc	r15, r1
 874:	f8 01       	movw	r30, r16
 876:	61 91       	ld	r22, Z+
 878:	8f 01       	movw	r16, r30
 87a:	ce 01       	movw	r24, r28
 87c:	6a df       	rcall	.-300    	; 0x752 <mrf_write_long>
 87e:	21 96       	adiw	r28, 0x01	; 1
 880:	0e 15       	cp	r16, r14
 882:	1f 05       	cpc	r17, r15
 884:	b9 f7       	brne	.-18     	; 0x874 <mrf_send16+0x90>
 886:	65 e0       	ldi	r22, 0x05	; 5
 888:	8b e1       	ldi	r24, 0x1B	; 27
 88a:	56 df       	rcall	.-340    	; 0x738 <mrf_write_short>
 88c:	df 91       	pop	r29
 88e:	cf 91       	pop	r28
 890:	1f 91       	pop	r17
 892:	0f 91       	pop	r16
 894:	ff 90       	pop	r15
 896:	ef 90       	pop	r14
 898:	df 90       	pop	r13
 89a:	08 95       	ret

0000089c <mrf_set_interrupts>:
 89c:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <isr_lock>
 8a0:	66 ef       	ldi	r22, 0xF6	; 246
 8a2:	82 e3       	ldi	r24, 0x32	; 50
 8a4:	49 df       	rcall	.-366    	; 0x738 <mrf_write_short>
 8a6:	08 95       	ret

000008a8 <mrf_set_channel>:
 8a8:	68 2f       	mov	r22, r24
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	6b 50       	subi	r22, 0x0B	; 11
 8ae:	71 09       	sbc	r23, r1
 8b0:	62 95       	swap	r22
 8b2:	72 95       	swap	r23
 8b4:	70 7f       	andi	r23, 0xF0	; 240
 8b6:	76 27       	eor	r23, r22
 8b8:	60 7f       	andi	r22, 0xF0	; 240
 8ba:	76 27       	eor	r23, r22
 8bc:	63 60       	ori	r22, 0x03	; 3
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	92 e0       	ldi	r25, 0x02	; 2
 8c2:	47 df       	rcall	.-370    	; 0x752 <mrf_write_long>
 8c4:	08 95       	ret

000008c6 <mrf_init>:
 8c6:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <mrf_flags>
 8ca:	67 e0       	ldi	r22, 0x07	; 7
 8cc:	8a e2       	ldi	r24, 0x2A	; 42
 8ce:	34 df       	rcall	.-408    	; 0x738 <mrf_write_short>
 8d0:	68 e9       	ldi	r22, 0x98	; 152
 8d2:	88 e1       	ldi	r24, 0x18	; 24
 8d4:	31 df       	rcall	.-414    	; 0x738 <mrf_write_short>
 8d6:	65 e9       	ldi	r22, 0x95	; 149
 8d8:	8e e2       	ldi	r24, 0x2E	; 46
 8da:	2e df       	rcall	.-420    	; 0x738 <mrf_write_short>
 8dc:	63 e0       	ldi	r22, 0x03	; 3
 8de:	80 e0       	ldi	r24, 0x00	; 0
 8e0:	92 e0       	ldi	r25, 0x02	; 2
 8e2:	37 df       	rcall	.-402    	; 0x752 <mrf_write_long>
 8e4:	61 e0       	ldi	r22, 0x01	; 1
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	92 e0       	ldi	r25, 0x02	; 2
 8ea:	33 df       	rcall	.-410    	; 0x752 <mrf_write_long>
 8ec:	60 e8       	ldi	r22, 0x80	; 128
 8ee:	82 e0       	ldi	r24, 0x02	; 2
 8f0:	92 e0       	ldi	r25, 0x02	; 2
 8f2:	2f df       	rcall	.-418    	; 0x752 <mrf_write_long>
 8f4:	60 e9       	ldi	r22, 0x90	; 144
 8f6:	86 e0       	ldi	r24, 0x06	; 6
 8f8:	92 e0       	ldi	r25, 0x02	; 2
 8fa:	2b df       	rcall	.-426    	; 0x752 <mrf_write_long>
 8fc:	60 e8       	ldi	r22, 0x80	; 128
 8fe:	87 e0       	ldi	r24, 0x07	; 7
 900:	92 e0       	ldi	r25, 0x02	; 2
 902:	27 df       	rcall	.-434    	; 0x752 <mrf_write_long>
 904:	60 e1       	ldi	r22, 0x10	; 16
 906:	88 e0       	ldi	r24, 0x08	; 8
 908:	92 e0       	ldi	r25, 0x02	; 2
 90a:	23 df       	rcall	.-442    	; 0x752 <mrf_write_long>
 90c:	61 e2       	ldi	r22, 0x21	; 33
 90e:	80 e2       	ldi	r24, 0x20	; 32
 910:	92 e0       	ldi	r25, 0x02	; 2
 912:	1f df       	rcall	.-450    	; 0x752 <mrf_write_long>
 914:	60 e8       	ldi	r22, 0x80	; 128
 916:	8a e3       	ldi	r24, 0x3A	; 58
 918:	0f df       	rcall	.-482    	; 0x738 <mrf_write_short>
 91a:	60 e6       	ldi	r22, 0x60	; 96
 91c:	8f e3       	ldi	r24, 0x3F	; 63
 91e:	0c df       	rcall	.-488    	; 0x738 <mrf_write_short>
 920:	60 e4       	ldi	r22, 0x40	; 64
 922:	8e e3       	ldi	r24, 0x3E	; 62
 924:	09 df       	rcall	.-494    	; 0x738 <mrf_write_short>
 926:	ba df       	rcall	.-140    	; 0x89c <mrf_set_interrupts>
 928:	84 e1       	ldi	r24, 0x14	; 20
 92a:	be df       	rcall	.-132    	; 0x8a8 <mrf_set_channel>
 92c:	64 e0       	ldi	r22, 0x04	; 4
 92e:	86 e3       	ldi	r24, 0x36	; 54
 930:	03 df       	rcall	.-506    	; 0x738 <mrf_write_short>
 932:	60 e0       	ldi	r22, 0x00	; 0
 934:	86 e3       	ldi	r24, 0x36	; 54
 936:	00 df       	rcall	.-512    	; 0x738 <mrf_write_short>
 938:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <flag_got_rx>
 93c:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <flag_got_tx>
 940:	89 ef       	ldi	r24, 0xF9	; 249
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	01 97       	sbiw	r24, 0x01	; 1
 946:	f1 f7       	brne	.-4      	; 0x944 <mrf_init+0x7e>
 948:	00 c0       	rjmp	.+0      	; 0x94a <mrf_init+0x84>
 94a:	00 00       	nop
 94c:	08 95       	ret

0000094e <mrf_check_flags>:
 94e:	cf 93       	push	r28
 950:	df 93       	push	r29
 952:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <isr_lock>
 956:	21 11       	cpse	r18, r1
 958:	11 c0       	rjmp	.+34     	; 0x97c <mrf_check_flags+0x2e>
 95a:	eb 01       	movw	r28, r22
 95c:	fc 01       	movw	r30, r24
 95e:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <flag_got_rx>
 962:	22 23       	and	r18, r18
 964:	19 f0       	breq	.+6      	; 0x96c <mrf_check_flags+0x1e>
 966:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <flag_got_rx>
 96a:	09 95       	icall
 96c:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <flag_got_tx>
 970:	88 23       	and	r24, r24
 972:	21 f0       	breq	.+8      	; 0x97c <mrf_check_flags+0x2e>
 974:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <flag_got_tx>
 978:	fe 01       	movw	r30, r28
 97a:	09 95       	icall
 97c:	df 91       	pop	r29
 97e:	cf 91       	pop	r28
 980:	08 95       	ret

00000982 <mrf_rx_datalength>:
 982:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rx_info>
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	0b 97       	sbiw	r24, 0x0b	; 11
 98a:	08 95       	ret

0000098c <mrf_rx_disable>:
}

void mrf_rx_disable(void) {
    mrf_write_short(MRF_BBREG1, 0x04);  // RXDECINV - disable receiver
 98c:	64 e0       	ldi	r22, 0x04	; 4
 98e:	89 e3       	ldi	r24, 0x39	; 57
 990:	d3 de       	rcall	.-602    	; 0x738 <mrf_write_short>
 992:	08 95       	ret

00000994 <mrf_rx_enable>:
}

void mrf_rx_enable(void) {
    mrf_write_short(MRF_BBREG1, 0x00);  // RXDECINV - enable receiver
 994:	60 e0       	ldi	r22, 0x00	; 0
 996:	89 e3       	ldi	r24, 0x39	; 57
 998:	cf de       	rcall	.-610    	; 0x738 <mrf_write_short>
 99a:	08 95       	ret

0000099c <mrf_interrupt_handler>:
 * Call this from within an interrupt handler connected to the MRFs output
 * interrupt pin.  It handles reading in any data from the module, and letting it
 * continue working.
 * Only the most recent data is ever kept.
 */
void mrf_interrupt_handler(void) {
 99c:	af 92       	push	r10
 99e:	bf 92       	push	r11
 9a0:	cf 92       	push	r12
 9a2:	df 92       	push	r13
 9a4:	ef 92       	push	r14
 9a6:	ff 92       	push	r15
 9a8:	0f 93       	push	r16
 9aa:	1f 93       	push	r17
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
    //GRAB_ISR_MUTEX;
    isr_lock = 1;
 9b0:	81 e0       	ldi	r24, 0x01	; 1
 9b2:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <isr_lock>
    uint8_t last_interrupt = mrf_read_short(MRF_INTSTAT);
 9b6:	81 e3       	ldi	r24, 0x31	; 49
 9b8:	93 de       	rcall	.-730    	; 0x6e0 <mrf_read_short>
 9ba:	b8 2e       	mov	r11, r24
    if (last_interrupt & MRF_I_RXIF) {
 9bc:	83 ff       	sbrs	r24, 3
 9be:	4f c0       	rjmp	.+158    	; 0xa5e <mrf_interrupt_handler+0xc2>
		//ERROR: This doesn't enter upon reboot until a second message is sent
		//BLINK(LIGHT_PORT,GREEN_LIGHT);
        int i = 0;
        flag_got_rx++;
 9c0:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <flag_got_rx>
 9c4:	8f 5f       	subi	r24, 0xFF	; 255
 9c6:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <flag_got_rx>
        // read out the packet data...
    //    cli();
        mrf_rx_disable();
 9ca:	e0 df       	rcall	.-64     	; 0x98c <mrf_rx_disable>
        // read start of rxfifo for, has 2 bytes more added by FCS. frame_length = m + n + 2
        uint8_t frame_length = mrf_read_long(0x300);
 9cc:	80 e0       	ldi	r24, 0x00	; 0
 9ce:	93 e0       	ldi	r25, 0x03	; 3
 9d0:	98 de       	rcall	.-720    	; 0x702 <mrf_read_long>
 9d2:	a8 2e       	mov	r10, r24

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
 9d4:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <mrf_flags>
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 9d8:	ea 2c       	mov	r14, r10
 9da:	f1 2c       	mov	r15, r1
 9dc:	1e 14       	cp	r1, r14
 9de:	1f 04       	cpc	r1, r15
 9e0:	9c f4       	brge	.+38     	; 0xa08 <mrf_interrupt_handler+0x6c>
 9e2:	c7 01       	movw	r24, r14
 9e4:	9c 01       	movw	r18, r24
 9e6:	28 57       	subi	r18, 0x78	; 120
 9e8:	3e 4f       	sbci	r19, 0xFE	; 254
 9ea:	69 01       	movw	r12, r18
 9ec:	c8 e8       	ldi	r28, 0x88	; 136
 9ee:	d1 e0       	ldi	r29, 0x01	; 1
                rx_buf[rb_ptr++] = mrf_read_long(0x301 + i);
 9f0:	01 e0       	ldi	r16, 0x01	; 1
 9f2:	13 e0       	ldi	r17, 0x03	; 3
 9f4:	08 58       	subi	r16, 0x88	; 136
 9f6:	11 40       	sbci	r17, 0x01	; 1
 9f8:	c8 01       	movw	r24, r16
 9fa:	8c 0f       	add	r24, r28
 9fc:	9d 1f       	adc	r25, r29
 9fe:	81 de       	rcall	.-766    	; 0x702 <mrf_read_long>
 a00:	89 93       	st	Y+, r24
        uint8_t frame_length = mrf_read_long(0x300);

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 a02:	cc 15       	cp	r28, r12
 a04:	dd 05       	cpc	r29, r13
 a06:	c1 f7       	brne	.-16     	; 0x9f8 <mrf_interrupt_handler+0x5c>
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 a08:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rx_info>
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	0b 97       	sbiw	r24, 0x0b	; 11
 a10:	18 16       	cp	r1, r24
 a12:	19 06       	cpc	r1, r25
 a14:	ac f4       	brge	.+42     	; 0xa40 <mrf_interrupt_handler+0xa4>
 a16:	c0 e1       	ldi	r28, 0x10	; 16
 a18:	d1 e0       	ldi	r29, 0x01	; 1
 a1a:	c1 2c       	mov	r12, r1
 a1c:	d1 2c       	mov	r13, r1
uint8_t * mrf_get_rxbuf(void) {
    return rx_buf;
}

int mrf_rx_datalength(void) {
    return rx_info.frame_length - bytes_nodata;
 a1e:	0f e0       	ldi	r16, 0x0F	; 15
 a20:	11 e0       	ldi	r17, 0x01	; 1

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
 a22:	3f ef       	ldi	r19, 0xFF	; 255
 a24:	c3 1a       	sub	r12, r19
 a26:	d3 0a       	sbc	r13, r19
 a28:	c6 01       	movw	r24, r12
 a2a:	87 5f       	subi	r24, 0xF7	; 247
 a2c:	9c 4f       	sbci	r25, 0xFC	; 252
 a2e:	69 de       	rcall	.-814    	; 0x702 <mrf_read_long>
 a30:	89 93       	st	Y+, r24
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 a32:	f8 01       	movw	r30, r16
 a34:	80 81       	ld	r24, Z
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	0b 97       	sbiw	r24, 0x0b	; 11
 a3a:	c8 16       	cp	r12, r24
 a3c:	d9 06       	cpc	r13, r25
 a3e:	8c f3       	brlt	.-30     	; 0xa22 <mrf_interrupt_handler+0x86>
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
        }

        rx_info.frame_length = frame_length;
 a40:	a0 92 0f 01 	sts	0x010F, r10	; 0x80010f <rx_info>
        // same as datasheet 0x301 + (m + n + 2) <-- frame_length
        rx_info.lqi = mrf_read_long(0x301 + frame_length);
 a44:	c7 01       	movw	r24, r14
 a46:	8f 5f       	subi	r24, 0xFF	; 255
 a48:	9c 4f       	sbci	r25, 0xFC	; 252
 a4a:	5b de       	rcall	.-842    	; 0x702 <mrf_read_long>
 a4c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <rx_info+0x75>
        // same as datasheet 0x301 + (m + n + 3) <-- frame_length + 1
        rx_info.rssi = mrf_read_long(0x301 + frame_length + 1);
 a50:	c7 01       	movw	r24, r14
 a52:	8e 5f       	subi	r24, 0xFE	; 254
 a54:	9c 4f       	sbci	r25, 0xFC	; 252
 a56:	55 de       	rcall	.-854    	; 0x702 <mrf_read_long>
 a58:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <rx_info+0x76>

        mrf_rx_enable();
 a5c:	9b df       	rcall	.-202    	; 0x994 <mrf_rx_enable>
    //    sei();
    }
    if (last_interrupt & MRF_I_TXNIF) {
 a5e:	b0 fe       	sbrs	r11, 0
 a60:	1c c0       	rjmp	.+56     	; 0xa9a <mrf_interrupt_handler+0xfe>
        flag_got_tx++;
 a62:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <flag_got_tx>
 a66:	8f 5f       	subi	r24, 0xFF	; 255
 a68:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <flag_got_tx>
        mrf_reg_TXSTAT = mrf_read_short(MRF_TXSTAT);
 a6c:	84 e2       	ldi	r24, 0x24	; 36
 a6e:	38 de       	rcall	.-912    	; 0x6e0 <mrf_read_short>
 a70:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <mrf_reg_TXSTAT>
        // 1 means it failed, we want 1 to mean it worked.
        tx_info.tx_ok = !(mrf_reg_TXSTAT & 0x3F);
 a74:	98 2f       	mov	r25, r24
 a76:	9f 73       	andi	r25, 0x3F	; 63
 a78:	21 e0       	ldi	r18, 0x01	; 1
 a7a:	09 f0       	breq	.+2      	; 0xa7e <mrf_interrupt_handler+0xe2>
 a7c:	20 e0       	ldi	r18, 0x00	; 0
 a7e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <tx_info>
 a82:	20 fb       	bst	r18, 0
 a84:	90 f9       	bld	r25, 0
        tx_info.retries = mrf_reg_TXSTAT >> 6;
 a86:	82 95       	swap	r24
 a88:	86 95       	lsr	r24
 a8a:	86 95       	lsr	r24
 a8c:	83 70       	andi	r24, 0x03	; 3
 a8e:	88 0f       	add	r24, r24
 a90:	99 7f       	andi	r25, 0xF9	; 249
        tx_info.channel_busy = (mrf_reg_TXSTAT & (1 << CCAFAIL));
 a92:	89 2b       	or	r24, r25
 a94:	87 7f       	andi	r24, 0xF7	; 247
 a96:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tx_info>
    }
//DROP_ISR_MUTEX;
    isr_lock = 0;
 a9a:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <isr_lock>
}
 a9e:	df 91       	pop	r29
 aa0:	cf 91       	pop	r28
 aa2:	1f 91       	pop	r17
 aa4:	0f 91       	pop	r16
 aa6:	ff 90       	pop	r15
 aa8:	ef 90       	pop	r14
 aaa:	df 90       	pop	r13
 aac:	cf 90       	pop	r12
 aae:	bf 90       	pop	r11
 ab0:	af 90       	pop	r10
 ab2:	08 95       	ret

00000ab4 <mrf_get_rxdata>:
}

uint8_t* mrf_get_rxdata()
{
	return rx_info.rx_data;
}
 ab4:	80 e1       	ldi	r24, 0x10	; 16
 ab6:	91 e0       	ldi	r25, 0x01	; 1
 ab8:	08 95       	ret

00000aba <Pk_Set_Packet_Size>:
{
	memset(buff,0,PK_SZ_TXRX_BUFFER);
}
void Pk_Set_Packet_Size(uint8_t* buff, uint8_t sz)
{
	buff[PK_COMMAND_HEADER + PK_SZ_PACKET] = sz;
 aba:	fc 01       	movw	r30, r24
 abc:	67 83       	std	Z+7, r22	; 0x07
 abe:	08 95       	ret

00000ac0 <Pk_Set_Target_Node>:
}

void Pk_Set_Target_Node(uint8_t* buff, uint16_t target_node)
{
	word_to_bytes(&buff[PK_DEST_ADDR_HI],target_node);
 ac0:	d9 da       	rcall	.-2638   	; 0x74 <word_to_bytes>
 ac2:	08 95       	ret

00000ac4 <Pk_Set_Final_Node>:
}

void Pk_Set_Final_Node(uint8_t* buff, uint16_t target)
{
	word_to_bytes(&buff[PK_FINAL_ADDR_HI],target);
 ac4:	02 96       	adiw	r24, 0x02	; 2
 ac6:	d6 da       	rcall	.-2644   	; 0x74 <word_to_bytes>
 ac8:	08 95       	ret

00000aca <Pk_Set_Command>:
{
	buff[PK_COMMAND_HEADER+PK_DATA_DIRECTION] = direction;
}*/

void Pk_Set_Command(uint8_t* buff, uint16_t cmd_id, uint8_t cmd2, uint8_t cmd3, uint8_t cmd4, uint8_t cmd5)
{
 aca:	ef 92       	push	r14
 acc:	ff 92       	push	r15
 ace:	0f 93       	push	r16
 ad0:	1f 93       	push	r17
 ad2:	cf 93       	push	r28
 ad4:	df 93       	push	r29
 ad6:	ec 01       	movw	r28, r24
 ad8:	f4 2e       	mov	r15, r20
 ada:	12 2f       	mov	r17, r18
	word_to_bytes(&buff[PK_COMMAND_HEADER+PK_CMD_HI],cmd_id);
 adc:	08 96       	adiw	r24, 0x08	; 8
 ade:	ca da       	rcall	.-2668   	; 0x74 <word_to_bytes>
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_0] = cmd2;
 ae0:	fa 86       	std	Y+10, r15	; 0x0a
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_1] = cmd3;
 ae2:	1b 87       	std	Y+11, r17	; 0x0b
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_2] = cmd4;
 ae4:	0c 87       	std	Y+12, r16	; 0x0c
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_3] = cmd5;
 ae6:	ed 86       	std	Y+13, r14	; 0x0d
}
 ae8:	df 91       	pop	r29
 aea:	cf 91       	pop	r28
 aec:	1f 91       	pop	r17
 aee:	0f 91       	pop	r16
 af0:	ff 90       	pop	r15
 af2:	ef 90       	pop	r14
 af4:	08 95       	ret

00000af6 <Pk_Set_Src_Node>:

void Pk_Set_Src_Node(uint8_t* buff, uint16_t origin)
{
	//used for setting where this particular packet is coming from: the source of "data" would be held
	//later in the packet, in the data bytes.
	word_to_bytes(&buff[PK_SRC_ADDR_HI],origin);
 af6:	04 96       	adiw	r24, 0x04	; 4
 af8:	bd da       	rcall	.-2694   	; 0x74 <word_to_bytes>
 afa:	08 95       	ret

00000afc <Pk_Add_Data>:

void Pk_Add_Data(uint8_t* buff, uint16_t data, uint8_t data_location)
{   //adds data in two byte elements
	//TODO: Make this a pack_12_bits function due to ADC values being 12 bits
	//TODO: incorporate "hop count"?
	word_to_bytes(&buff[PK_COMMAND_HEADER+PK_DATA_START+data_location*3],data);
 afc:	24 2f       	mov	r18, r20
 afe:	30 e0       	ldi	r19, 0x00	; 0
 b00:	24 0f       	add	r18, r20
 b02:	31 1d       	adc	r19, r1
 b04:	24 0f       	add	r18, r20
 b06:	31 1d       	adc	r19, r1
 b08:	2c 5e       	subi	r18, 0xEC	; 236
 b0a:	3f 4f       	sbci	r19, 0xFF	; 255
 b0c:	82 0f       	add	r24, r18
 b0e:	93 1f       	adc	r25, r19
 b10:	b1 da       	rcall	.-2718   	; 0x74 <word_to_bytes>
 b12:	08 95       	ret

00000b14 <get_adc_value>:
uint8_t adc_buffer[3];



uint16_t get_adc_value(uint8_t chan) //change this function to have ADC_CS as a parameter(?)
{
 b14:	cf 93       	push	r28
 b16:	df 93       	push	r29

	adc_buffer[0] = 6 | (chan >>2);
 b18:	c7 e7       	ldi	r28, 0x77	; 119
 b1a:	d2 e0       	ldi	r29, 0x02	; 2
 b1c:	98 2f       	mov	r25, r24
 b1e:	96 95       	lsr	r25
 b20:	96 95       	lsr	r25
 b22:	96 60       	ori	r25, 0x06	; 6
 b24:	98 83       	st	Y, r25
	adc_buffer[1] = chan << 6;
 b26:	82 95       	swap	r24
 b28:	88 0f       	add	r24, r24
 b2a:	88 0f       	add	r24, r24
 b2c:	80 7c       	andi	r24, 0xC0	; 192
 b2e:	89 83       	std	Y+1, r24	; 0x01
	spi_transfer_nbytes(adc_buffer,adc_buffer,3,ADC_CS);
 b30:	27 e0       	ldi	r18, 0x07	; 7
 b32:	43 e0       	ldi	r20, 0x03	; 3
 b34:	be 01       	movw	r22, r28
 b36:	ce 01       	movw	r24, r28
 b38:	17 d0       	rcall	.+46     	; 0xb68 <spi_transfer_nbytes>
	uint16_t b1 = adc_buffer[1] & 0xF; //magic number sets first 4 bits to 0.
	uint16_t b2 = adc_buffer[2];
	
	return b2 | (b1<<8);
 b3a:	89 81       	ldd	r24, Y+1	; 0x01
 b3c:	8f 70       	andi	r24, 0x0F	; 15
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	98 2f       	mov	r25, r24
 b42:	88 27       	eor	r24, r24
 b44:	2a 81       	ldd	r18, Y+2	; 0x02
}
 b46:	82 2b       	or	r24, r18
 b48:	df 91       	pop	r29
 b4a:	cf 91       	pop	r28
 b4c:	08 95       	ret

00000b4e <spi_setup>:

void spi_setup()
{

	#ifndef SPI_ON_USI
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0); //enables SPI, sets chip as master, sets clock speed to fosc/16
 b4e:	81 e5       	ldi	r24, 0x51	; 81
 b50:	8c bd       	out	0x2c, r24	; 44
 b52:	08 95       	ret

00000b54 <spi_transfer_byte>:

/*Transfers a single byte between master and slave*/

void spi_transfer_byte(uint8_t* bout, uint8_t* bin)
{
	DATAREG = *bout;
 b54:	fc 01       	movw	r30, r24
 b56:	80 81       	ld	r24, Z
 b58:	8e bd       	out	0x2e, r24	; 46
	while(! SPI_BYTE_XFER_DONE)
 b5a:	0d b4       	in	r0, 0x2d	; 45
 b5c:	07 fe       	sbrs	r0, 7
 b5e:	fd cf       	rjmp	.-6      	; 0xb5a <spi_transfer_byte+0x6>
		USICR = usi_clk_lo;
		USICR = usi_clk_hi;
		#endif
	} 
	/*Incoming data out of data register*/
	*bin = DATAREG;
 b60:	8e b5       	in	r24, 0x2e	; 46
 b62:	fb 01       	movw	r30, r22
 b64:	80 83       	st	Z, r24
 b66:	08 95       	ret

00000b68 <spi_transfer_nbytes>:
}

/*Selects the slave (cs)  and transfers n bytes. The input and output buffers must be defined and contain at least n bytes each*/

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
 b68:	cf 92       	push	r12
 b6a:	df 92       	push	r13
 b6c:	ef 92       	push	r14
 b6e:	ff 92       	push	r15
 b70:	0f 93       	push	r16
 b72:	1f 93       	push	r17
 b74:	cf 93       	push	r28
 b76:	df 93       	push	r29
 b78:	ec 01       	movw	r28, r24
 b7a:	8b 01       	movw	r16, r22
	
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
 b7c:	85 b1       	in	r24, 0x05	; 5
 b7e:	61 e0       	ldi	r22, 0x01	; 1
 b80:	70 e0       	ldi	r23, 0x00	; 0
 b82:	6b 01       	movw	r12, r22
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <spi_transfer_nbytes+0x22>
 b86:	cc 0c       	add	r12, r12
 b88:	dd 1c       	adc	r13, r13
 b8a:	2a 95       	dec	r18
 b8c:	e2 f7       	brpl	.-8      	; 0xb86 <spi_transfer_nbytes+0x1e>
 b8e:	9c 2d       	mov	r25, r12
 b90:	90 95       	com	r25
 b92:	89 23       	and	r24, r25
 b94:	85 b9       	out	0x05, r24	; 5
	while(n)
 b96:	44 23       	and	r20, r20
 b98:	89 f0       	breq	.+34     	; 0xbbc <spi_transfer_nbytes+0x54>
 b9a:	41 50       	subi	r20, 0x01	; 1
 b9c:	e4 2e       	mov	r14, r20
 b9e:	f1 2c       	mov	r15, r1
 ba0:	8f ef       	ldi	r24, 0xFF	; 255
 ba2:	e8 1a       	sub	r14, r24
 ba4:	f8 0a       	sbc	r15, r24
 ba6:	ec 0e       	add	r14, r28
 ba8:	fd 1e       	adc	r15, r29
	{
		spi_transfer_byte(out,in);    /*transfer byte */
 baa:	b8 01       	movw	r22, r16
 bac:	ce 01       	movw	r24, r28
 bae:	d2 df       	rcall	.-92     	; 0xb54 <spi_transfer_byte>
		/*advance iterators*/
		out = out + 1;
 bb0:	21 96       	adiw	r28, 0x01	; 1
		in = in + 1;
 bb2:	0f 5f       	subi	r16, 0xFF	; 255
 bb4:	1f 4f       	sbci	r17, 0xFF	; 255

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
	
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
	while(n)
 bb6:	ec 16       	cp	r14, r28
 bb8:	fd 06       	cpc	r15, r29
 bba:	b9 f7       	brne	.-18     	; 0xbaa <spi_transfer_nbytes+0x42>
		/*advance iterators*/
		out = out + 1;
		in = in + 1;
		n = n - 1;
	}
	CS_PORT |= 1<<cs;/*Deselect slave chip*/
 bbc:	85 b1       	in	r24, 0x05	; 5
 bbe:	c8 2a       	or	r12, r24
 bc0:	c5 b8       	out	0x05, r12	; 5
}
 bc2:	df 91       	pop	r29
 bc4:	cf 91       	pop	r28
 bc6:	1f 91       	pop	r17
 bc8:	0f 91       	pop	r16
 bca:	ff 90       	pop	r15
 bcc:	ef 90       	pop	r14
 bce:	df 90       	pop	r13
 bd0:	cf 90       	pop	r12
 bd2:	08 95       	ret

00000bd4 <memcpy>:
 bd4:	fb 01       	movw	r30, r22
 bd6:	dc 01       	movw	r26, r24
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <memcpy+0xa>
 bda:	01 90       	ld	r0, Z+
 bdc:	0d 92       	st	X+, r0
 bde:	41 50       	subi	r20, 0x01	; 1
 be0:	50 40       	sbci	r21, 0x00	; 0
 be2:	d8 f7       	brcc	.-10     	; 0xbda <memcpy+0x6>
 be4:	08 95       	ret

00000be6 <_exit>:
 be6:	f8 94       	cli

00000be8 <__stop_program>:
 be8:	ff cf       	rjmp	.-2      	; 0xbe8 <__stop_program>
