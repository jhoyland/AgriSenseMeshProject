
Mesh-Beta6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000b0c  00000ba0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016b  0080010e  0080010e  00000bae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a52  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cee  00000000  00000000  000038d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000123f  00000000  00000000  000045c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000062c  00000000  00000000  00005804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b8  00000000  00000000  00005e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019d9  00000000  00000000  000067e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  000081c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	a1 c2       	rjmp	.+1346   	; 0x546 <__vector_1>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	ec e0       	ldi	r30, 0x0C	; 12
  3c:	fb e0       	ldi	r31, 0x0B	; 11
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	ae 30       	cpi	r26, 0x0E	; 14
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	22 e0       	ldi	r18, 0x02	; 2
  4c:	ae e0       	ldi	r26, 0x0E	; 14
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a9 37       	cpi	r26, 0x79	; 121
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	e1 d2       	rcall	.+1474   	; 0x61e <main>
  5c:	55 c5       	rjmp	.+2730   	; 0xb08 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <bytes_to_word>:
uint16_t bytes_to_word(uint8_t* b)
{
    uint16_t hi = (uint16_t) b[0];
    uint16_t lo = (uint16_t) b[1];

    return (hi << 8) | lo;
  60:	fc 01       	movw	r30, r24
  62:	20 81       	ld	r18, Z
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	32 2f       	mov	r19, r18
  68:	22 27       	eor	r18, r18
  6a:	81 81       	ldd	r24, Z+1	; 0x01
}
  6c:	a9 01       	movw	r20, r18
  6e:	48 2b       	or	r20, r24
  70:	ca 01       	movw	r24, r20
  72:	08 95       	ret

00000074 <word_to_bytes>:

void word_to_bytes(uint8_t* b, uint16_t d)
{
    b[0] = (uint8_t)(d >> 8);
  74:	fc 01       	movw	r30, r24
  76:	70 83       	st	Z, r23
    b[1] = (uint8_t)(255 & d);
  78:	61 83       	std	Z+1, r22	; 0x01
  7a:	08 95       	ret

0000007c <handle_tx>:
	{
		//send a message stating that the network has to be set up before you can ping??
	}
}
void echo_handler(uint8_t* message) //haven't decided what I want to do with this
{
  7c:	08 95       	ret

0000007e <set_downstairs_neighbor>:
	node_status = IDLE;
}

void set_downstairs_neighbor(uint8_t* message)
{
	downstairs_neighbor.id = bytes_to_word(&message[PK_SRC_ADDR_HI]);
  7e:	02 96       	adiw	r24, 0x02	; 2
  80:	ef df       	rcall	.-34     	; 0x60 <bytes_to_word>
  82:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <downstairs_neighbor+0x1>
  86:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <downstairs_neighbor>
	if(downstairs_neighbor.id == 0x0001) {BLINK(LIGHT_PORT,RED_LIGHT); BLINK(LIGHT_PORT,YELLOW_LIGHT); BLINK(LIGHT_PORT,GREEN_LIGHT);}
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	51 f5       	brne	.+84     	; 0xe2 <set_downstairs_neighbor+0x64>
  8e:	5d 9a       	sbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	8f e4       	ldi	r24, 0x4F	; 79
  92:	93 ec       	ldi	r25, 0xC3	; 195
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <set_downstairs_neighbor+0x16>
  98:	00 c0       	rjmp	.+0      	; 0x9a <set_downstairs_neighbor+0x1c>
  9a:	00 00       	nop
  9c:	5d 98       	cbi	0x0b, 5	; 11
  9e:	8f e4       	ldi	r24, 0x4F	; 79
  a0:	93 ec       	ldi	r25, 0xC3	; 195
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <set_downstairs_neighbor+0x24>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <set_downstairs_neighbor+0x2a>
  a8:	00 00       	nop
  aa:	5e 9a       	sbi	0x0b, 6	; 11
  ac:	8f e4       	ldi	r24, 0x4F	; 79
  ae:	93 ec       	ldi	r25, 0xC3	; 195
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <set_downstairs_neighbor+0x32>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <set_downstairs_neighbor+0x38>
  b6:	00 00       	nop
  b8:	5e 98       	cbi	0x0b, 6	; 11
  ba:	8f e4       	ldi	r24, 0x4F	; 79
  bc:	93 ec       	ldi	r25, 0xC3	; 195
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <set_downstairs_neighbor+0x40>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <set_downstairs_neighbor+0x46>
  c4:	00 00       	nop
  c6:	5f 9a       	sbi	0x0b, 7	; 11
  c8:	8f e4       	ldi	r24, 0x4F	; 79
  ca:	93 ec       	ldi	r25, 0xC3	; 195
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <set_downstairs_neighbor+0x4e>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <set_downstairs_neighbor+0x54>
  d2:	00 00       	nop
  d4:	5f 98       	cbi	0x0b, 7	; 11
  d6:	8f e4       	ldi	r24, 0x4F	; 79
  d8:	93 ec       	ldi	r25, 0xC3	; 195
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <set_downstairs_neighbor+0x5c>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <set_downstairs_neighbor+0x62>
  e0:	00 00       	nop
	if(downstairs_neighbor.id == pi_address)  {BLINK(LIGHT_PORT,RED_LIGHT); BLINK(LIGHT_PORT,YELLOW_LIGHT); BLINK(LIGHT_PORT,GREEN_LIGHT);}
  e2:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <downstairs_neighbor>
  e6:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <downstairs_neighbor+0x1>
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f2:	28 17       	cp	r18, r24
  f4:	39 07       	cpc	r19, r25
  f6:	51 f5       	brne	.+84     	; 0x14c <set_downstairs_neighbor+0xce>
  f8:	5d 9a       	sbi	0x0b, 5	; 11
  fa:	8f e4       	ldi	r24, 0x4F	; 79
  fc:	93 ec       	ldi	r25, 0xC3	; 195
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <set_downstairs_neighbor+0x80>
 102:	00 c0       	rjmp	.+0      	; 0x104 <set_downstairs_neighbor+0x86>
 104:	00 00       	nop
 106:	5d 98       	cbi	0x0b, 5	; 11
 108:	8f e4       	ldi	r24, 0x4F	; 79
 10a:	93 ec       	ldi	r25, 0xC3	; 195
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <set_downstairs_neighbor+0x8e>
 110:	00 c0       	rjmp	.+0      	; 0x112 <set_downstairs_neighbor+0x94>
 112:	00 00       	nop
 114:	5e 9a       	sbi	0x0b, 6	; 11
 116:	8f e4       	ldi	r24, 0x4F	; 79
 118:	93 ec       	ldi	r25, 0xC3	; 195
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <set_downstairs_neighbor+0x9c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <set_downstairs_neighbor+0xa2>
 120:	00 00       	nop
 122:	5e 98       	cbi	0x0b, 6	; 11
 124:	8f e4       	ldi	r24, 0x4F	; 79
 126:	93 ec       	ldi	r25, 0xC3	; 195
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <set_downstairs_neighbor+0xaa>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <set_downstairs_neighbor+0xb0>
 12e:	00 00       	nop
 130:	5f 9a       	sbi	0x0b, 7	; 11
 132:	8f e4       	ldi	r24, 0x4F	; 79
 134:	93 ec       	ldi	r25, 0xC3	; 195
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <set_downstairs_neighbor+0xb8>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <set_downstairs_neighbor+0xbe>
 13c:	00 00       	nop
 13e:	5f 98       	cbi	0x0b, 7	; 11
 140:	8f e4       	ldi	r24, 0x4F	; 79
 142:	93 ec       	ldi	r25, 0xC3	; 195
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <set_downstairs_neighbor+0xc6>
 148:	00 c0       	rjmp	.+0      	; 0x14a <set_downstairs_neighbor+0xcc>
 14a:	00 00       	nop
	++neighbor_count;
 14c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <neighbor_count>
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <neighbor_count>
 156:	08 95       	ret

00000158 <send_message>:
	//28/7/2020 not receiving a slough of these at the Pi. Why??
	send_message(bytes_to_word(&message[PK_SRC_ADDR_HI]), transmit_data_buffer); //return this to the requesterr
}

void send_message(uint16_t target, uint8_t* buff)
{
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	8c 01       	movw	r16, r24
 162:	eb 01       	movw	r28, r22
	//memset(buff,0,PK_SZ_TXRX_BUFFER);
	BLINK(LIGHT_PORT,YELLOW_LIGHT);
 164:	5e 9a       	sbi	0x0b, 6	; 11
 166:	8f e4       	ldi	r24, 0x4F	; 79
 168:	93 ec       	ldi	r25, 0xC3	; 195
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <send_message+0x12>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <send_message+0x18>
 170:	00 00       	nop
 172:	5e 98       	cbi	0x0b, 6	; 11
 174:	8f e4       	ldi	r24, 0x4F	; 79
 176:	93 ec       	ldi	r25, 0xC3	; 195
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <send_message+0x20>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <send_message+0x26>
 17e:	00 00       	nop
	Pk_Set_Packet_Size(buff,PK_SZ_TXRX_BUFFER); //this should be a function that finds the packet size maybe?
 180:	68 e2       	ldi	r22, 0x28	; 40
 182:	ce 01       	movw	r24, r28
 184:	54 d4       	rcall	.+2216   	; 0xa2e <Pk_Set_Packet_Size>
	Pk_Set_Target_Node(buff,target);
 186:	b8 01       	movw	r22, r16
 188:	ce 01       	movw	r24, r28
 18a:	54 d4       	rcall	.+2216   	; 0xa34 <Pk_Set_Target_Node>
	Pk_Set_Src_Node(buff,THIS_DEVICE);
 18c:	62 e0       	ldi	r22, 0x02	; 2
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	ce 01       	movw	r24, r28
 192:	68 d4       	rcall	.+2256   	; 0xa64 <Pk_Set_Src_Node>
	mrf_send16(target,buff,PK_SZ_TXRX_BUFFER);
 194:	48 e2       	ldi	r20, 0x28	; 40
 196:	be 01       	movw	r22, r28
 198:	c8 01       	movw	r24, r16
 19a:	de d2       	rcall	.+1468   	; 0x758 <mrf_send16>
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <ping_handler>:
	
}


void ping_handler(uint8_t* message) //this loop will only enter upon receiving the message CMD_PING
{ 
 1a6:	ef 92       	push	r14
 1a8:	0f 93       	push	r16
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
	if(Network_Set)
 1ae:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <Network_Set>
 1b2:	22 23       	and	r18, r18
 1b4:	81 f0       	breq	.+32     	; 0x1d6 <ping_handler+0x30>
	{
		//this is to determine if the chain is still present
		if(message[PK_COMMAND_HEADER+PK_CMD_DATA_0] == 0)
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 85       	ldd	r18, Z+8	; 0x08
 1ba:	21 11       	cpse	r18, r1
 1bc:	0c c0       	rjmp	.+24     	; 0x1d6 <ping_handler+0x30>
 1be:	ec 01       	movw	r28, r24
		{ //first "Accessory bit" is 0: This is just a boring ping									  
			Pk_Set_Command(message,CMD_ECHO,0,0,0,0); //respond with "echo" in the command location
 1c0:	e1 2c       	mov	r14, r1
 1c2:	00 e0       	ldi	r16, 0x00	; 0
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	63 e4       	ldi	r22, 0x43	; 67
 1c8:	75 e4       	ldi	r23, 0x45	; 69
 1ca:	36 d4       	rcall	.+2156   	; 0xa38 <Pk_Set_Command>
			send_message(bytes_to_word(&message[PK_SRC_ADDR_HI]),message); //send it back to the originator
 1cc:	ce 01       	movw	r24, r28
 1ce:	02 96       	adiw	r24, 0x02	; 2
 1d0:	47 df       	rcall	.-370    	; 0x60 <bytes_to_word>
 1d2:	be 01       	movw	r22, r28
 1d4:	c1 df       	rcall	.-126    	; 0x158 <send_message>
	}
	else
	{
		//send a message stating that the network has to be set up before you can ping??
	}
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	0f 91       	pop	r16
 1dc:	ef 90       	pop	r14
 1de:	08 95       	ret

000001e0 <continue_setup>:
	probe_neighbor_status(); //start by searching node 0x0001 -> must wait for a response
	wait_for_response(message);
}

void continue_setup(uint8_t target) //tells the next node to do the setup routine
{
 1e0:	ef 92       	push	r14
 1e2:	0f 93       	push	r16
 1e4:	cf 93       	push	r28
 1e6:	c8 2f       	mov	r28, r24
	Pk_Set_Command(transmit_data_buffer,CMD_SETUP,0,0,0,0);
 1e8:	e1 2c       	mov	r14, r1
 1ea:	00 e0       	ldi	r16, 0x00	; 0
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	65 e5       	ldi	r22, 0x55	; 85
 1f2:	75 e4       	ldi	r23, 0x45	; 69
 1f4:	85 e3       	ldi	r24, 0x35	; 53
 1f6:	92 e0       	ldi	r25, 0x02	; 2
 1f8:	1f d4       	rcall	.+2110   	; 0xa38 <Pk_Set_Command>
	send_message(target,transmit_data_buffer);
 1fa:	65 e3       	ldi	r22, 0x35	; 53
 1fc:	72 e0       	ldi	r23, 0x02	; 2
 1fe:	8c 2f       	mov	r24, r28
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	aa df       	rcall	.-172    	; 0x158 <send_message>
	node_status = IDLE;
 204:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <node_status>
}
 208:	cf 91       	pop	r28
 20a:	0f 91       	pop	r16
 20c:	ef 90       	pop	r14
 20e:	08 95       	ret

00000210 <send_directly_to_pi>:
	//depending on the sensors requested, add data	
}*/

void send_directly_to_pi(uint8_t* buff)
{
	send_message(pi_address,buff);
 210:	bc 01       	movw	r22, r24
 212:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 216:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 21a:	9e df       	rcall	.-196    	; 0x158 <send_message>
 21c:	08 95       	ret

0000021e <send_downstream>:
}
void send_downstream(uint8_t* buff)
{
 21e:	ef 92       	push	r14
 220:	0f 93       	push	r16
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ec 01       	movw	r28, r24
	if(Network_Set)
 228:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <Network_Set>
 22c:	88 23       	and	r24, r24
 22e:	69 f0       	breq	.+26     	; 0x24a <send_downstream+0x2c>
	{
		PORTD |= (1<<YELLOW_LIGHT);
 230:	5e 9a       	sbi	0x0b, 6	; 11
		//Pk_Set_Command(buff,CMD_TO_PI,0,0,0x99,0x99);
		Pk_Add_Data(transmit_data_buffer,0x7777);
 232:	67 e7       	ldi	r22, 0x77	; 119
 234:	77 e7       	ldi	r23, 0x77	; 119
 236:	85 e3       	ldi	r24, 0x35	; 53
 238:	92 e0       	ldi	r25, 0x02	; 2
 23a:	17 d4       	rcall	.+2094   	; 0xa6a <Pk_Add_Data>
		send_message(downstairs_neighbor.id,buff);
 23c:	be 01       	movw	r22, r28
 23e:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <downstairs_neighbor>
 242:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <downstairs_neighbor+0x1>
 246:	88 df       	rcall	.-240    	; 0x158 <send_message>
 248:	15 c0       	rjmp	.+42     	; 0x274 <send_downstream+0x56>
	}
	else
	{
		Pk_Set_Command(transmit_data_buffer,CMD_TO_PI,0,0,0,0);
 24a:	e1 2c       	mov	r14, r1
 24c:	00 e0       	ldi	r16, 0x00	; 0
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	6e ec       	ldi	r22, 0xCE	; 206
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	85 e3       	ldi	r24, 0x35	; 53
 258:	92 e0       	ldi	r25, 0x02	; 2
 25a:	ee d3       	rcall	.+2012   	; 0xa38 <Pk_Set_Command>
		Pk_Add_Data(transmit_data_buffer,0x8888);
 25c:	68 e8       	ldi	r22, 0x88	; 136
 25e:	78 e8       	ldi	r23, 0x88	; 136
 260:	85 e3       	ldi	r24, 0x35	; 53
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	02 d4       	rcall	.+2052   	; 0xa6a <Pk_Add_Data>
		PORTD |= (1<<GREEN_LIGHT);
 266:	5f 9a       	sbi	0x0b, 7	; 11
		send_message(pi_address,buff);
 268:	be 01       	movw	r22, r28
 26a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 26e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 272:	72 df       	rcall	.-284    	; 0x158 <send_message>
	}

}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	0f 91       	pop	r16
 27a:	ef 90       	pop	r14
 27c:	08 95       	ret

0000027e <confirm_network_complete>:

void confirm_network_complete()
{
 27e:	ef 92       	push	r14
 280:	0f 93       	push	r16
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
	Pk_Set_Command(transmit_data_buffer,CMD_NETWORK_COMPLETE,0,0,0,0);
 286:	e1 2c       	mov	r14, r1
 288:	00 e0       	ldi	r16, 0x00	; 0
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	65 e5       	ldi	r22, 0x55	; 85
 290:	75 e5       	ldi	r23, 0x55	; 85
 292:	85 e3       	ldi	r24, 0x35	; 53
 294:	92 e0       	ldi	r25, 0x02	; 2
 296:	d0 d3       	rcall	.+1952   	; 0xa38 <Pk_Set_Command>
	send_message(downstairs_neighbor.id,transmit_data_buffer);
 298:	ce e5       	ldi	r28, 0x5E	; 94
 29a:	d2 e0       	ldi	r29, 0x02	; 2
 29c:	65 e3       	ldi	r22, 0x35	; 53
 29e:	72 e0       	ldi	r23, 0x02	; 2
 2a0:	88 81       	ld	r24, Y
 2a2:	99 81       	ldd	r25, Y+1	; 0x01
 2a4:	59 df       	rcall	.-334    	; 0x158 <send_message>
	if(downstairs_neighbor.id == 0x0001) PORTD |= (1<<GREEN_LIGHT);	
 2a6:	88 81       	ld	r24, Y
 2a8:	99 81       	ldd	r25, Y+1	; 0x01
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <confirm_network_complete+0x32>
 2ae:	5f 9a       	sbi	0x0b, 7	; 11
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	0f 91       	pop	r16
 2b6:	ef 90       	pop	r14
 2b8:	08 95       	ret

000002ba <set_upstairs_neighbor>:
{
	//if the node has a downstairs neighbor, it needs an upstairs neighbor unless it is the last node
	//the node needs to ask the others in the field if they have a neighbor, and if not, choose that one as an upstairs neighbor
	//if a node received this request, and it has 1 neighbor, it should tell the requester to ask someone else
	//the number of neighbors will be loaded into PK_CMD_DATA_0
	if(message[PK_COMMAND_HEADER+PK_CMD_DATA_0] == 0) //this holds the number of neighbors the probed node has
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 85       	ldd	r18, Z+8	; 0x08
 2be:	21 11       	cpse	r18, r1
 2c0:	1e c0       	rjmp	.+60     	; 0x2fe <set_upstairs_neighbor+0x44>
	{
		upstairs_neighbor.id = bytes_to_word(&message[PK_SRC_ADDR_HI]);
 2c2:	02 96       	adiw	r24, 0x02	; 2
 2c4:	cd de       	rcall	.-614    	; 0x60 <bytes_to_word>
 2c6:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <upstairs_neighbor+0x1>
 2ca:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <upstairs_neighbor>
		++neighbor_count; //increase the amount of neighbors. Generally speaking, this should always result in 2.
 2ce:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <neighbor_count>
 2d2:	8f 5f       	subi	r24, 0xFF	; 255
 2d4:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <neighbor_count>
		PORTD &= ~(1<<GREEN_LIGHT);
 2d8:	5f 98       	cbi	0x0b, 7	; 11
		if(neighbor_count >= 2) Network_Set = true;
 2da:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <neighbor_count>
 2de:	82 30       	cpi	r24, 0x02	; 2
 2e0:	20 f0       	brcs	.+8      	; 0x2ea <set_upstairs_neighbor+0x30>
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <Network_Set>
 2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <set_upstairs_neighbor+0x36>
		if(Network_Set) PORTD |= (1<<RED_LIGHT);
 2ea:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <Network_Set>
 2ee:	81 11       	cpse	r24, r1
 2f0:	5d 9a       	sbi	0x0b, 5	; 11
		node_status = IDLE;
 2f2:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <node_status>
		//if(neighbor_count >2 ) PORTD|= (1<<YELLOW_LIGHT); //seeing if I'm over-counting neighbors
		continue_setup(upstairs_neighbor.id);
 2f6:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <upstairs_neighbor>
 2fa:	72 df       	rcall	.-284    	; 0x1e0 <continue_setup>
 2fc:	08 95       	ret
	}
	else 
	{	
		//PORTD |= (1<<GREEN_LIGHT);
		++target_index; //increment through the list
 2fe:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <target_index>
 302:	8f 5f       	subi	r24, 0xFF	; 255
 304:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <target_index>
		if(target_index > node_count) //we have exceeded the number of nodes available without finding a free node
 308:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <node_count>
 30c:	98 17       	cp	r25, r24
 30e:	90 f4       	brcc	.+36     	; 0x334 <__stack+0x35>
		{
			//this node is the last node, relay that info back to the pi
			upstairs_neighbor.id = 0x9999; //no upstairs neighbor
 310:	89 e9       	ldi	r24, 0x99	; 153
 312:	99 e9       	ldi	r25, 0x99	; 153
 314:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <upstairs_neighbor+0x1>
 318:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <upstairs_neighbor>
			node_status = IDLE;
 31c:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <node_status>
			Network_Set = true;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <Network_Set>
			if(Network_Set) PORTD |= (1<<RED_LIGHT);
 326:	5d 9a       	sbi	0x0b, 5	; 11
			Pk_Add_Data(transmit_data_buffer,0x9999); //look for this message
 328:	69 e9       	ldi	r22, 0x99	; 153
 32a:	79 e9       	ldi	r23, 0x99	; 153
 32c:	85 e3       	ldi	r24, 0x35	; 53
 32e:	92 e0       	ldi	r25, 0x02	; 2
 330:	9c d3       	rcall	.+1848   	; 0xa6a <Pk_Add_Data>
			confirm_network_complete(); //uses the source address	
 332:	a5 df       	rcall	.-182    	; 0x27e <confirm_network_complete>
 334:	08 95       	ret

00000336 <probe_neighbor_status>:
	Pk_Set_Command(transmit_data_buffer,CMD_NETWORK_COMPLETE,0,0,0,0);
	send_message(downstairs_neighbor.id,transmit_data_buffer);
	if(downstairs_neighbor.id == 0x0001) PORTD |= (1<<GREEN_LIGHT);	
}
void probe_neighbor_status(/*uint8_t * target_index*/) 
{
 336:	ef 92       	push	r14
 338:	0f 93       	push	r16
	//BLINK(LIGHT_PORT,RED_LIGHT);
	//clear_buffer(transmit_data_buffer);
	if(node_list[target_index] == THIS_DEVICE) ++target_index; //to avoid possibly sending a message to itself
 33a:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <target_index>
 33e:	e8 2f       	mov	r30, r24
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	ee 0f       	add	r30, r30
 344:	ff 1f       	adc	r31, r31
 346:	ed 5f       	subi	r30, 0xFD	; 253
 348:	fe 4f       	sbci	r31, 0xFE	; 254
 34a:	20 81       	ld	r18, Z
 34c:	31 81       	ldd	r19, Z+1	; 0x01
 34e:	22 30       	cpi	r18, 0x02	; 2
 350:	31 05       	cpc	r19, r1
 352:	19 f4       	brne	.+6      	; 0x35a <probe_neighbor_status+0x24>
 354:	8f 5f       	subi	r24, 0xFF	; 255
 356:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <target_index>
	Pk_Set_Command(transmit_data_buffer,CMD_PROBE_NEIGHBORS,0,0,0,0);
 35a:	e1 2c       	mov	r14, r1
 35c:	00 e0       	ldi	r16, 0x00	; 0
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	62 e4       	ldi	r22, 0x42	; 66
 364:	72 e4       	ldi	r23, 0x42	; 66
 366:	85 e3       	ldi	r24, 0x35	; 53
 368:	92 e0       	ldi	r25, 0x02	; 2
 36a:	66 d3       	rcall	.+1740   	; 0xa38 <Pk_Set_Command>
	//Pk_Add_Data(transmit_data_buffer,0x5555);
	send_directly_to_pi(transmit_data_buffer); //for troubleshooting: Is this causing a glitch?
 36c:	85 e3       	ldi	r24, 0x35	; 53
 36e:	92 e0       	ldi	r25, 0x02	; 2
 370:	4f df       	rcall	.-354    	; 0x210 <send_directly_to_pi>
	//28/7/2020 I am not receieving a slough of these at the Pi. Why??
	send_message(node_list[target_index],transmit_data_buffer);
 372:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <target_index>
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	ed 5f       	subi	r30, 0xFD	; 253
 37e:	fe 4f       	sbci	r31, 0xFE	; 254
 380:	65 e3       	ldi	r22, 0x35	; 53
 382:	72 e0       	ldi	r23, 0x02	; 2
 384:	80 81       	ld	r24, Z
 386:	91 81       	ldd	r25, Z+1	; 0x01
 388:	e7 de       	rcall	.-562    	; 0x158 <send_message>
}
 38a:	0f 91       	pop	r16
 38c:	ef 90       	pop	r14
 38e:	08 95       	ret

00000390 <wait_for_response>:
	}
}


void wait_for_response(uint8_t * message)
{
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
	//this function waits for a response with a timer. If the time has passed and a message has not been received, the next node is searched
	//this is needed because the first message a node receives upon a reboot is thrown out
	//also controls for possibly randomly dropped messages
	node_status = WAITING_FOR_RESPONSE; //change the node status
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <node_status>
	PORTD |= (1<<GREEN_LIGHT);
 39c:	5f 9a       	sbi	0x0b, 7	; 11
	uint8_t overflow_counter = 0;
	uint8_t repeat_counter = 0;
	PRR |= (0<<PRTWI); //write 1 to the PRTWI bit on PRR (power reduction register) to ensure clock is running: Should default to 0. This is just in case?
 39e:	e4 e6       	ldi	r30, 0x64	; 100
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	80 83       	st	Z, r24
	TCCR0A |= (1<<CTC0); //set CTC bit (clear timer compare)
 3a6:	85 b5       	in	r24, 0x25	; 37
 3a8:	88 60       	ori	r24, 0x08	; 8
 3aa:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1<<CS02) | (1<< CS00); //clock select 1024 prescaler
 3ac:	85 b5       	in	r24, 0x25	; 37
 3ae:	85 60       	ori	r24, 0x05	; 5
 3b0:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0; //set the 8 bit timer to 0
 3b2:	16 bc       	out	0x26, r1	; 38
	while(node_status == WAITING_FOR_RESPONSE)
	{
		//mrf_check_flags(&handle_rx,&handle_tx);		
		while((TIFR0 & 0x01) == 0) mrf_check_flags(&handle_rx,&handle_tx); //repeated action while the overflow hasn't occurred
		TCNT0 = 0; //write 0 to the counter on overflow
		TIFR0 = 0x01; //timer interrupt flag register cleared by writing 1. (this is super important, by the way)
 3b4:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t repeat_counter = 0;
	PRR |= (0<<PRTWI); //write 1 to the PRTWI bit on PRR (power reduction register) to ensure clock is running: Should default to 0. This is just in case?
	TCCR0A |= (1<<CTC0); //set CTC bit (clear timer compare)
	TCCR0A |= (1<<CS02) | (1<< CS00); //clock select 1024 prescaler
	TCNT0 = 0; //set the 8 bit timer to 0
	while(node_status == WAITING_FOR_RESPONSE)
 3b6:	25 c0       	rjmp	.+74     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		//mrf_check_flags(&handle_rx,&handle_tx);		
		while((TIFR0 & 0x01) == 0) mrf_check_flags(&handle_rx,&handle_tx); //repeated action while the overflow hasn't occurred
 3b8:	6e e3       	ldi	r22, 0x3E	; 62
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	8b e7       	ldi	r24, 0x7B	; 123
 3be:	92 e0       	ldi	r25, 0x02	; 2
 3c0:	80 d2       	rcall	.+1280   	; 0x8c2 <mrf_check_flags>
 3c2:	a8 9b       	sbis	0x15, 0	; 21
 3c4:	f9 cf       	rjmp	.-14     	; 0x3b8 <wait_for_response+0x28>
		TCNT0 = 0; //write 0 to the counter on overflow
 3c6:	16 bc       	out	0x26, r1	; 38
		TIFR0 = 0x01; //timer interrupt flag register cleared by writing 1. (this is super important, by the way)
 3c8:	d5 bb       	out	0x15, r29	; 21
 3ca:	c1 50       	subi	r28, 0x01	; 1
		++overflow_counter; //increment overflow counter
		//So what happens now? If I get a message that I'm waiting for (the command) this function needs to exit.
		//if I get something else, or nothing at all, the function needs to continue
		if(overflow_counter >= 10 ) //by calculator 39 ~= 10 seconds
 3cc:	e1 f4       	brne	.+56     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			{
				send_directly_to_pi(transmit_data_buffer); //is this function executing?
 3ce:	85 e3       	ldi	r24, 0x35	; 53
 3d0:	92 e0       	ldi	r25, 0x02	; 2
 3d2:	1e df       	rcall	.-452    	; 0x210 <send_directly_to_pi>
				probe_neighbor_status();
 3d4:	b0 df       	rcall	.-160    	; 0x336 <probe_neighbor_status>
 3d6:	11 50       	subi	r17, 0x01	; 1
				++repeat_counter;
				overflow_counter = 0;
				if(repeat_counter >= 2)
 3d8:	a9 f4       	brne	.+42     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
					{
						BLINK(LIGHT_PORT,RED_LIGHT);
 3da:	5d 9a       	sbi	0x0b, 5	; 11
 3dc:	8f e4       	ldi	r24, 0x4F	; 79
 3de:	93 ec       	ldi	r25, 0xC3	; 195
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <wait_for_response+0x50>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <wait_for_response+0x56>
 3e6:	00 00       	nop
 3e8:	5d 98       	cbi	0x0b, 5	; 11
 3ea:	8f e4       	ldi	r24, 0x4F	; 79
 3ec:	93 ec       	ldi	r25, 0xC3	; 195
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <wait_for_response+0x5e>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <wait_for_response+0x64>
 3f4:	00 00       	nop
						++target_index;
 3f6:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <target_index>
 3fa:	8f 5f       	subi	r24, 0xFF	; 255
 3fc:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <target_index>
						//send_message(node_list[target_index],transmit_data_buffer);
						probe_neighbor_status();
 400:	9a df       	rcall	.-204    	; 0x336 <probe_neighbor_status>
	}
}


void wait_for_response(uint8_t * message)
{
 402:	12 e0       	ldi	r17, 0x02	; 2
 404:	ca e0       	ldi	r28, 0x0A	; 10
	uint8_t repeat_counter = 0;
	PRR |= (0<<PRTWI); //write 1 to the PRTWI bit on PRR (power reduction register) to ensure clock is running: Should default to 0. This is just in case?
	TCCR0A |= (1<<CTC0); //set CTC bit (clear timer compare)
	TCCR0A |= (1<<CS02) | (1<< CS00); //clock select 1024 prescaler
	TCNT0 = 0; //set the 8 bit timer to 0
	while(node_status == WAITING_FOR_RESPONSE)
 406:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <node_status>
 40a:	82 30       	cpi	r24, 0x02	; 2
 40c:	19 f4       	brne	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	{
		//mrf_check_flags(&handle_rx,&handle_tx);		
		while((TIFR0 & 0x01) == 0) mrf_check_flags(&handle_rx,&handle_tx); //repeated action while the overflow hasn't occurred
 40e:	a8 9b       	sbis	0x15, 0	; 21
 410:	d3 cf       	rjmp	.-90     	; 0x3b8 <wait_for_response+0x28>
 412:	d9 cf       	rjmp	.-78     	; 0x3c6 <wait_for_response+0x36>
					}
				}
		}
	

}
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	08 95       	ret

0000041c <setup_network>:
{
	
} 

void setup_network(uint8_t* message)
{	
 41c:	ef 92       	push	r14
 41e:	0f 93       	push	r16
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	ec 01       	movw	r28, r24
	//this function should only enter once, when the node is told to setup the network initially
	//TODO: Have a case where the network is already setup
	node_status = SETTING_UP; //flag for set up routine
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <node_status>
	Pk_Set_Command(transmit_data_buffer,0,node_status,0,0,0);
 42c:	e1 2c       	mov	r14, r1
 42e:	00 e0       	ldi	r16, 0x00	; 0
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	85 e3       	ldi	r24, 0x35	; 53
 43a:	92 e0       	ldi	r25, 0x02	; 2
 43c:	fd d2       	rcall	.+1530   	; 0xa38 <Pk_Set_Command>
	send_directly_to_pi(transmit_data_buffer);
 43e:	85 e3       	ldi	r24, 0x35	; 53
 440:	92 e0       	ldi	r25, 0x02	; 2
 442:	e6 de       	rcall	.-564    	; 0x210 <send_directly_to_pi>
	neighbor_count = 0; //default it to 0 -> when routine is entered
 444:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <neighbor_count>
	set_downstairs_neighbor(message); //set the downstairs node for this (node that messages will be relayed to) as the person who requested this
 448:	ce 01       	movw	r24, r28
 44a:	19 de       	rcall	.-974    	; 0x7e <set_downstairs_neighbor>
	probe_neighbor_status(); //start by searching node 0x0001 -> must wait for a response
 44c:	74 df       	rcall	.-280    	; 0x336 <probe_neighbor_status>
	wait_for_response(message);
 44e:	ce 01       	movw	r24, r28
 450:	9f df       	rcall	.-194    	; 0x390 <wait_for_response>
}
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	0f 91       	pop	r16
 458:	ef 90       	pop	r14
 45a:	08 95       	ret

0000045c <confirm_neighbor>:
	send_directly_to_pi(transmit_data_buffer); //for troubleshooting: Is this causing a glitch?
	//28/7/2020 I am not receieving a slough of these at the Pi. Why??
	send_message(node_list[target_index],transmit_data_buffer);
}
void confirm_neighbor(uint8_t* message) //responds to a request for the number of neighbors
{
 45c:	ef 92       	push	r14
 45e:	0f 93       	push	r16
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	ec 01       	movw	r28, r24
	//memset(transmit_data_buffer,0,PK_SZ_TXRX_BUFFER); //maybe not needed
	Pk_Set_Command(transmit_data_buffer,CMD_NEIGHBOR_COUNT,neighbor_count,0,0,0);
 466:	e1 2c       	mov	r14, r1
 468:	00 e0       	ldi	r16, 0x00	; 0
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <neighbor_count>
 470:	64 e4       	ldi	r22, 0x44	; 68
 472:	74 e4       	ldi	r23, 0x44	; 68
 474:	85 e3       	ldi	r24, 0x35	; 53
 476:	92 e0       	ldi	r25, 0x02	; 2
 478:	df d2       	rcall	.+1470   	; 0xa38 <Pk_Set_Command>
	send_directly_to_pi(transmit_data_buffer); //for troubleshooting
 47a:	85 e3       	ldi	r24, 0x35	; 53
 47c:	92 e0       	ldi	r25, 0x02	; 2
 47e:	c8 de       	rcall	.-624    	; 0x210 <send_directly_to_pi>
	//28/7/2020 not receiving a slough of these at the Pi. Why??
	send_message(bytes_to_word(&message[PK_SRC_ADDR_HI]), transmit_data_buffer); //return this to the requesterr
 480:	ce 01       	movw	r24, r28
 482:	02 96       	adiw	r24, 0x02	; 2
 484:	ed dd       	rcall	.-1062   	; 0x60 <bytes_to_word>
 486:	65 e3       	ldi	r22, 0x35	; 53
 488:	72 e0       	ldi	r23, 0x02	; 2
 48a:	66 de       	rcall	.-820    	; 0x158 <send_message>
}
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	0f 91       	pop	r16
 492:	ef 90       	pop	r14
 494:	08 95       	ret

00000496 <COMMAND_HANDLER>:
	//PORTD |= (1<<RED_LIGHT);
}


void COMMAND_HANDLER(uint8_t* message) //Looks at the command bits and decides what to do with the given command
{	
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	ec 01       	movw	r28, r24
	switch(bytes_to_word(&message[PK_COMMAND_HEADER+PK_CMD_HI])) //look at the command given to the node
 49c:	06 96       	adiw	r24, 0x06	; 6
 49e:	e0 dd       	rcall	.-1088   	; 0x60 <bytes_to_word>
 4a0:	84 34       	cpi	r24, 0x44	; 68
 4a2:	24 e4       	ldi	r18, 0x44	; 68
 4a4:	92 07       	cpc	r25, r18
 4a6:	e1 f0       	breq	.+56     	; 0x4e0 <COMMAND_HANDLER+0x4a>
 4a8:	38 f4       	brcc	.+14     	; 0x4b8 <COMMAND_HANDLER+0x22>
 4aa:	8e 3c       	cpi	r24, 0xCE	; 206
 4ac:	91 05       	cpc	r25, r1
 4ae:	f1 f0       	breq	.+60     	; 0x4ec <COMMAND_HANDLER+0x56>
 4b0:	82 34       	cpi	r24, 0x42	; 66
 4b2:	92 44       	sbci	r25, 0x42	; 66
 4b4:	91 f0       	breq	.+36     	; 0x4da <COMMAND_HANDLER+0x44>
 4b6:	1c c0       	rjmp	.+56     	; 0x4f0 <COMMAND_HANDLER+0x5a>
 4b8:	85 35       	cpi	r24, 0x55	; 85
 4ba:	25 e4       	ldi	r18, 0x45	; 69
 4bc:	92 07       	cpc	r25, r18
 4be:	51 f0       	breq	.+20     	; 0x4d4 <COMMAND_HANDLER+0x3e>
 4c0:	85 35       	cpi	r24, 0x55	; 85
 4c2:	25 e5       	ldi	r18, 0x55	; 85
 4c4:	92 07       	cpc	r25, r18
 4c6:	79 f0       	breq	.+30     	; 0x4e6 <COMMAND_HANDLER+0x50>
 4c8:	82 35       	cpi	r24, 0x52	; 82
 4ca:	95 44       	sbci	r25, 0x45	; 69
 4cc:	89 f4       	brne	.+34     	; 0x4f0 <COMMAND_HANDLER+0x5a>
	{
		case CMD_PING: //node is being pinged
		ping_handler(message);
 4ce:	ce 01       	movw	r24, r28
 4d0:	6a de       	rcall	.-812    	; 0x1a6 <ping_handler>
		break;
 4d2:	0e c0       	rjmp	.+28     	; 0x4f0 <COMMAND_HANDLER+0x5a>
		break;
		case CMD_DATA:
		//collect_data(message); //collect data from the required sensors TODO: Implement ADC collection
		break;
		case CMD_SETUP:
		setup_network(message);//node is now in network setup mode
 4d4:	ce 01       	movw	r24, r28
 4d6:	a2 df       	rcall	.-188    	; 0x41c <setup_network>
		break;
 4d8:	0b c0       	rjmp	.+22     	; 0x4f0 <COMMAND_HANDLER+0x5a>
		case CMD_PROBE_NEIGHBORS: //node has received a request to return the number (and ID?) of its neighbors
		confirm_neighbor(message);
 4da:	ce 01       	movw	r24, r28
 4dc:	bf df       	rcall	.-130    	; 0x45c <confirm_neighbor>
		break;
 4de:	08 c0       	rjmp	.+16     	; 0x4f0 <COMMAND_HANDLER+0x5a>
		case CMD_NEIGHBOR_COUNT: //has received a response containing the number of neighbors (during a setup routine)
		set_upstairs_neighbor(message);
 4e0:	ce 01       	movw	r24, r28
 4e2:	eb de       	rcall	.-554    	; 0x2ba <set_upstairs_neighbor>
		break;
 4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <COMMAND_HANDLER+0x5a>
		case CMD_NETWORK_COMPLETE:
		send_downstream(message);//relay the message down that the network is complete. Should go all the way to the pi.
 4e6:	ce 01       	movw	r24, r28
 4e8:	9a de       	rcall	.-716    	; 0x21e <send_downstream>
		break;
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <COMMAND_HANDLER+0x5a>
		case CMD_TO_PI:
		send_directly_to_pi(message);
 4ec:	ce 01       	movw	r24, r28
 4ee:	90 de       	rcall	.-736    	; 0x210 <send_directly_to_pi>
		default:
		//command not recognized
		break;	
	}
	
}
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

000004f6 <handle_rx>:
struct neighbor upstairs_neighbor; //up towards the end of the line



void handle_rx()
{
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
	running_status |= (1<<RU_RX_HANDLE);  //MUTEX
 4fa:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 4fe:	88 60       	ori	r24, 0x08	; 8
 500:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	memcpy(recieved_data_buffer,mrf_get_rxdata(),mrf_rx_datalength()); //makes a copy of the rx data to a buffer
 504:	f8 d1       	rcall	.+1008   	; 0x8f6 <mrf_rx_datalength>
 506:	ec 01       	movw	r28, r24
 508:	8f d2       	rcall	.+1310   	; 0xa28 <mrf_get_rxdata>
 50a:	ae 01       	movw	r20, r28
 50c:	bc 01       	movw	r22, r24
 50e:	8d e0       	ldi	r24, 0x0D	; 13
 510:	92 e0       	ldi	r25, 0x02	; 2
 512:	f1 d2       	rcall	.+1506   	; 0xaf6 <memcpy>
	BLINK(LIGHT_PORT,GREEN_LIGHT);
 514:	5f 9a       	sbi	0x0b, 7	; 11
 516:	8f e4       	ldi	r24, 0x4F	; 79
 518:	93 ec       	ldi	r25, 0xC3	; 195
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <handle_rx+0x24>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <handle_rx+0x2a>
 520:	00 00       	nop
 522:	5f 98       	cbi	0x0b, 7	; 11
 524:	8f e4       	ldi	r24, 0x4F	; 79
 526:	93 ec       	ldi	r25, 0xC3	; 195
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <handle_rx+0x32>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <handle_rx+0x38>
 52e:	00 00       	nop
	COMMAND_HANDLER(recieved_data_buffer); //puts the received data buffer into the command handler
 530:	8d e0       	ldi	r24, 0x0D	; 13
 532:	92 e0       	ldi	r25, 0x02	; 2
 534:	b0 df       	rcall	.-160    	; 0x496 <COMMAND_HANDLER>
	running_status &= ~(1<<RU_RX_HANDLE);
 536:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 53a:	87 7f       	andi	r24, 0xF7	; 247
 53c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	
}
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <__vector_1>:
	Pk_Set_Src_Node(buff,THIS_DEVICE);
	mrf_send16(target,buff,PK_SZ_TXRX_BUFFER);
}

ISR(INT0_vect) //for when the MRF interrupts (sending or receiving a message)
{
 546:	1f 92       	push	r1
 548:	0f 92       	push	r0
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	0f 92       	push	r0
 54e:	11 24       	eor	r1, r1
 550:	2f 93       	push	r18
 552:	3f 93       	push	r19
 554:	4f 93       	push	r20
 556:	5f 93       	push	r21
 558:	6f 93       	push	r22
 55a:	7f 93       	push	r23
 55c:	8f 93       	push	r24
 55e:	9f 93       	push	r25
 560:	af 93       	push	r26
 562:	bf 93       	push	r27
 564:	ef 93       	push	r30
 566:	ff 93       	push	r31
	running_status |= (1<<RU_INTERRUPT);
 568:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 56c:	80 61       	ori	r24, 0x10	; 16
 56e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	mrf_interrupt_handler();
 572:	ce d1       	rcall	.+924    	; 0x910 <mrf_interrupt_handler>
	running_status &= ~(1<<RU_INTERRUPT);
 574:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 578:	8f 7e       	andi	r24, 0xEF	; 239
 57a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
}
 57e:	ff 91       	pop	r31
 580:	ef 91       	pop	r30
 582:	bf 91       	pop	r27
 584:	af 91       	pop	r26
 586:	9f 91       	pop	r25
 588:	8f 91       	pop	r24
 58a:	7f 91       	pop	r23
 58c:	6f 91       	pop	r22
 58e:	5f 91       	pop	r21
 590:	4f 91       	pop	r20
 592:	3f 91       	pop	r19
 594:	2f 91       	pop	r18
 596:	0f 90       	pop	r0
 598:	0f be       	out	0x3f, r0	; 63
 59a:	0f 90       	pop	r0
 59c:	1f 90       	pop	r1
 59e:	18 95       	reti

000005a0 <setup>:


void setup()
{
	//LED setup
	DDRD |= (1 << RED_LIGHT); //set PD7 to output for LED
 5a0:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << YELLOW_LIGHT);
 5a2:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << GREEN_LIGHT);
 5a4:	57 9a       	sbi	0x0a, 7	; 10
	
	//SPI port setup
	PORTB |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<ADC_CS) | (1<<SPI_SS) | (1<<MRF_CS) ; //set these ports to high (required)
 5a6:	85 b1       	in	r24, 0x05	; 5
 5a8:	8c 6e       	ori	r24, 0xEC	; 236
 5aa:	85 b9       	out	0x05, r24	; 5
	DDRB |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<ADC_CS) | (1<<SPI_SS) | (1<<MRF_CS) ;  //set these to output
 5ac:	84 b1       	in	r24, 0x04	; 4
 5ae:	8c 6e       	ori	r24, 0xEC	; 236
 5b0:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<SPI_MISO);	//master in slave out, input on attiny
 5b2:	24 98       	cbi	0x04, 4	; 4
	
	spi_setup();
 5b4:	5d d2       	rcall	.+1210   	; 0xa70 <spi_setup>
	mrf_reset();
 5b6:	3f d0       	rcall	.+126    	; 0x636 <mrf_reset>
	mrf_init();
 5b8:	40 d1       	rcall	.+640    	; 0x83a <mrf_init>
	
	mrf_set_pan(ASMP_PANID); //set PANID
 5ba:	8e ef       	ldi	r24, 0xFE	; 254
 5bc:	9a ec       	ldi	r25, 0xCA	; 202
 5be:	a9 d0       	rcall	.+338    	; 0x712 <mrf_set_pan>
	mrf_address16_write(THIS_DEVICE); //set device address -> 16 bit addressing
 5c0:	82 e0       	ldi	r24, 0x02	; 2
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	b0 d0       	rcall	.+352    	; 0x726 <mrf_address16_write>
	sei(); //starts interrupts, essential to let chip know message is being handled
 5c6:	78 94       	sei
	EIMSK |= (1<<INT0);
 5c8:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC01);
 5ca:	e9 e6       	ldi	r30, 0x69	; 105
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	82 60       	ori	r24, 0x02	; 2
 5d2:	80 83       	st	Z, r24
	
	memset(transmit_data_buffer,0,PK_SZ_TXRX_BUFFER); //clear buffer to 0 on reset, possibly not needed
 5d4:	88 e2       	ldi	r24, 0x28	; 40
 5d6:	e5 e3       	ldi	r30, 0x35	; 53
 5d8:	f2 e0       	ldi	r31, 0x02	; 2
 5da:	df 01       	movw	r26, r30
 5dc:	98 2f       	mov	r25, r24
 5de:	1d 92       	st	X+, r1
 5e0:	9a 95       	dec	r25
 5e2:	e9 f7       	brne	.-6      	; 0x5de <setup+0x3e>
	memset(recieved_data_buffer,0,PK_SZ_TXRX_BUFFER); //clear buffer to 0 on reset
 5e4:	ed e0       	ldi	r30, 0x0D	; 13
 5e6:	f2 e0       	ldi	r31, 0x02	; 2
 5e8:	df 01       	movw	r26, r30
 5ea:	1d 92       	st	X+, r1
 5ec:	8a 95       	dec	r24
 5ee:	e9 f7       	brne	.-6      	; 0x5ea <setup+0x4a>
	
	Network_Set = false; //default to network setup: No down or up neighbor
 5f0:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <Network_Set>
	node_status = IDLE; //default to idle
 5f4:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <node_status>
	neighbor_count = 0; //setup resets these values to 0
 5f8:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <neighbor_count>
	target_index = 0;
 5fc:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <target_index>
	
	BLINK(LIGHT_PORT,GREEN_LIGHT);
 600:	5f 9a       	sbi	0x0b, 7	; 11
 602:	8f e4       	ldi	r24, 0x4F	; 79
 604:	93 ec       	ldi	r25, 0xC3	; 195
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <setup+0x66>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <setup+0x6c>
 60c:	00 00       	nop
 60e:	5f 98       	cbi	0x0b, 7	; 11
 610:	af e4       	ldi	r26, 0x4F	; 79
 612:	b3 ec       	ldi	r27, 0xC3	; 195
 614:	11 97       	sbiw	r26, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <setup+0x74>
 618:	00 c0       	rjmp	.+0      	; 0x61a <setup+0x7a>
 61a:	00 00       	nop
 61c:	08 95       	ret

0000061e <main>:
}


int main(void)
{
    setup();
 61e:	c0 df       	rcall	.-128    	; 0x5a0 <setup>
 620:	05 c0       	rjmp	.+10     	; 0x62c <main+0xe>
    while (1) 
    {
		while(node_status == IDLE) mrf_check_flags(&handle_rx, &handle_tx); //check for interrupts
 622:	6e e3       	ldi	r22, 0x3E	; 62
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	8b e7       	ldi	r24, 0x7B	; 123
 628:	92 e0       	ldi	r25, 0x02	; 2
 62a:	4b d1       	rcall	.+662    	; 0x8c2 <mrf_check_flags>
 62c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <node_status>
 630:	88 23       	and	r24, r24
 632:	b9 f3       	breq	.-18     	; 0x622 <main+0x4>
 634:	fd cf       	rjmp	.-6      	; 0x630 <main+0x12>

00000636 <mrf_reset>:
        mrf_write_long(MRF_TESTMODE, 0x00); // Disable PA/LNA on MRF24J40MB module.
    }
}

void mrf_rx_flush(void) {
    mrf_write_short(MRF_RXFLUSH, 0x01);
 636:	59 98       	cbi	0x0b, 1	; 11
 638:	87 ea       	ldi	r24, 0xA7	; 167
 63a:	91 e6       	ldi	r25, 0x61	; 97
 63c:	01 97       	sbiw	r24, 0x01	; 1
 63e:	f1 f7       	brne	.-4      	; 0x63c <mrf_reset+0x6>
 640:	00 c0       	rjmp	.+0      	; 0x642 <mrf_reset+0xc>
 642:	00 00       	nop
 644:	59 9a       	sbi	0x0b, 1	; 11
 646:	83 e2       	ldi	r24, 0x23	; 35
 648:	94 ef       	ldi	r25, 0xF4	; 244
 64a:	01 97       	sbiw	r24, 0x01	; 1
 64c:	f1 f7       	brne	.-4      	; 0x64a <mrf_reset+0x14>
 64e:	00 c0       	rjmp	.+0      	; 0x650 <mrf_reset+0x1a>
 650:	00 00       	nop
 652:	08 95       	ret

00000654 <mrf_read_short>:
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
 658:	cf e0       	ldi	r28, 0x0F	; 15
 65a:	d1 e0       	ldi	r29, 0x01	; 1
 65c:	88 0f       	add	r24, r24
 65e:	8e 77       	andi	r24, 0x7E	; 126
 660:	88 83       	st	Y, r24
 662:	19 82       	std	Y+1, r1	; 0x01
 664:	26 e0       	ldi	r18, 0x06	; 6
 666:	42 e0       	ldi	r20, 0x02	; 2
 668:	be 01       	movw	r22, r28
 66a:	ce 01       	movw	r24, r28
 66c:	0e d2       	rcall	.+1052   	; 0xa8a <spi_transfer_nbytes>
 66e:	89 81       	ldd	r24, Y+1	; 0x01
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	08 95       	ret

00000676 <mrf_read_long>:
 676:	cf 93       	push	r28
 678:	df 93       	push	r29
 67a:	cf e0       	ldi	r28, 0x0F	; 15
 67c:	d1 e0       	ldi	r29, 0x01	; 1
 67e:	9c 01       	movw	r18, r24
 680:	36 95       	lsr	r19
 682:	27 95       	ror	r18
 684:	36 95       	lsr	r19
 686:	27 95       	ror	r18
 688:	36 95       	lsr	r19
 68a:	27 95       	ror	r18
 68c:	20 68       	ori	r18, 0x80	; 128
 68e:	28 83       	st	Y, r18
 690:	82 95       	swap	r24
 692:	88 0f       	add	r24, r24
 694:	80 7e       	andi	r24, 0xE0	; 224
 696:	89 83       	std	Y+1, r24	; 0x01
 698:	1a 82       	std	Y+2, r1	; 0x02
 69a:	26 e0       	ldi	r18, 0x06	; 6
 69c:	43 e0       	ldi	r20, 0x03	; 3
 69e:	be 01       	movw	r22, r28
 6a0:	ce 01       	movw	r24, r28
 6a2:	f3 d1       	rcall	.+998    	; 0xa8a <spi_transfer_nbytes>
 6a4:	8a 81       	ldd	r24, Y+2	; 0x02
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	08 95       	ret

000006ac <mrf_write_short>:
 6ac:	ef e0       	ldi	r30, 0x0F	; 15
 6ae:	f1 e0       	ldi	r31, 0x01	; 1
 6b0:	88 0f       	add	r24, r24
 6b2:	8e 77       	andi	r24, 0x7E	; 126
 6b4:	81 60       	ori	r24, 0x01	; 1
 6b6:	80 83       	st	Z, r24
 6b8:	61 83       	std	Z+1, r22	; 0x01
 6ba:	26 e0       	ldi	r18, 0x06	; 6
 6bc:	42 e0       	ldi	r20, 0x02	; 2
 6be:	bf 01       	movw	r22, r30
 6c0:	cf 01       	movw	r24, r30
 6c2:	e3 d1       	rcall	.+966    	; 0xa8a <spi_transfer_nbytes>
 6c4:	08 95       	ret

000006c6 <mrf_write_long>:
 6c6:	ef e0       	ldi	r30, 0x0F	; 15
 6c8:	f1 e0       	ldi	r31, 0x01	; 1
 6ca:	9c 01       	movw	r18, r24
 6cc:	36 95       	lsr	r19
 6ce:	27 95       	ror	r18
 6d0:	36 95       	lsr	r19
 6d2:	27 95       	ror	r18
 6d4:	36 95       	lsr	r19
 6d6:	27 95       	ror	r18
 6d8:	20 68       	ori	r18, 0x80	; 128
 6da:	20 83       	st	Z, r18
 6dc:	82 95       	swap	r24
 6de:	88 0f       	add	r24, r24
 6e0:	80 7e       	andi	r24, 0xE0	; 224
 6e2:	80 61       	ori	r24, 0x10	; 16
 6e4:	81 83       	std	Z+1, r24	; 0x01
 6e6:	62 83       	std	Z+2, r22	; 0x02
 6e8:	26 e0       	ldi	r18, 0x06	; 6
 6ea:	43 e0       	ldi	r20, 0x03	; 3
 6ec:	bf 01       	movw	r22, r30
 6ee:	cf 01       	movw	r24, r30
 6f0:	cc d1       	rcall	.+920    	; 0xa8a <spi_transfer_nbytes>
 6f2:	08 95       	ret

000006f4 <mrf_get_pan>:
 6f4:	cf 93       	push	r28
 6f6:	82 e0       	ldi	r24, 0x02	; 2
 6f8:	ad df       	rcall	.-166    	; 0x654 <mrf_read_short>
 6fa:	c8 2f       	mov	r28, r24
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	aa df       	rcall	.-172    	; 0x654 <mrf_read_short>
 700:	2c 2f       	mov	r18, r28
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	32 2f       	mov	r19, r18
 706:	22 27       	eor	r18, r18
 708:	a9 01       	movw	r20, r18
 70a:	48 2b       	or	r20, r24
 70c:	ca 01       	movw	r24, r20
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

00000712 <mrf_set_pan>:
 712:	cf 93       	push	r28
 714:	c8 2f       	mov	r28, r24
 716:	69 2f       	mov	r22, r25
 718:	82 e0       	ldi	r24, 0x02	; 2
 71a:	c8 df       	rcall	.-112    	; 0x6ac <mrf_write_short>
 71c:	6c 2f       	mov	r22, r28
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	c5 df       	rcall	.-118    	; 0x6ac <mrf_write_short>
 722:	cf 91       	pop	r28
 724:	08 95       	ret

00000726 <mrf_address16_write>:
 726:	cf 93       	push	r28
 728:	c8 2f       	mov	r28, r24
 72a:	69 2f       	mov	r22, r25
 72c:	84 e0       	ldi	r24, 0x04	; 4
 72e:	be df       	rcall	.-132    	; 0x6ac <mrf_write_short>
 730:	6c 2f       	mov	r22, r28
 732:	83 e0       	ldi	r24, 0x03	; 3
 734:	bb df       	rcall	.-138    	; 0x6ac <mrf_write_short>
 736:	cf 91       	pop	r28
 738:	08 95       	ret

0000073a <mrf_address16_read>:
 73a:	cf 93       	push	r28
 73c:	84 e0       	ldi	r24, 0x04	; 4
 73e:	8a df       	rcall	.-236    	; 0x654 <mrf_read_short>
 740:	c8 2f       	mov	r28, r24
 742:	83 e0       	ldi	r24, 0x03	; 3
 744:	87 df       	rcall	.-242    	; 0x654 <mrf_read_short>
 746:	2c 2f       	mov	r18, r28
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	32 2f       	mov	r19, r18
 74c:	22 27       	eor	r18, r18
 74e:	a9 01       	movw	r20, r18
 750:	48 2b       	or	r20, r24
 752:	ca 01       	movw	r24, r20
 754:	cf 91       	pop	r28
 756:	08 95       	ret

00000758 <mrf_send16>:
 758:	df 92       	push	r13
 75a:	ef 92       	push	r14
 75c:	ff 92       	push	r15
 75e:	0f 93       	push	r16
 760:	1f 93       	push	r17
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	d8 2f       	mov	r29, r24
 768:	c9 2f       	mov	r28, r25
 76a:	7b 01       	movw	r14, r22
 76c:	d4 2e       	mov	r13, r20
 76e:	69 e0       	ldi	r22, 0x09	; 9
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	a8 df       	rcall	.-176    	; 0x6c6 <mrf_write_long>
 776:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <ignoreBytes>
 77a:	67 5f       	subi	r22, 0xF7	; 247
 77c:	6d 0d       	add	r22, r13
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	a1 df       	rcall	.-190    	; 0x6c6 <mrf_write_long>
 784:	61 e6       	ldi	r22, 0x61	; 97
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	9d df       	rcall	.-198    	; 0x6c6 <mrf_write_long>
 78c:	68 e8       	ldi	r22, 0x88	; 136
 78e:	83 e0       	ldi	r24, 0x03	; 3
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	99 df       	rcall	.-206    	; 0x6c6 <mrf_write_long>
 794:	61 e0       	ldi	r22, 0x01	; 1
 796:	84 e0       	ldi	r24, 0x04	; 4
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	95 df       	rcall	.-214    	; 0x6c6 <mrf_write_long>
 79c:	ab df       	rcall	.-170    	; 0x6f4 <mrf_get_pan>
 79e:	19 2f       	mov	r17, r25
 7a0:	68 2f       	mov	r22, r24
 7a2:	85 e0       	ldi	r24, 0x05	; 5
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	8f df       	rcall	.-226    	; 0x6c6 <mrf_write_long>
 7a8:	61 2f       	mov	r22, r17
 7aa:	86 e0       	ldi	r24, 0x06	; 6
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	8b df       	rcall	.-234    	; 0x6c6 <mrf_write_long>
 7b0:	6d 2f       	mov	r22, r29
 7b2:	87 e0       	ldi	r24, 0x07	; 7
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	87 df       	rcall	.-242    	; 0x6c6 <mrf_write_long>
 7b8:	6c 2f       	mov	r22, r28
 7ba:	88 e0       	ldi	r24, 0x08	; 8
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	83 df       	rcall	.-250    	; 0x6c6 <mrf_write_long>
 7c0:	bc df       	rcall	.-136    	; 0x73a <mrf_address16_read>
 7c2:	c9 2f       	mov	r28, r25
 7c4:	68 2f       	mov	r22, r24
 7c6:	89 e0       	ldi	r24, 0x09	; 9
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	7d df       	rcall	.-262    	; 0x6c6 <mrf_write_long>
 7cc:	6c 2f       	mov	r22, r28
 7ce:	8a e0       	ldi	r24, 0x0A	; 10
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	79 df       	rcall	.-270    	; 0x6c6 <mrf_write_long>
 7d4:	c0 91 8a 01 	lds	r28, 0x018A	; 0x80018a <ignoreBytes>
 7d8:	d0 91 8b 01 	lds	r29, 0x018B	; 0x80018b <ignoreBytes+0x1>
 7dc:	2b 96       	adiw	r28, 0x0b	; 11
 7de:	dd 20       	and	r13, r13
 7e0:	61 f0       	breq	.+24     	; 0x7fa <mrf_send16+0xa2>
 7e2:	87 01       	movw	r16, r14
 7e4:	ed 0c       	add	r14, r13
 7e6:	f1 1c       	adc	r15, r1
 7e8:	f8 01       	movw	r30, r16
 7ea:	61 91       	ld	r22, Z+
 7ec:	8f 01       	movw	r16, r30
 7ee:	ce 01       	movw	r24, r28
 7f0:	6a df       	rcall	.-300    	; 0x6c6 <mrf_write_long>
 7f2:	21 96       	adiw	r28, 0x01	; 1
 7f4:	0e 15       	cp	r16, r14
 7f6:	1f 05       	cpc	r17, r15
 7f8:	b9 f7       	brne	.-18     	; 0x7e8 <mrf_send16+0x90>
 7fa:	65 e0       	ldi	r22, 0x05	; 5
 7fc:	8b e1       	ldi	r24, 0x1B	; 27
 7fe:	56 df       	rcall	.-340    	; 0x6ac <mrf_write_short>
 800:	df 91       	pop	r29
 802:	cf 91       	pop	r28
 804:	1f 91       	pop	r17
 806:	0f 91       	pop	r16
 808:	ff 90       	pop	r15
 80a:	ef 90       	pop	r14
 80c:	df 90       	pop	r13
 80e:	08 95       	ret

00000810 <mrf_set_interrupts>:
 810:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <isr_lock>
 814:	66 ef       	ldi	r22, 0xF6	; 246
 816:	82 e3       	ldi	r24, 0x32	; 50
 818:	49 df       	rcall	.-366    	; 0x6ac <mrf_write_short>
 81a:	08 95       	ret

0000081c <mrf_set_channel>:
 81c:	68 2f       	mov	r22, r24
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	6b 50       	subi	r22, 0x0B	; 11
 822:	71 09       	sbc	r23, r1
 824:	62 95       	swap	r22
 826:	72 95       	swap	r23
 828:	70 7f       	andi	r23, 0xF0	; 240
 82a:	76 27       	eor	r23, r22
 82c:	60 7f       	andi	r22, 0xF0	; 240
 82e:	76 27       	eor	r23, r22
 830:	63 60       	ori	r22, 0x03	; 3
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	92 e0       	ldi	r25, 0x02	; 2
 836:	47 df       	rcall	.-370    	; 0x6c6 <mrf_write_long>
 838:	08 95       	ret

0000083a <mrf_init>:
 83a:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <mrf_flags>
 83e:	67 e0       	ldi	r22, 0x07	; 7
 840:	8a e2       	ldi	r24, 0x2A	; 42
 842:	34 df       	rcall	.-408    	; 0x6ac <mrf_write_short>
 844:	68 e9       	ldi	r22, 0x98	; 152
 846:	88 e1       	ldi	r24, 0x18	; 24
 848:	31 df       	rcall	.-414    	; 0x6ac <mrf_write_short>
 84a:	65 e9       	ldi	r22, 0x95	; 149
 84c:	8e e2       	ldi	r24, 0x2E	; 46
 84e:	2e df       	rcall	.-420    	; 0x6ac <mrf_write_short>
 850:	63 e0       	ldi	r22, 0x03	; 3
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	92 e0       	ldi	r25, 0x02	; 2
 856:	37 df       	rcall	.-402    	; 0x6c6 <mrf_write_long>
 858:	61 e0       	ldi	r22, 0x01	; 1
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	92 e0       	ldi	r25, 0x02	; 2
 85e:	33 df       	rcall	.-410    	; 0x6c6 <mrf_write_long>
 860:	60 e8       	ldi	r22, 0x80	; 128
 862:	82 e0       	ldi	r24, 0x02	; 2
 864:	92 e0       	ldi	r25, 0x02	; 2
 866:	2f df       	rcall	.-418    	; 0x6c6 <mrf_write_long>
 868:	60 e9       	ldi	r22, 0x90	; 144
 86a:	86 e0       	ldi	r24, 0x06	; 6
 86c:	92 e0       	ldi	r25, 0x02	; 2
 86e:	2b df       	rcall	.-426    	; 0x6c6 <mrf_write_long>
 870:	60 e8       	ldi	r22, 0x80	; 128
 872:	87 e0       	ldi	r24, 0x07	; 7
 874:	92 e0       	ldi	r25, 0x02	; 2
 876:	27 df       	rcall	.-434    	; 0x6c6 <mrf_write_long>
 878:	60 e1       	ldi	r22, 0x10	; 16
 87a:	88 e0       	ldi	r24, 0x08	; 8
 87c:	92 e0       	ldi	r25, 0x02	; 2
 87e:	23 df       	rcall	.-442    	; 0x6c6 <mrf_write_long>
 880:	61 e2       	ldi	r22, 0x21	; 33
 882:	80 e2       	ldi	r24, 0x20	; 32
 884:	92 e0       	ldi	r25, 0x02	; 2
 886:	1f df       	rcall	.-450    	; 0x6c6 <mrf_write_long>
 888:	60 e8       	ldi	r22, 0x80	; 128
 88a:	8a e3       	ldi	r24, 0x3A	; 58
 88c:	0f df       	rcall	.-482    	; 0x6ac <mrf_write_short>
 88e:	60 e6       	ldi	r22, 0x60	; 96
 890:	8f e3       	ldi	r24, 0x3F	; 63
 892:	0c df       	rcall	.-488    	; 0x6ac <mrf_write_short>
 894:	60 e4       	ldi	r22, 0x40	; 64
 896:	8e e3       	ldi	r24, 0x3E	; 62
 898:	09 df       	rcall	.-494    	; 0x6ac <mrf_write_short>
 89a:	ba df       	rcall	.-140    	; 0x810 <mrf_set_interrupts>
 89c:	84 e1       	ldi	r24, 0x14	; 20
 89e:	be df       	rcall	.-132    	; 0x81c <mrf_set_channel>
 8a0:	64 e0       	ldi	r22, 0x04	; 4
 8a2:	86 e3       	ldi	r24, 0x36	; 54
 8a4:	03 df       	rcall	.-506    	; 0x6ac <mrf_write_short>
 8a6:	60 e0       	ldi	r22, 0x00	; 0
 8a8:	86 e3       	ldi	r24, 0x36	; 54
 8aa:	00 df       	rcall	.-512    	; 0x6ac <mrf_write_short>
 8ac:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <flag_got_rx>
 8b0:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <flag_got_tx>
 8b4:	89 ef       	ldi	r24, 0xF9	; 249
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	01 97       	sbiw	r24, 0x01	; 1
 8ba:	f1 f7       	brne	.-4      	; 0x8b8 <mrf_init+0x7e>
 8bc:	00 c0       	rjmp	.+0      	; 0x8be <mrf_init+0x84>
 8be:	00 00       	nop
 8c0:	08 95       	ret

000008c2 <mrf_check_flags>:
 8c2:	cf 93       	push	r28
 8c4:	df 93       	push	r29
 8c6:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <isr_lock>
 8ca:	21 11       	cpse	r18, r1
 8cc:	11 c0       	rjmp	.+34     	; 0x8f0 <mrf_check_flags+0x2e>
 8ce:	eb 01       	movw	r28, r22
 8d0:	fc 01       	movw	r30, r24
 8d2:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <flag_got_rx>
 8d6:	22 23       	and	r18, r18
 8d8:	19 f0       	breq	.+6      	; 0x8e0 <mrf_check_flags+0x1e>
 8da:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <flag_got_rx>
 8de:	09 95       	icall
 8e0:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <flag_got_tx>
 8e4:	88 23       	and	r24, r24
 8e6:	21 f0       	breq	.+8      	; 0x8f0 <mrf_check_flags+0x2e>
 8e8:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <flag_got_tx>
 8ec:	fe 01       	movw	r30, r28
 8ee:	09 95       	icall
 8f0:	df 91       	pop	r29
 8f2:	cf 91       	pop	r28
 8f4:	08 95       	ret

000008f6 <mrf_rx_datalength>:
 8f6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rx_info>
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0b 97       	sbiw	r24, 0x0b	; 11
 8fe:	08 95       	ret

00000900 <mrf_rx_disable>:
}

void mrf_rx_disable(void) {
    mrf_write_short(MRF_BBREG1, 0x04);  // RXDECINV - disable receiver
 900:	64 e0       	ldi	r22, 0x04	; 4
 902:	89 e3       	ldi	r24, 0x39	; 57
 904:	d3 de       	rcall	.-602    	; 0x6ac <mrf_write_short>
 906:	08 95       	ret

00000908 <mrf_rx_enable>:
}

void mrf_rx_enable(void) {
    mrf_write_short(MRF_BBREG1, 0x00);  // RXDECINV - enable receiver
 908:	60 e0       	ldi	r22, 0x00	; 0
 90a:	89 e3       	ldi	r24, 0x39	; 57
 90c:	cf de       	rcall	.-610    	; 0x6ac <mrf_write_short>
 90e:	08 95       	ret

00000910 <mrf_interrupt_handler>:
 * Call this from within an interrupt handler connected to the MRFs output
 * interrupt pin.  It handles reading in any data from the module, and letting it
 * continue working.
 * Only the most recent data is ever kept.
 */
void mrf_interrupt_handler(void) {
 910:	af 92       	push	r10
 912:	bf 92       	push	r11
 914:	cf 92       	push	r12
 916:	df 92       	push	r13
 918:	ef 92       	push	r14
 91a:	ff 92       	push	r15
 91c:	0f 93       	push	r16
 91e:	1f 93       	push	r17
 920:	cf 93       	push	r28
 922:	df 93       	push	r29
    //GRAB_ISR_MUTEX;
    isr_lock = 1;
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <isr_lock>
    uint8_t last_interrupt = mrf_read_short(MRF_INTSTAT);
 92a:	81 e3       	ldi	r24, 0x31	; 49
 92c:	93 de       	rcall	.-730    	; 0x654 <mrf_read_short>
 92e:	b8 2e       	mov	r11, r24
    if (last_interrupt & MRF_I_RXIF) {
 930:	83 ff       	sbrs	r24, 3
 932:	4f c0       	rjmp	.+158    	; 0x9d2 <mrf_interrupt_handler+0xc2>
		//ERROR: This doesn't enter upon reboot until a second message is sent
		//BLINK(LIGHT_PORT,GREEN_LIGHT);
        int i = 0;
        flag_got_rx++;
 934:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <flag_got_rx>
 938:	8f 5f       	subi	r24, 0xFF	; 255
 93a:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <flag_got_rx>
        // read out the packet data...
    //    cli();
        mrf_rx_disable();
 93e:	e0 df       	rcall	.-64     	; 0x900 <mrf_rx_disable>
        // read start of rxfifo for, has 2 bytes more added by FCS. frame_length = m + n + 2
        uint8_t frame_length = mrf_read_long(0x300);
 940:	80 e0       	ldi	r24, 0x00	; 0
 942:	93 e0       	ldi	r25, 0x03	; 3
 944:	98 de       	rcall	.-720    	; 0x676 <mrf_read_long>
 946:	a8 2e       	mov	r10, r24

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
 948:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <mrf_flags>
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 94c:	ea 2c       	mov	r14, r10
 94e:	f1 2c       	mov	r15, r1
 950:	1e 14       	cp	r1, r14
 952:	1f 04       	cpc	r1, r15
 954:	9c f4       	brge	.+38     	; 0x97c <mrf_interrupt_handler+0x6c>
 956:	c7 01       	movw	r24, r14
 958:	9c 01       	movw	r18, r24
 95a:	24 57       	subi	r18, 0x74	; 116
 95c:	3e 4f       	sbci	r19, 0xFE	; 254
 95e:	69 01       	movw	r12, r18
 960:	cc e8       	ldi	r28, 0x8C	; 140
 962:	d1 e0       	ldi	r29, 0x01	; 1
                rx_buf[rb_ptr++] = mrf_read_long(0x301 + i);
 964:	01 e0       	ldi	r16, 0x01	; 1
 966:	13 e0       	ldi	r17, 0x03	; 3
 968:	0c 58       	subi	r16, 0x8C	; 140
 96a:	11 40       	sbci	r17, 0x01	; 1
 96c:	c8 01       	movw	r24, r16
 96e:	8c 0f       	add	r24, r28
 970:	9d 1f       	adc	r25, r29
 972:	81 de       	rcall	.-766    	; 0x676 <mrf_read_long>
 974:	89 93       	st	Y+, r24
        uint8_t frame_length = mrf_read_long(0x300);

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 976:	cc 15       	cp	r28, r12
 978:	dd 05       	cpc	r29, r13
 97a:	c1 f7       	brne	.-16     	; 0x96c <mrf_interrupt_handler+0x5c>
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 97c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rx_info>
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	0b 97       	sbiw	r24, 0x0b	; 11
 984:	18 16       	cp	r1, r24
 986:	19 06       	cpc	r1, r25
 988:	ac f4       	brge	.+42     	; 0x9b4 <mrf_interrupt_handler+0xa4>
 98a:	c4 e1       	ldi	r28, 0x14	; 20
 98c:	d1 e0       	ldi	r29, 0x01	; 1
 98e:	c1 2c       	mov	r12, r1
 990:	d1 2c       	mov	r13, r1
uint8_t * mrf_get_rxbuf(void) {
    return rx_buf;
}

int mrf_rx_datalength(void) {
    return rx_info.frame_length - bytes_nodata;
 992:	03 e1       	ldi	r16, 0x13	; 19
 994:	11 e0       	ldi	r17, 0x01	; 1

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
 996:	3f ef       	ldi	r19, 0xFF	; 255
 998:	c3 1a       	sub	r12, r19
 99a:	d3 0a       	sbc	r13, r19
 99c:	c6 01       	movw	r24, r12
 99e:	87 5f       	subi	r24, 0xF7	; 247
 9a0:	9c 4f       	sbci	r25, 0xFC	; 252
 9a2:	69 de       	rcall	.-814    	; 0x676 <mrf_read_long>
 9a4:	89 93       	st	Y+, r24
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 9a6:	f8 01       	movw	r30, r16
 9a8:	80 81       	ld	r24, Z
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0b 97       	sbiw	r24, 0x0b	; 11
 9ae:	c8 16       	cp	r12, r24
 9b0:	d9 06       	cpc	r13, r25
 9b2:	8c f3       	brlt	.-30     	; 0x996 <mrf_interrupt_handler+0x86>
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
        }

        rx_info.frame_length = frame_length;
 9b4:	a0 92 13 01 	sts	0x0113, r10	; 0x800113 <rx_info>
        // same as datasheet 0x301 + (m + n + 2) <-- frame_length
        rx_info.lqi = mrf_read_long(0x301 + frame_length);
 9b8:	c7 01       	movw	r24, r14
 9ba:	8f 5f       	subi	r24, 0xFF	; 255
 9bc:	9c 4f       	sbci	r25, 0xFC	; 252
 9be:	5b de       	rcall	.-842    	; 0x676 <mrf_read_long>
 9c0:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <rx_info+0x75>
        // same as datasheet 0x301 + (m + n + 3) <-- frame_length + 1
        rx_info.rssi = mrf_read_long(0x301 + frame_length + 1);
 9c4:	c7 01       	movw	r24, r14
 9c6:	8e 5f       	subi	r24, 0xFE	; 254
 9c8:	9c 4f       	sbci	r25, 0xFC	; 252
 9ca:	55 de       	rcall	.-854    	; 0x676 <mrf_read_long>
 9cc:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <rx_info+0x76>

        mrf_rx_enable();
 9d0:	9b df       	rcall	.-202    	; 0x908 <mrf_rx_enable>
    //    sei();
    }
    if (last_interrupt & MRF_I_TXNIF) {
 9d2:	b0 fe       	sbrs	r11, 0
 9d4:	1c c0       	rjmp	.+56     	; 0xa0e <mrf_interrupt_handler+0xfe>
        flag_got_tx++;
 9d6:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <flag_got_tx>
 9da:	8f 5f       	subi	r24, 0xFF	; 255
 9dc:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <flag_got_tx>
        mrf_reg_TXSTAT = mrf_read_short(MRF_TXSTAT);
 9e0:	84 e2       	ldi	r24, 0x24	; 36
 9e2:	38 de       	rcall	.-912    	; 0x654 <mrf_read_short>
 9e4:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <mrf_reg_TXSTAT>
        // 1 means it failed, we want 1 to mean it worked.
        tx_info.tx_ok = !(mrf_reg_TXSTAT & 0x3F);
 9e8:	98 2f       	mov	r25, r24
 9ea:	9f 73       	andi	r25, 0x3F	; 63
 9ec:	21 e0       	ldi	r18, 0x01	; 1
 9ee:	09 f0       	breq	.+2      	; 0x9f2 <mrf_interrupt_handler+0xe2>
 9f0:	20 e0       	ldi	r18, 0x00	; 0
 9f2:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <tx_info>
 9f6:	20 fb       	bst	r18, 0
 9f8:	90 f9       	bld	r25, 0
        tx_info.retries = mrf_reg_TXSTAT >> 6;
 9fa:	82 95       	swap	r24
 9fc:	86 95       	lsr	r24
 9fe:	86 95       	lsr	r24
 a00:	83 70       	andi	r24, 0x03	; 3
 a02:	88 0f       	add	r24, r24
 a04:	99 7f       	andi	r25, 0xF9	; 249
        tx_info.channel_busy = (mrf_reg_TXSTAT & (1 << CCAFAIL));
 a06:	89 2b       	or	r24, r25
 a08:	87 7f       	andi	r24, 0xF7	; 247
 a0a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <tx_info>
    }
//DROP_ISR_MUTEX;
    isr_lock = 0;
 a0e:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <isr_lock>
}
 a12:	df 91       	pop	r29
 a14:	cf 91       	pop	r28
 a16:	1f 91       	pop	r17
 a18:	0f 91       	pop	r16
 a1a:	ff 90       	pop	r15
 a1c:	ef 90       	pop	r14
 a1e:	df 90       	pop	r13
 a20:	cf 90       	pop	r12
 a22:	bf 90       	pop	r11
 a24:	af 90       	pop	r10
 a26:	08 95       	ret

00000a28 <mrf_get_rxdata>:
}

uint8_t* mrf_get_rxdata()
{
	return rx_info.rx_data;
}
 a28:	84 e1       	ldi	r24, 0x14	; 20
 a2a:	91 e0       	ldi	r25, 0x01	; 1
 a2c:	08 95       	ret

00000a2e <Pk_Set_Packet_Size>:
{
	memset(buff,0,PK_SZ_TXRX_BUFFER);
}
void Pk_Set_Packet_Size(uint8_t* buff, uint8_t sz)
{
	buff[PK_COMMAND_HEADER + PK_SZ_PACKET] = sz;
 a2e:	fc 01       	movw	r30, r24
 a30:	65 83       	std	Z+5, r22	; 0x05
 a32:	08 95       	ret

00000a34 <Pk_Set_Target_Node>:
}

void Pk_Set_Target_Node(uint8_t* buff, uint16_t target_node)
{
	word_to_bytes(&buff[PK_DEST_ADDR_HI],target_node);
 a34:	1f db       	rcall	.-2498   	; 0x74 <word_to_bytes>
 a36:	08 95       	ret

00000a38 <Pk_Set_Command>:
}

void Pk_Set_Command(uint8_t* buff, uint16_t cmd_id, uint8_t cmd2, uint8_t cmd3, uint8_t cmd4, uint8_t cmd5)
{
 a38:	ef 92       	push	r14
 a3a:	ff 92       	push	r15
 a3c:	0f 93       	push	r16
 a3e:	1f 93       	push	r17
 a40:	cf 93       	push	r28
 a42:	df 93       	push	r29
 a44:	ec 01       	movw	r28, r24
 a46:	f4 2e       	mov	r15, r20
 a48:	12 2f       	mov	r17, r18
	word_to_bytes(&buff[PK_COMMAND_HEADER+PK_CMD_HI],cmd_id);
 a4a:	06 96       	adiw	r24, 0x06	; 6
 a4c:	13 db       	rcall	.-2522   	; 0x74 <word_to_bytes>
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_0] = cmd2;
 a4e:	f8 86       	std	Y+8, r15	; 0x08
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_1] = cmd3;
 a50:	19 87       	std	Y+9, r17	; 0x09
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_2] = cmd4;
 a52:	0a 87       	std	Y+10, r16	; 0x0a
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_3] = cmd5;
 a54:	eb 86       	std	Y+11, r14	; 0x0b
}
 a56:	df 91       	pop	r29
 a58:	cf 91       	pop	r28
 a5a:	1f 91       	pop	r17
 a5c:	0f 91       	pop	r16
 a5e:	ff 90       	pop	r15
 a60:	ef 90       	pop	r14
 a62:	08 95       	ret

00000a64 <Pk_Set_Src_Node>:

void Pk_Set_Src_Node(uint8_t* buff, uint16_t origin)
{
	//used for setting where this particular packet is coming from: the source of "data" would be held
	//later in the packet, in the data bytes.
	word_to_bytes(&buff[PK_SRC_ADDR_HI],origin);
 a64:	02 96       	adiw	r24, 0x02	; 2
 a66:	06 db       	rcall	.-2548   	; 0x74 <word_to_bytes>
 a68:	08 95       	ret

00000a6a <Pk_Add_Data>:
}

void Pk_Add_Data(uint8_t* buff, uint16_t data)
{
	word_to_bytes(&buff[PK_COMMAND_HEADER+PK_DATA_START],data);
 a6a:	0e 96       	adiw	r24, 0x0e	; 14
 a6c:	03 db       	rcall	.-2554   	; 0x74 <word_to_bytes>
 a6e:	08 95       	ret

00000a70 <spi_setup>:

void spi_setup()
{

	#ifndef SPI_ON_USI
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0); //enables SPI, sets chip as master, sets clock speed to fosc/16
 a70:	81 e5       	ldi	r24, 0x51	; 81
 a72:	8c bd       	out	0x2c, r24	; 44
 a74:	08 95       	ret

00000a76 <spi_transfer_byte>:

/*Transfers a single byte between master and slave*/

void spi_transfer_byte(uint8_t* bout, uint8_t* bin)
{
	DATAREG = *bout;
 a76:	fc 01       	movw	r30, r24
 a78:	80 81       	ld	r24, Z
 a7a:	8e bd       	out	0x2e, r24	; 46
	while(! SPI_BYTE_XFER_DONE)
 a7c:	0d b4       	in	r0, 0x2d	; 45
 a7e:	07 fe       	sbrs	r0, 7
 a80:	fd cf       	rjmp	.-6      	; 0xa7c <spi_transfer_byte+0x6>
		USICR = usi_clk_lo;
		USICR = usi_clk_hi;
		#endif
	} 
	/*Incoming data out of data register*/
	*bin = DATAREG;
 a82:	8e b5       	in	r24, 0x2e	; 46
 a84:	fb 01       	movw	r30, r22
 a86:	80 83       	st	Z, r24
 a88:	08 95       	ret

00000a8a <spi_transfer_nbytes>:
}

/*Selects the slave (cs)  and transfers n bytes. The input and output buffers must be defined and contain at least n bytes each*/

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
 a8a:	cf 92       	push	r12
 a8c:	df 92       	push	r13
 a8e:	ef 92       	push	r14
 a90:	ff 92       	push	r15
 a92:	0f 93       	push	r16
 a94:	1f 93       	push	r17
 a96:	cf 93       	push	r28
 a98:	df 93       	push	r29
 a9a:	ec 01       	movw	r28, r24
 a9c:	8b 01       	movw	r16, r22
	
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
 a9e:	85 b1       	in	r24, 0x05	; 5
 aa0:	61 e0       	ldi	r22, 0x01	; 1
 aa2:	70 e0       	ldi	r23, 0x00	; 0
 aa4:	6b 01       	movw	r12, r22
 aa6:	02 c0       	rjmp	.+4      	; 0xaac <spi_transfer_nbytes+0x22>
 aa8:	cc 0c       	add	r12, r12
 aaa:	dd 1c       	adc	r13, r13
 aac:	2a 95       	dec	r18
 aae:	e2 f7       	brpl	.-8      	; 0xaa8 <spi_transfer_nbytes+0x1e>
 ab0:	9c 2d       	mov	r25, r12
 ab2:	90 95       	com	r25
 ab4:	89 23       	and	r24, r25
 ab6:	85 b9       	out	0x05, r24	; 5
	while(n)
 ab8:	44 23       	and	r20, r20
 aba:	89 f0       	breq	.+34     	; 0xade <spi_transfer_nbytes+0x54>
 abc:	41 50       	subi	r20, 0x01	; 1
 abe:	e4 2e       	mov	r14, r20
 ac0:	f1 2c       	mov	r15, r1
 ac2:	8f ef       	ldi	r24, 0xFF	; 255
 ac4:	e8 1a       	sub	r14, r24
 ac6:	f8 0a       	sbc	r15, r24
 ac8:	ec 0e       	add	r14, r28
 aca:	fd 1e       	adc	r15, r29
	{
		
		spi_transfer_byte(out,in);    /*transfer byte */
 acc:	b8 01       	movw	r22, r16
 ace:	ce 01       	movw	r24, r28
 ad0:	d2 df       	rcall	.-92     	; 0xa76 <spi_transfer_byte>

		/*advance iterators*/
		out = out + 1;
 ad2:	21 96       	adiw	r28, 0x01	; 1
		in = in + 1;
 ad4:	0f 5f       	subi	r16, 0xFF	; 255
 ad6:	1f 4f       	sbci	r17, 0xFF	; 255

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
	
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
	while(n)
 ad8:	ec 16       	cp	r14, r28
 ada:	fd 06       	cpc	r15, r29
 adc:	b9 f7       	brne	.-18     	; 0xacc <spi_transfer_nbytes+0x42>
		/*advance iterators*/
		out = out + 1;
		in = in + 1;
		n = n - 1;
	}
	CS_PORT |= 1<<cs;/*Deselect slave chip*/
 ade:	85 b1       	in	r24, 0x05	; 5
 ae0:	c8 2a       	or	r12, r24
 ae2:	c5 b8       	out	0x05, r12	; 5
}
 ae4:	df 91       	pop	r29
 ae6:	cf 91       	pop	r28
 ae8:	1f 91       	pop	r17
 aea:	0f 91       	pop	r16
 aec:	ff 90       	pop	r15
 aee:	ef 90       	pop	r14
 af0:	df 90       	pop	r13
 af2:	cf 90       	pop	r12
 af4:	08 95       	ret

00000af6 <memcpy>:
 af6:	fb 01       	movw	r30, r22
 af8:	dc 01       	movw	r26, r24
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <memcpy+0xa>
 afc:	01 90       	ld	r0, Z+
 afe:	0d 92       	st	X+, r0
 b00:	41 50       	subi	r20, 0x01	; 1
 b02:	50 40       	sbci	r21, 0x00	; 0
 b04:	d8 f7       	brcc	.-10     	; 0xafc <memcpy+0x6>
 b06:	08 95       	ret

00000b08 <_exit>:
 b08:	f8 94       	cli

00000b0a <__stop_program>:
 b0a:	ff cf       	rjmp	.-2      	; 0xb0a <__stop_program>
