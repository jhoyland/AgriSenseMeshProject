
Mesh-Beta6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000476  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015c  00800100  00800100  000004ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fd3  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000add  00000000  00000000  000026fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cba  00000000  00000000  000031d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004dc  00000000  00000000  00003e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008bc  00000000  00000000  00004370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001027  00000000  00000000  00004c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00005c53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__vector_1>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	e6 e7       	ldi	r30, 0x76	; 118
  3c:	f4 e0       	ldi	r31, 0x04	; 4
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a0 30       	cpi	r26, 0x00	; 0
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	22 e0       	ldi	r18, 0x02	; 2
  4c:	a0 e0       	ldi	r26, 0x00	; 0
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	ac 35       	cpi	r26, 0x5C	; 92
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	66 d0       	rcall	.+204    	; 0x128 <main>
  5c:	0a c2       	rjmp	.+1044   	; 0x472 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <__vector_1>:

	running_status &= ~(1<<RU_RX_HANDLE);
}

void handle_tx()
{
  60:	1f 92       	push	r1
  62:	0f 92       	push	r0
  64:	0f b6       	in	r0, 0x3f	; 63
  66:	0f 92       	push	r0
  68:	11 24       	eor	r1, r1
  6a:	2f 93       	push	r18
  6c:	3f 93       	push	r19
  6e:	4f 93       	push	r20
  70:	5f 93       	push	r21
  72:	6f 93       	push	r22
  74:	7f 93       	push	r23
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
  7a:	af 93       	push	r26
  7c:	bf 93       	push	r27
  7e:	ef 93       	push	r30
  80:	ff 93       	push	r31
  82:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  86:	80 61       	ori	r24, 0x10	; 16
  88:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
  8c:	23 d1       	rcall	.+582    	; 0x2d4 <mrf_interrupt_handler>
  8e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  92:	8f 7e       	andi	r24, 0xEF	; 239
  94:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
  98:	ff 91       	pop	r31
  9a:	ef 91       	pop	r30
  9c:	bf 91       	pop	r27
  9e:	af 91       	pop	r26
  a0:	9f 91       	pop	r25
  a2:	8f 91       	pop	r24
  a4:	7f 91       	pop	r23
  a6:	6f 91       	pop	r22
  a8:	5f 91       	pop	r21
  aa:	4f 91       	pop	r20
  ac:	3f 91       	pop	r19
  ae:	2f 91       	pop	r18
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <setup>:
}

void setup()
{
	
	DDRD |= (1 << RED_LIGHT); //set PD7 to output for LED
  ba:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << YELLOW_LIGHT);
  bc:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << GREEN_LIGHT);
  be:	57 9a       	sbi	0x0a, 7	; 10
	
	PORTB |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<ADC_CS) | (1<<SPI_SS) | (1<<MRF_CS) ; //set these ports to high (required)
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	8c 6e       	ori	r24, 0xEC	; 236
  c4:	85 b9       	out	0x05, r24	; 5
	DDRB |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<ADC_CS) | (1<<SPI_SS) | (1<<MRF_CS) ;  //set these to output
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	8c 6e       	ori	r24, 0xEC	; 236
  ca:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<SPI_MISO);	//master in slave out, input on attiny
  cc:	24 98       	cbi	0x04, 4	; 4
	
	spi_setup();
  ce:	8e d1       	rcall	.+796    	; 0x3ec <spi_setup>
	mrf_reset();
  d0:	2d d0       	rcall	.+90     	; 0x12c <mrf_reset>
	mrf_init();
  d2:	b4 d0       	rcall	.+360    	; 0x23c <mrf_init>
	
	mrf_set_pan(ASMP_PANID); //set PANID
  d4:	8e ef       	ldi	r24, 0xFE	; 254
  d6:	9a ec       	ldi	r25, 0xCA	; 202
  d8:	88 d0       	rcall	.+272    	; 0x1ea <mrf_set_pan>
	mrf_address16_write(THIS_DEVICE); //set device address
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	8f d0       	rcall	.+286    	; 0x1fe <mrf_address16_write>
	sei(); //starts interrupts, essential to let chip know message is being handled
  e0:	78 94       	sei
	EIMSK |= (1<<INT0);
  e2:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC01);
  e4:	e9 e6       	ldi	r30, 0x69	; 105
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	80 83       	st	Z, r24
	
	//transmit_command_header = &transmit_data_buffer[PK_COMMAND_HEADER]; //from sensenode.c
	//recieved_command_header = &recieved_data_buffer[PK_COMMAND_HEADER]; //allows simple pointing to the command blocks
	memset(transmit_data_buffer,0,PK_SZ_TXRX_BUFFER); //clear buffer to 0 on reset, possibly not needed
  ee:	88 e2       	ldi	r24, 0x28	; 40
  f0:	e6 e2       	ldi	r30, 0x26	; 38
  f2:	f2 e0       	ldi	r31, 0x02	; 2
  f4:	df 01       	movw	r26, r30
  f6:	98 2f       	mov	r25, r24
  f8:	1d 92       	st	X+, r1
  fa:	9a 95       	dec	r25
  fc:	e9 f7       	brne	.-6      	; 0xf8 <setup+0x3e>
	memset(recieved_data_buffer,0,PK_SZ_TXRX_BUFFER); //clear buffer to 0 on reset
  fe:	ee ef       	ldi	r30, 0xFE	; 254
 100:	f1 e0       	ldi	r31, 0x01	; 1
 102:	df 01       	movw	r26, r30
 104:	1d 92       	st	X+, r1
 106:	8a 95       	dec	r24
 108:	e9 f7       	brne	.-6      	; 0x104 <setup+0x4a>
	
	//Network_Set = FALSE; //default to network setup: No down or up neighbor
	
	
	BLINK(LIGHT_PORT,GREEN_LIGHT);
 10a:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	8f e4       	ldi	r24, 0x4F	; 79
 10e:	93 ec       	ldi	r25, 0xC3	; 195
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <setup+0x56>
 114:	00 c0       	rjmp	.+0      	; 0x116 <setup+0x5c>
 116:	00 00       	nop
 118:	5f 98       	cbi	0x0b, 7	; 11
 11a:	af e4       	ldi	r26, 0x4F	; 79
 11c:	b3 ec       	ldi	r27, 0xC3	; 195
 11e:	11 97       	sbiw	r26, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <setup+0x64>
 122:	00 c0       	rjmp	.+0      	; 0x124 <setup+0x6a>
 124:	00 00       	nop
 126:	08 95       	ret

00000128 <main>:
}


int main(void)
{
    setup();
 128:	c8 df       	rcall	.-112    	; 0xba <setup>
 12a:	ff cf       	rjmp	.-2      	; 0x12a <main+0x2>

0000012c <mrf_reset>:
        mrf_write_long(MRF_TESTMODE, 0x00); // Disable PA/LNA on MRF24J40MB module.
    }
}

void mrf_rx_flush(void) {
    mrf_write_short(MRF_RXFLUSH, 0x01);
 12c:	59 98       	cbi	0x0b, 1	; 11
 12e:	87 ea       	ldi	r24, 0xA7	; 167
 130:	91 e6       	ldi	r25, 0x61	; 97
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <mrf_reset+0x6>
 136:	00 c0       	rjmp	.+0      	; 0x138 <mrf_reset+0xc>
 138:	00 00       	nop
 13a:	59 9a       	sbi	0x0b, 1	; 11
 13c:	83 e2       	ldi	r24, 0x23	; 35
 13e:	94 ef       	ldi	r25, 0xF4	; 244
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <mrf_reset+0x14>
 144:	00 c0       	rjmp	.+0      	; 0x146 <mrf_reset+0x1a>
 146:	00 00       	nop
 148:	08 95       	ret

0000014a <mrf_read_short>:
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	c1 e0       	ldi	r28, 0x01	; 1
 150:	d1 e0       	ldi	r29, 0x01	; 1
 152:	88 0f       	add	r24, r24
 154:	8e 77       	andi	r24, 0x7E	; 126
 156:	88 83       	st	Y, r24
 158:	19 82       	std	Y+1, r1	; 0x01
 15a:	26 e0       	ldi	r18, 0x06	; 6
 15c:	42 e0       	ldi	r20, 0x02	; 2
 15e:	be 01       	movw	r22, r28
 160:	ce 01       	movw	r24, r28
 162:	51 d1       	rcall	.+674    	; 0x406 <spi_transfer_nbytes>
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <mrf_read_long>:
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	c1 e0       	ldi	r28, 0x01	; 1
 172:	d1 e0       	ldi	r29, 0x01	; 1
 174:	9c 01       	movw	r18, r24
 176:	36 95       	lsr	r19
 178:	27 95       	ror	r18
 17a:	36 95       	lsr	r19
 17c:	27 95       	ror	r18
 17e:	36 95       	lsr	r19
 180:	27 95       	ror	r18
 182:	20 68       	ori	r18, 0x80	; 128
 184:	28 83       	st	Y, r18
 186:	82 95       	swap	r24
 188:	88 0f       	add	r24, r24
 18a:	80 7e       	andi	r24, 0xE0	; 224
 18c:	89 83       	std	Y+1, r24	; 0x01
 18e:	1a 82       	std	Y+2, r1	; 0x02
 190:	26 e0       	ldi	r18, 0x06	; 6
 192:	43 e0       	ldi	r20, 0x03	; 3
 194:	be 01       	movw	r22, r28
 196:	ce 01       	movw	r24, r28
 198:	36 d1       	rcall	.+620    	; 0x406 <spi_transfer_nbytes>
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <mrf_write_short>:
 1a2:	e1 e0       	ldi	r30, 0x01	; 1
 1a4:	f1 e0       	ldi	r31, 0x01	; 1
 1a6:	88 0f       	add	r24, r24
 1a8:	8e 77       	andi	r24, 0x7E	; 126
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	80 83       	st	Z, r24
 1ae:	61 83       	std	Z+1, r22	; 0x01
 1b0:	26 e0       	ldi	r18, 0x06	; 6
 1b2:	42 e0       	ldi	r20, 0x02	; 2
 1b4:	bf 01       	movw	r22, r30
 1b6:	cf 01       	movw	r24, r30
 1b8:	26 d1       	rcall	.+588    	; 0x406 <spi_transfer_nbytes>
 1ba:	08 95       	ret

000001bc <mrf_write_long>:
 1bc:	e1 e0       	ldi	r30, 0x01	; 1
 1be:	f1 e0       	ldi	r31, 0x01	; 1
 1c0:	9c 01       	movw	r18, r24
 1c2:	36 95       	lsr	r19
 1c4:	27 95       	ror	r18
 1c6:	36 95       	lsr	r19
 1c8:	27 95       	ror	r18
 1ca:	36 95       	lsr	r19
 1cc:	27 95       	ror	r18
 1ce:	20 68       	ori	r18, 0x80	; 128
 1d0:	20 83       	st	Z, r18
 1d2:	82 95       	swap	r24
 1d4:	88 0f       	add	r24, r24
 1d6:	80 7e       	andi	r24, 0xE0	; 224
 1d8:	80 61       	ori	r24, 0x10	; 16
 1da:	81 83       	std	Z+1, r24	; 0x01
 1dc:	62 83       	std	Z+2, r22	; 0x02
 1de:	26 e0       	ldi	r18, 0x06	; 6
 1e0:	43 e0       	ldi	r20, 0x03	; 3
 1e2:	bf 01       	movw	r22, r30
 1e4:	cf 01       	movw	r24, r30
 1e6:	0f d1       	rcall	.+542    	; 0x406 <spi_transfer_nbytes>
 1e8:	08 95       	ret

000001ea <mrf_set_pan>:
 1ea:	cf 93       	push	r28
 1ec:	c8 2f       	mov	r28, r24
 1ee:	69 2f       	mov	r22, r25
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	d7 df       	rcall	.-82     	; 0x1a2 <mrf_write_short>
 1f4:	6c 2f       	mov	r22, r28
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	d4 df       	rcall	.-88     	; 0x1a2 <mrf_write_short>
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <mrf_address16_write>:
 1fe:	cf 93       	push	r28
 200:	c8 2f       	mov	r28, r24
 202:	69 2f       	mov	r22, r25
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	cd df       	rcall	.-102    	; 0x1a2 <mrf_write_short>
 208:	6c 2f       	mov	r22, r28
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	ca df       	rcall	.-108    	; 0x1a2 <mrf_write_short>
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <mrf_set_interrupts>:
 212:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <isr_lock>
 216:	66 ef       	ldi	r22, 0xF6	; 246
 218:	82 e3       	ldi	r24, 0x32	; 50
 21a:	c3 df       	rcall	.-122    	; 0x1a2 <mrf_write_short>
 21c:	08 95       	ret

0000021e <mrf_set_channel>:
 21e:	68 2f       	mov	r22, r24
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	6b 50       	subi	r22, 0x0B	; 11
 224:	71 09       	sbc	r23, r1
 226:	62 95       	swap	r22
 228:	72 95       	swap	r23
 22a:	70 7f       	andi	r23, 0xF0	; 240
 22c:	76 27       	eor	r23, r22
 22e:	60 7f       	andi	r22, 0xF0	; 240
 230:	76 27       	eor	r23, r22
 232:	63 60       	ori	r22, 0x03	; 3
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	92 e0       	ldi	r25, 0x02	; 2
 238:	c1 df       	rcall	.-126    	; 0x1bc <mrf_write_long>
 23a:	08 95       	ret

0000023c <mrf_init>:
 23c:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <mrf_flags>
 240:	67 e0       	ldi	r22, 0x07	; 7
 242:	8a e2       	ldi	r24, 0x2A	; 42
 244:	ae df       	rcall	.-164    	; 0x1a2 <mrf_write_short>
 246:	68 e9       	ldi	r22, 0x98	; 152
 248:	88 e1       	ldi	r24, 0x18	; 24
 24a:	ab df       	rcall	.-170    	; 0x1a2 <mrf_write_short>
 24c:	65 e9       	ldi	r22, 0x95	; 149
 24e:	8e e2       	ldi	r24, 0x2E	; 46
 250:	a8 df       	rcall	.-176    	; 0x1a2 <mrf_write_short>
 252:	63 e0       	ldi	r22, 0x03	; 3
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	92 e0       	ldi	r25, 0x02	; 2
 258:	b1 df       	rcall	.-158    	; 0x1bc <mrf_write_long>
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	92 e0       	ldi	r25, 0x02	; 2
 260:	ad df       	rcall	.-166    	; 0x1bc <mrf_write_long>
 262:	60 e8       	ldi	r22, 0x80	; 128
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	92 e0       	ldi	r25, 0x02	; 2
 268:	a9 df       	rcall	.-174    	; 0x1bc <mrf_write_long>
 26a:	60 e9       	ldi	r22, 0x90	; 144
 26c:	86 e0       	ldi	r24, 0x06	; 6
 26e:	92 e0       	ldi	r25, 0x02	; 2
 270:	a5 df       	rcall	.-182    	; 0x1bc <mrf_write_long>
 272:	60 e8       	ldi	r22, 0x80	; 128
 274:	87 e0       	ldi	r24, 0x07	; 7
 276:	92 e0       	ldi	r25, 0x02	; 2
 278:	a1 df       	rcall	.-190    	; 0x1bc <mrf_write_long>
 27a:	60 e1       	ldi	r22, 0x10	; 16
 27c:	88 e0       	ldi	r24, 0x08	; 8
 27e:	92 e0       	ldi	r25, 0x02	; 2
 280:	9d df       	rcall	.-198    	; 0x1bc <mrf_write_long>
 282:	61 e2       	ldi	r22, 0x21	; 33
 284:	80 e2       	ldi	r24, 0x20	; 32
 286:	92 e0       	ldi	r25, 0x02	; 2
 288:	99 df       	rcall	.-206    	; 0x1bc <mrf_write_long>
 28a:	60 e8       	ldi	r22, 0x80	; 128
 28c:	8a e3       	ldi	r24, 0x3A	; 58
 28e:	89 df       	rcall	.-238    	; 0x1a2 <mrf_write_short>
 290:	60 e6       	ldi	r22, 0x60	; 96
 292:	8f e3       	ldi	r24, 0x3F	; 63
 294:	86 df       	rcall	.-244    	; 0x1a2 <mrf_write_short>
 296:	60 e4       	ldi	r22, 0x40	; 64
 298:	8e e3       	ldi	r24, 0x3E	; 62
 29a:	83 df       	rcall	.-250    	; 0x1a2 <mrf_write_short>
 29c:	ba df       	rcall	.-140    	; 0x212 <mrf_set_interrupts>
 29e:	84 e1       	ldi	r24, 0x14	; 20
 2a0:	be df       	rcall	.-132    	; 0x21e <mrf_set_channel>
 2a2:	64 e0       	ldi	r22, 0x04	; 4
 2a4:	86 e3       	ldi	r24, 0x36	; 54
 2a6:	7d df       	rcall	.-262    	; 0x1a2 <mrf_write_short>
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	86 e3       	ldi	r24, 0x36	; 54
 2ac:	7a df       	rcall	.-268    	; 0x1a2 <mrf_write_short>
 2ae:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <flag_got_rx>
 2b2:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <flag_got_tx>
 2b6:	89 ef       	ldi	r24, 0xF9	; 249
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <mrf_init+0x7e>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <mrf_init+0x84>
 2c0:	00 00       	nop
 2c2:	08 95       	ret

000002c4 <mrf_rx_disable>:
}

void mrf_rx_disable(void) {
    mrf_write_short(MRF_BBREG1, 0x04);  // RXDECINV - disable receiver
 2c4:	64 e0       	ldi	r22, 0x04	; 4
 2c6:	89 e3       	ldi	r24, 0x39	; 57
 2c8:	6c df       	rcall	.-296    	; 0x1a2 <mrf_write_short>
 2ca:	08 95       	ret

000002cc <mrf_rx_enable>:
}

void mrf_rx_enable(void) {
    mrf_write_short(MRF_BBREG1, 0x00);  // RXDECINV - enable receiver
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	89 e3       	ldi	r24, 0x39	; 57
 2d0:	68 df       	rcall	.-304    	; 0x1a2 <mrf_write_short>
 2d2:	08 95       	ret

000002d4 <mrf_interrupt_handler>:
 * Call this from within an interrupt handler connected to the MRFs output
 * interrupt pin.  It handles reading in any data from the module, and letting it
 * continue working.
 * Only the most recent data is ever kept.
 */
void mrf_interrupt_handler(void) {
 2d4:	af 92       	push	r10
 2d6:	bf 92       	push	r11
 2d8:	cf 92       	push	r12
 2da:	df 92       	push	r13
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
    //GRAB_ISR_MUTEX;
    isr_lock = 1;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <isr_lock>
    uint8_t last_interrupt = mrf_read_short(MRF_INTSTAT);
 2ee:	81 e3       	ldi	r24, 0x31	; 49
 2f0:	2c df       	rcall	.-424    	; 0x14a <mrf_read_short>
 2f2:	b8 2e       	mov	r11, r24
    if (last_interrupt & MRF_I_RXIF) {
 2f4:	83 ff       	sbrs	r24, 3
 2f6:	4f c0       	rjmp	.+158    	; 0x396 <__stack+0x97>
		//ERROR: This doesn't enter upon reboot until a second message is sent
		//BLINK(LIGHT_PORT,GREEN_LIGHT);
        int i = 0;
        flag_got_rx++;
 2f8:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <flag_got_rx>
 2fc:	8f 5f       	subi	r24, 0xFF	; 255
 2fe:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <flag_got_rx>
        // read out the packet data...
    //    cli();
        mrf_rx_disable();
 302:	e0 df       	rcall	.-64     	; 0x2c4 <mrf_rx_disable>
        // read start of rxfifo for, has 2 bytes more added by FCS. frame_length = m + n + 2
        uint8_t frame_length = mrf_read_long(0x300);
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	93 e0       	ldi	r25, 0x03	; 3
 308:	31 df       	rcall	.-414    	; 0x16c <mrf_read_long>
 30a:	a8 2e       	mov	r10, r24

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
 30c:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <mrf_flags>
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 310:	ea 2c       	mov	r14, r10
 312:	f1 2c       	mov	r15, r1
 314:	1e 14       	cp	r1, r14
 316:	1f 04       	cpc	r1, r15
 318:	9c f4       	brge	.+38     	; 0x340 <__stack+0x41>
 31a:	c7 01       	movw	r24, r14
 31c:	9c 01       	movw	r18, r24
 31e:	24 58       	subi	r18, 0x84	; 132
 320:	3e 4f       	sbci	r19, 0xFE	; 254
 322:	69 01       	movw	r12, r18
 324:	cc e7       	ldi	r28, 0x7C	; 124
 326:	d1 e0       	ldi	r29, 0x01	; 1
                rx_buf[rb_ptr++] = mrf_read_long(0x301 + i);
 328:	01 e0       	ldi	r16, 0x01	; 1
 32a:	13 e0       	ldi	r17, 0x03	; 3
 32c:	0c 57       	subi	r16, 0x7C	; 124
 32e:	11 40       	sbci	r17, 0x01	; 1
 330:	c8 01       	movw	r24, r16
 332:	8c 0f       	add	r24, r28
 334:	9d 1f       	adc	r25, r29
 336:	1a df       	rcall	.-460    	; 0x16c <mrf_read_long>
 338:	89 93       	st	Y+, r24
        uint8_t frame_length = mrf_read_long(0x300);

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 33a:	cc 15       	cp	r28, r12
 33c:	dd 05       	cpc	r29, r13
 33e:	c1 f7       	brne	.-16     	; 0x330 <__stack+0x31>
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 340:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <rx_info>
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0b 97       	sbiw	r24, 0x0b	; 11
 348:	18 16       	cp	r1, r24
 34a:	19 06       	cpc	r1, r25
 34c:	ac f4       	brge	.+42     	; 0x378 <__stack+0x79>
 34e:	c6 e0       	ldi	r28, 0x06	; 6
 350:	d1 e0       	ldi	r29, 0x01	; 1
 352:	c1 2c       	mov	r12, r1
 354:	d1 2c       	mov	r13, r1
uint8_t * mrf_get_rxbuf(void) {
    return rx_buf;
}

int mrf_rx_datalength(void) {
    return rx_info.frame_length - bytes_nodata;
 356:	05 e0       	ldi	r16, 0x05	; 5
 358:	11 e0       	ldi	r17, 0x01	; 1

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
 35a:	3f ef       	ldi	r19, 0xFF	; 255
 35c:	c3 1a       	sub	r12, r19
 35e:	d3 0a       	sbc	r13, r19
 360:	c6 01       	movw	r24, r12
 362:	87 5f       	subi	r24, 0xF7	; 247
 364:	9c 4f       	sbci	r25, 0xFC	; 252
 366:	02 df       	rcall	.-508    	; 0x16c <mrf_read_long>
 368:	89 93       	st	Y+, r24
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 36a:	f8 01       	movw	r30, r16
 36c:	80 81       	ld	r24, Z
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0b 97       	sbiw	r24, 0x0b	; 11
 372:	c8 16       	cp	r12, r24
 374:	d9 06       	cpc	r13, r25
 376:	8c f3       	brlt	.-30     	; 0x35a <__stack+0x5b>
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
        }

        rx_info.frame_length = frame_length;
 378:	a0 92 05 01 	sts	0x0105, r10	; 0x800105 <rx_info>
        // same as datasheet 0x301 + (m + n + 2) <-- frame_length
        rx_info.lqi = mrf_read_long(0x301 + frame_length);
 37c:	c7 01       	movw	r24, r14
 37e:	8f 5f       	subi	r24, 0xFF	; 255
 380:	9c 4f       	sbci	r25, 0xFC	; 252
 382:	f4 de       	rcall	.-536    	; 0x16c <mrf_read_long>
 384:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rx_info+0x75>
        // same as datasheet 0x301 + (m + n + 3) <-- frame_length + 1
        rx_info.rssi = mrf_read_long(0x301 + frame_length + 1);
 388:	c7 01       	movw	r24, r14
 38a:	8e 5f       	subi	r24, 0xFE	; 254
 38c:	9c 4f       	sbci	r25, 0xFC	; 252
 38e:	ee de       	rcall	.-548    	; 0x16c <mrf_read_long>
 390:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <rx_info+0x76>

        mrf_rx_enable();
 394:	9b df       	rcall	.-202    	; 0x2cc <mrf_rx_enable>
    //    sei();
    }
    if (last_interrupt & MRF_I_TXNIF) {
 396:	b0 fe       	sbrs	r11, 0
 398:	1c c0       	rjmp	.+56     	; 0x3d2 <__stack+0xd3>
        flag_got_tx++;
 39a:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <flag_got_tx>
 39e:	8f 5f       	subi	r24, 0xFF	; 255
 3a0:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <flag_got_tx>
        mrf_reg_TXSTAT = mrf_read_short(MRF_TXSTAT);
 3a4:	84 e2       	ldi	r24, 0x24	; 36
 3a6:	d1 de       	rcall	.-606    	; 0x14a <mrf_read_short>
 3a8:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <mrf_reg_TXSTAT>
        // 1 means it failed, we want 1 to mean it worked.
        tx_info.tx_ok = !(mrf_reg_TXSTAT & 0x3F);
 3ac:	98 2f       	mov	r25, r24
 3ae:	9f 73       	andi	r25, 0x3F	; 63
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <__stack+0xb7>
 3b4:	20 e0       	ldi	r18, 0x00	; 0
 3b6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <tx_info>
 3ba:	20 fb       	bst	r18, 0
 3bc:	90 f9       	bld	r25, 0
        tx_info.retries = mrf_reg_TXSTAT >> 6;
 3be:	82 95       	swap	r24
 3c0:	86 95       	lsr	r24
 3c2:	86 95       	lsr	r24
 3c4:	83 70       	andi	r24, 0x03	; 3
 3c6:	88 0f       	add	r24, r24
 3c8:	99 7f       	andi	r25, 0xF9	; 249
        tx_info.channel_busy = (mrf_reg_TXSTAT & (1 << CCAFAIL));
 3ca:	89 2b       	or	r24, r25
 3cc:	87 7f       	andi	r24, 0xF7	; 247
 3ce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tx_info>
    }
//DROP_ISR_MUTEX;
    isr_lock = 0;
 3d2:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <isr_lock>
}
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	ff 90       	pop	r15
 3e0:	ef 90       	pop	r14
 3e2:	df 90       	pop	r13
 3e4:	cf 90       	pop	r12
 3e6:	bf 90       	pop	r11
 3e8:	af 90       	pop	r10
 3ea:	08 95       	ret

000003ec <spi_setup>:

void spi_setup()
{

	#ifndef SPI_ON_USI
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0); //enables SPI, sets chip as master, sets clock speed to fosc/16
 3ec:	81 e5       	ldi	r24, 0x51	; 81
 3ee:	8c bd       	out	0x2c, r24	; 44
 3f0:	08 95       	ret

000003f2 <spi_transfer_byte>:

/*Transfers a single byte between master and slave*/

void spi_transfer_byte(uint8_t* bout, uint8_t* bin)
{
	DATAREG = *bout;
 3f2:	fc 01       	movw	r30, r24
 3f4:	80 81       	ld	r24, Z
 3f6:	8e bd       	out	0x2e, r24	; 46
	while(! SPI_BYTE_XFER_DONE)
 3f8:	0d b4       	in	r0, 0x2d	; 45
 3fa:	07 fe       	sbrs	r0, 7
 3fc:	fd cf       	rjmp	.-6      	; 0x3f8 <spi_transfer_byte+0x6>
		USICR = usi_clk_lo;
		USICR = usi_clk_hi;
		#endif
	} 
	/*Incoming data out of data register*/
	*bin = DATAREG;
 3fe:	8e b5       	in	r24, 0x2e	; 46
 400:	fb 01       	movw	r30, r22
 402:	80 83       	st	Z, r24
 404:	08 95       	ret

00000406 <spi_transfer_nbytes>:
}

/*Selects the slave (cs)  and transfers n bytes. The input and output buffers must be defined and contain at least n bytes each*/

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
 406:	cf 92       	push	r12
 408:	df 92       	push	r13
 40a:	ef 92       	push	r14
 40c:	ff 92       	push	r15
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	ec 01       	movw	r28, r24
 418:	8b 01       	movw	r16, r22
	
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
 41a:	85 b1       	in	r24, 0x05	; 5
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	6b 01       	movw	r12, r22
 422:	02 c0       	rjmp	.+4      	; 0x428 <spi_transfer_nbytes+0x22>
 424:	cc 0c       	add	r12, r12
 426:	dd 1c       	adc	r13, r13
 428:	2a 95       	dec	r18
 42a:	e2 f7       	brpl	.-8      	; 0x424 <spi_transfer_nbytes+0x1e>
 42c:	9c 2d       	mov	r25, r12
 42e:	90 95       	com	r25
 430:	89 23       	and	r24, r25
 432:	85 b9       	out	0x05, r24	; 5
	while(n)
 434:	44 23       	and	r20, r20
 436:	89 f0       	breq	.+34     	; 0x45a <spi_transfer_nbytes+0x54>
 438:	41 50       	subi	r20, 0x01	; 1
 43a:	e4 2e       	mov	r14, r20
 43c:	f1 2c       	mov	r15, r1
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	e8 1a       	sub	r14, r24
 442:	f8 0a       	sbc	r15, r24
 444:	ec 0e       	add	r14, r28
 446:	fd 1e       	adc	r15, r29
	{
		
		spi_transfer_byte(out,in);    /*transfer byte */
 448:	b8 01       	movw	r22, r16
 44a:	ce 01       	movw	r24, r28
 44c:	d2 df       	rcall	.-92     	; 0x3f2 <spi_transfer_byte>

		/*advance iterators*/
		out = out + 1;
 44e:	21 96       	adiw	r28, 0x01	; 1
		in = in + 1;
 450:	0f 5f       	subi	r16, 0xFF	; 255
 452:	1f 4f       	sbci	r17, 0xFF	; 255

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
	
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
	while(n)
 454:	ec 16       	cp	r14, r28
 456:	fd 06       	cpc	r15, r29
 458:	b9 f7       	brne	.-18     	; 0x448 <spi_transfer_nbytes+0x42>
		/*advance iterators*/
		out = out + 1;
		in = in + 1;
		n = n - 1;
	}
	CS_PORT |= 1<<cs;/*Deselect slave chip*/
 45a:	85 b1       	in	r24, 0x05	; 5
 45c:	c8 2a       	or	r12, r24
 45e:	c5 b8       	out	0x05, r12	; 5
}
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	ff 90       	pop	r15
 46a:	ef 90       	pop	r14
 46c:	df 90       	pop	r13
 46e:	cf 90       	pop	r12
 470:	08 95       	ret

00000472 <_exit>:
 472:	f8 94       	cli

00000474 <__stop_program>:
 474:	ff cf       	rjmp	.-2      	; 0x474 <__stop_program>
