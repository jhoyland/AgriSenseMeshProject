
Mesh-Beta6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000d9c  00000e30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000167  0080010a  0080010a  00000e3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f0c  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd6  00000000  00000000  00004074  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001453  00000000  00000000  00004e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000714  00000000  00000000  000062a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6e  00000000  00000000  000069b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b52  00000000  00000000  00007422  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00008f74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	c3 c3       	rjmp	.+1926   	; 0x78a <__vector_1>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	ec e9       	ldi	r30, 0x9C	; 156
  3c:	fd e0       	ldi	r31, 0x0D	; 13
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	aa 30       	cpi	r26, 0x0A	; 10
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	22 e0       	ldi	r18, 0x02	; 2
  4c:	aa e0       	ldi	r26, 0x0A	; 10
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a1 37       	cpi	r26, 0x71	; 113
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	09 d4       	rcall	.+2066   	; 0x86e <main>
  5c:	9d c6       	rjmp	.+3386   	; 0xd98 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <bytes_to_word>:
uint16_t bytes_to_word(uint8_t* b)
{
    uint16_t hi = (uint16_t) b[0];
    uint16_t lo = (uint16_t) b[1];

    return (hi << 8) | lo;
  60:	fc 01       	movw	r30, r24
  62:	20 81       	ld	r18, Z
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	32 2f       	mov	r19, r18
  68:	22 27       	eor	r18, r18
  6a:	81 81       	ldd	r24, Z+1	; 0x01
}
  6c:	a9 01       	movw	r20, r18
  6e:	48 2b       	or	r20, r24
  70:	ca 01       	movw	r24, r20
  72:	08 95       	ret

00000074 <word_to_bytes>:

void word_to_bytes(uint8_t* b, uint16_t d)
{
    b[0] = (uint8_t)(d >> 8);
  74:	fc 01       	movw	r30, r24
  76:	70 83       	st	Z, r23
    b[1] = (uint8_t)(255 & d);
  78:	61 83       	std	Z+1, r22	; 0x01
  7a:	08 95       	ret

0000007c <handle_tx>:
	running_status &= ~(1<<RU_RX_HANDLE);
	
}

void handle_tx()
{
  7c:	08 95       	ret

0000007e <set_light>:
	
}

void set_light(uint8_t* message)
{
	switch(message[PK_COMMAND_HEADER+PK_CMD_DATA_0])
  7e:	fc 01       	movw	r30, r24
  80:	82 85       	ldd	r24, Z+10	; 0x0a
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	49 f0       	breq	.+18     	; 0x98 <set_light+0x1a>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	61 f0       	breq	.+24     	; 0xa2 <set_light+0x24>
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	69 f4       	brne	.+26     	; 0xa8 <set_light+0x2a>
	{
		case 1:
		PORTD ^= (1<<RED_LIGHT);
  8e:	9b b1       	in	r25, 0x0b	; 11
  90:	80 e2       	ldi	r24, 0x20	; 32
  92:	89 27       	eor	r24, r25
  94:	8b b9       	out	0x0b, r24	; 11
		break;
  96:	08 95       	ret
		case 2:
		PORTD ^= (1<<YELLOW_LIGHT);
  98:	9b b1       	in	r25, 0x0b	; 11
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	89 27       	eor	r24, r25
  9e:	8b b9       	out	0x0b, r24	; 11
		break;
  a0:	08 95       	ret
		case 3:
		PORTD ^= (1<<GREEN_LIGHT);
  a2:	8b b1       	in	r24, 0x0b	; 11
  a4:	80 58       	subi	r24, 0x80	; 128
  a6:	8b b9       	out	0x0b, r24	; 11
  a8:	08 95       	ret

000000aa <set_downstairs_neighbor>:
	node_status = IDLE;
}

void set_downstairs_neighbor(uint8_t* message)
{
	downstairs_neighbor.id = bytes_to_word(&message[PK_SRC_ADDR_HI]);
  aa:	04 96       	adiw	r24, 0x04	; 4
  ac:	d9 df       	rcall	.-78     	; 0x60 <bytes_to_word>
  ae:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <downstairs_neighbor+0x1>
  b2:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <downstairs_neighbor>
	++neighbor_count;
  b6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <neighbor_count>
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <neighbor_count>
  c0:	08 95       	ret

000000c2 <set_last_node>:
	//send_downstream(transmit_data_buffer);	//send it downstream
}

void set_last_node(uint8_t* buff)
{	//executes upon "network complete" confirmation. Assigns the "end of the chain" for all nodes.
	last_node = bytes_to_word(&buff[PK_COMMAND_HEADER+PK_CMD_DATA_0]);
  c2:	0a 96       	adiw	r24, 0x0a	; 10
  c4:	cd df       	rcall	.-102    	; 0x60 <bytes_to_word>
  c6:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <last_node+0x1>
  ca:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <last_node>
  ce:	08 95       	ret

000000d0 <send_message>:
	Pk_Set_Final_Node(transmit_data_buffer,bytes_to_word(&message[PK_SRC_ADDR_HI]));
	send_message(bytes_to_word(&message[PK_SRC_ADDR_HI]), transmit_data_buffer); //return this to the requester
}

void send_message(uint16_t target, uint8_t* buff) //sends a message to the target specified
{
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	8c 01       	movw	r16, r24
  da:	eb 01       	movw	r28, r22
	//note: blink delay is 200ms
	Pk_Set_Packet_Size(buff,PK_SZ_TXRX_BUFFER); //this should be a function that finds the packet size maybe?
  dc:	68 e2       	ldi	r22, 0x28	; 40
  de:	ce 01       	movw	r24, r28
  e0:	ce d5       	rcall	.+2972   	; 0xc7e <Pk_Set_Packet_Size>
	Pk_Set_Target_Node(buff,target);
  e2:	b8 01       	movw	r22, r16
  e4:	ce 01       	movw	r24, r28
  e6:	ce d5       	rcall	.+2972   	; 0xc84 <Pk_Set_Target_Node>
	Pk_Set_Src_Node(buff,THIS_DEVICE);
  e8:	62 e0       	ldi	r22, 0x02	; 2
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	ce 01       	movw	r24, r28
  ee:	e5 d5       	rcall	.+3018   	; 0xcba <Pk_Set_Src_Node>
	BLINK(LIGHT_PORT,YELLOW_LIGHT);
  f0:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	8f e4       	ldi	r24, 0x4F	; 79
  f4:	93 ec       	ldi	r25, 0xC3	; 195
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <send_message+0x26>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <send_message+0x2c>
  fc:	00 00       	nop
  fe:	5e 98       	cbi	0x0b, 6	; 11
 100:	8f e4       	ldi	r24, 0x4F	; 79
 102:	93 ec       	ldi	r25, 0xC3	; 195
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <send_message+0x34>
 108:	00 c0       	rjmp	.+0      	; 0x10a <send_message+0x3a>
 10a:	00 00       	nop
	mrf_send16(target,buff,PK_SZ_TXRX_BUFFER);
 10c:	48 e2       	ldi	r20, 0x28	; 40
 10e:	be 01       	movw	r22, r28
 110:	c8 01       	movw	r24, r16
 112:	4a d4       	rcall	.+2196   	; 0x9a8 <mrf_send16>
	
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	08 95       	ret

0000011e <continue_setup>:
	probe_neighbor_status(node_list[target_index]); //start by searching node 0x0001 -> must wait for a response
	wait_for_response(message);
}

void continue_setup(uint8_t target) //tells the next node to do the setup routine
{
 11e:	ef 92       	push	r14
 120:	0f 93       	push	r16
 122:	cf 93       	push	r28
 124:	c8 2f       	mov	r28, r24
	Pk_Set_Command(transmit_data_buffer,CMD_SETUP,0,0,0,0);
 126:	e1 2c       	mov	r14, r1
 128:	00 e0       	ldi	r16, 0x00	; 0
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	65 e5       	ldi	r22, 0x55	; 85
 130:	75 e4       	ldi	r23, 0x45	; 69
 132:	89 e0       	ldi	r24, 0x09	; 9
 134:	92 e0       	ldi	r25, 0x02	; 2
 136:	ab d5       	rcall	.+2902   	; 0xc8e <Pk_Set_Command>
	send_message(target,transmit_data_buffer);
 138:	69 e0       	ldi	r22, 0x09	; 9
 13a:	72 e0       	ldi	r23, 0x02	; 2
 13c:	8c 2f       	mov	r24, r28
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	c7 df       	rcall	.-114    	; 0xd0 <send_message>
	node_status = IDLE;
 142:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <node_status>
}
 146:	cf 91       	pop	r28
 148:	0f 91       	pop	r16
 14a:	ef 90       	pop	r14
 14c:	08 95       	ret

0000014e <send_directly_to_pi>:
}


void send_directly_to_pi(uint8_t* buff) //unusual case where a major glitch happens?
{
	send_message(pi_address,buff);
 14e:	bc 01       	movw	r22, r24
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 154:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 158:	bb df       	rcall	.-138    	; 0xd0 <send_message>
 15a:	08 95       	ret

0000015c <send_downstream>:
}

void send_downstream(uint8_t* buff)
{   
	// Check if it has a downstairs neighbor
	if(downstairs_neighbor.id != 0x0000)
 15c:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <downstairs_neighbor>
 160:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <downstairs_neighbor+0x1>
 164:	21 15       	cp	r18, r1
 166:	31 05       	cpc	r19, r1
 168:	21 f0       	breq	.+8      	; 0x172 <send_downstream+0x16>
	{
		send_message(downstairs_neighbor.id,buff);
 16a:	bc 01       	movw	r22, r24
 16c:	c9 01       	movw	r24, r18
 16e:	b0 df       	rcall	.-160    	; 0xd0 <send_message>
 170:	08 95       	ret
	}
	else //no downstairs neighbor exists, ERROR
	{
		PORTD |= (1<<GREEN_LIGHT);
 172:	5f 9a       	sbi	0x0b, 7	; 11
		send_directly_to_pi(buff);
 174:	ec df       	rcall	.-40     	; 0x14e <send_directly_to_pi>
 176:	08 95       	ret

00000178 <send_down_to_pi>:
{
	send_message(pi_address,buff);
}

void send_down_to_pi(uint8_t* buff) //sends the message down the nodes until it reaches the pi
{									//preserves the message but indicates to the downstream node that it must continue sending downstream
 178:	fc 01       	movw	r30, r24
	memcpy(transmit_data_buffer,buff,PK_SZ_TXRX_BUFFER);
 17a:	98 e2       	ldi	r25, 0x28	; 40
 17c:	a9 e0       	ldi	r26, 0x09	; 9
 17e:	b2 e0       	ldi	r27, 0x02	; 2
 180:	01 90       	ld	r0, Z+
 182:	0d 92       	st	X+, r0
 184:	9a 95       	dec	r25
 186:	e1 f7       	brne	.-8      	; 0x180 <send_down_to_pi+0x8>
	transmit_data_buffer[PK_COMMAND_HEADER + PK_CMD_DATA_3] = 1; //non-zero bit indicates that the node needs to send it down
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <transmit_data_buffer+0xd>
	send_downstream(transmit_data_buffer);
 18e:	89 e0       	ldi	r24, 0x09	; 9
 190:	92 e0       	ldi	r25, 0x02	; 2
 192:	e4 df       	rcall	.-56     	; 0x15c <send_downstream>
 194:	08 95       	ret

00000196 <get_adc_data>:
		else send_directly_to_pi(buff);
	}
}

void get_adc_data(uint8_t* buff) //this routine is for "individual sampling", it will collect from one ADC channel and send it straight to the pi
{
 196:	ef 92       	push	r14
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	ec 01       	movw	r28, r24
	//gets the ADC value from a channel. Adds it to a buffer
	BLINK(LIGHT_PORT,RED_LIGHT); BLINK(LIGHT_PORT,RED_LIGHT);
 1a2:	5d 9a       	sbi	0x0b, 5	; 11
 1a4:	8f e4       	ldi	r24, 0x4F	; 79
 1a6:	93 ec       	ldi	r25, 0xC3	; 195
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <get_adc_data+0x12>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <get_adc_data+0x18>
 1ae:	00 00       	nop
 1b0:	5d 98       	cbi	0x0b, 5	; 11
 1b2:	af e4       	ldi	r26, 0x4F	; 79
 1b4:	b3 ec       	ldi	r27, 0xC3	; 195
 1b6:	11 97       	sbiw	r26, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <get_adc_data+0x20>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <get_adc_data+0x26>
 1bc:	00 00       	nop
 1be:	5d 9a       	sbi	0x0b, 5	; 11
 1c0:	8f e4       	ldi	r24, 0x4F	; 79
 1c2:	93 ec       	ldi	r25, 0xC3	; 195
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <get_adc_data+0x2e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <get_adc_data+0x34>
 1ca:	00 00       	nop
 1cc:	5d 98       	cbi	0x0b, 5	; 11
 1ce:	af e4       	ldi	r26, 0x4F	; 79
 1d0:	b3 ec       	ldi	r27, 0xC3	; 195
 1d2:	11 97       	sbiw	r26, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <get_adc_data+0x3c>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <get_adc_data+0x42>
 1d8:	00 00       	nop
	memset(transmit_data_buffer,0,PK_SZ_TXRX_BUFFER); //clear the transmit buffer -> avoid repeat data
 1da:	88 e2       	ldi	r24, 0x28	; 40
 1dc:	e9 e0       	ldi	r30, 0x09	; 9
 1de:	f2 e0       	ldi	r31, 0x02	; 2
 1e0:	df 01       	movw	r26, r30
 1e2:	1d 92       	st	X+, r1
 1e4:	8a 95       	dec	r24
 1e6:	e9 f7       	brne	.-6      	; 0x1e2 <get_adc_data+0x4c>
	Pk_Set_Command(transmit_data_buffer,CMD_DATA,0,0,0,0); //need to preserve that this was a data request to the pi
 1e8:	e1 2c       	mov	r14, r1
 1ea:	00 e0       	ldi	r16, 0x00	; 0
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	61 e4       	ldi	r22, 0x41	; 65
 1f2:	74 e4       	ldi	r23, 0x44	; 68
 1f4:	cf 01       	movw	r24, r30
 1f6:	4b d5       	rcall	.+2710   	; 0xc8e <Pk_Set_Command>
	uint8_t channel = buff[PK_COMMAND_HEADER+PK_ADC_CHANNEL];
 1f8:	1e 85       	ldd	r17, Y+14	; 0x0e
	uint8_t location = buff[PK_COMMAND_HEADER+PK_HOP_COUNT];
	word_to_bytes(&transmit_data_buffer[PK_DATA_START+location*4],THIS_DEVICE); //give a prefix to the data with the address
 1fa:	ce 81       	ldd	r28, Y+6	; 0x06
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
 1fe:	cc 0f       	add	r28, r28
 200:	dd 1f       	adc	r29, r29
 202:	cc 0f       	add	r28, r28
 204:	dd 1f       	adc	r29, r29
 206:	62 e0       	ldi	r22, 0x02	; 2
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	ce 01       	movw	r24, r28
 20c:	88 5e       	subi	r24, 0xE8	; 232
 20e:	9d 4f       	sbci	r25, 0xFD	; 253
 210:	31 df       	rcall	.-414    	; 0x74 <word_to_bytes>
	word_to_bytes(&transmit_data_buffer[PK_DATA_START+location*4+2],get_adc_value(channel)); //add the data after the address byte
 212:	81 2f       	mov	r24, r17
 214:	58 d5       	rcall	.+2736   	; 0xcc6 <get_adc_value>
 216:	bc 01       	movw	r22, r24
 218:	ce 01       	movw	r24, r28
 21a:	86 5e       	subi	r24, 0xE6	; 230
 21c:	9d 4f       	sbci	r25, 0xFD	; 253
 21e:	2a df       	rcall	.-428    	; 0x74 <word_to_bytes>
	send_down_to_pi(transmit_data_buffer);
 220:	89 e0       	ldi	r24, 0x09	; 9
 222:	92 e0       	ldi	r25, 0x02	; 2
 224:	a9 df       	rcall	.-174    	; 0x178 <send_down_to_pi>
	
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ef 90       	pop	r14
 230:	08 95       	ret

00000232 <confirm_network_complete>:
		//send_message(downstairs_neighbor.id,buff);
	}
}

void confirm_network_complete() //relays the fact that the network has reached the last node, should reach the pi
{
 232:	ef 92       	push	r14
 234:	0f 93       	push	r16
	node_status = IDLE;
 236:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <node_status>
	Network_Set = true;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <Network_Set>
	Pk_Set_Command(transmit_data_buffer,CMD_NETWORK_COMPLETE,0,0,0,0);
 240:	e1 2c       	mov	r14, r1
 242:	00 e0       	ldi	r16, 0x00	; 0
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	65 e5       	ldi	r22, 0x55	; 85
 24a:	75 e5       	ldi	r23, 0x55	; 85
 24c:	89 e0       	ldi	r24, 0x09	; 9
 24e:	92 e0       	ldi	r25, 0x02	; 2
 250:	1e d5       	rcall	.+2620   	; 0xc8e <Pk_Set_Command>
	word_to_bytes(&transmit_data_buffer[PK_COMMAND_HEADER+PK_CMD_DATA_0],THIS_DEVICE); //writes the address of this node to the CMD_DATA_0 and CMD_DATA_1
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	83 e1       	ldi	r24, 0x13	; 19
 258:	92 e0       	ldi	r25, 0x02	; 2
 25a:	0c df       	rcall	.-488    	; 0x74 <word_to_bytes>
	//used so nodes know what the last node is
	send_down_to_pi(transmit_data_buffer);
 25c:	89 e0       	ldi	r24, 0x09	; 9
 25e:	92 e0       	ldi	r25, 0x02	; 2
 260:	8b df       	rcall	.-234    	; 0x178 <send_down_to_pi>
	//send_downstream(transmit_data_buffer);	//send it downstream
}
 262:	0f 91       	pop	r16
 264:	ef 90       	pop	r14
 266:	08 95       	ret

00000268 <set_upstairs_neighbor>:
	downstairs_neighbor.id = bytes_to_word(&message[PK_SRC_ADDR_HI]);
	++neighbor_count;
}

void set_upstairs_neighbor(uint8_t* message) //this function may prove to be my undoing. Tread carefully
{
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ec 01       	movw	r28, r24
	//if the node has a downstairs neighbor, it needs an upstairs neighbor unless it is the last node
	//the node needs to ask the others in the field if they have a neighbor, and if not, choose that one as an upstairs neighbor
	//if a node received this request, and it has 1 neighbor, it should tell the requester to ask someone else
	//the number of neighbors will be loaded into PK_CMD_DATA_0
	if(message[PK_COMMAND_HEADER+PK_CMD_DATA_0] == 0) //this holds the number of neighbors the probed node has
 272:	8a 85       	ldd	r24, Y+10	; 0x0a
 274:	81 11       	cpse	r24, r1
 276:	28 c0       	rjmp	.+80     	; 0x2c8 <set_upstairs_neighbor+0x60>
	{
		//in this case: node has successfully probed a "neighborless" node
		//the probed node is now an upstairs neighbor
		PORTD &= ~(1<<GREEN_LIGHT); //turn off green light from searching
 278:	5f 98       	cbi	0x0b, 7	; 11
		upstairs_neighbor.id = bytes_to_word(&message[PK_SRC_ADDR_HI]);
 27a:	ce 01       	movw	r24, r28
 27c:	04 96       	adiw	r24, 0x04	; 4
 27e:	f0 de       	rcall	.-544    	; 0x60 <bytes_to_word>
 280:	0e e3       	ldi	r16, 0x3E	; 62
 282:	12 e0       	ldi	r17, 0x02	; 2
 284:	f8 01       	movw	r30, r16
 286:	91 83       	std	Z+1, r25	; 0x01
 288:	80 83       	st	Z, r24
		++neighbor_count; //increase the amount of neighbors. Generally speaking, this should always result in 2.
 28a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <neighbor_count>
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <neighbor_count>
		Network_Set = true;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <Network_Set>
		target_index = 0;
 29a:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <target_index>
		
		hop_count = message[PK_COMMAND_HEADER+PK_HOP_COUNT]; //should return 0 from the pi, 1 from 0x0001, etc.
		++hop_count;
 29e:	6e 81       	ldd	r22, Y+6	; 0x06
 2a0:	6f 5f       	subi	r22, 0xFF	; 255
 2a2:	60 93 3d 02 	sts	0x023D, r22	; 0x80023d <hop_count>
		Pk_Set_Hop_Count(transmit_data_buffer,hop_count);
 2a6:	89 e0       	ldi	r24, 0x09	; 9
 2a8:	92 e0       	ldi	r25, 0x02	; 2
 2aa:	0a d5       	rcall	.+2580   	; 0xcc0 <Pk_Set_Hop_Count>
		//Pk_Add_Data(transmit_data_buffer,THIS_DEVICE,hop_count); //add the address of this buffer to the data.
		word_to_bytes(&transmit_data_buffer[PK_DATA_START+hop_count],THIS_DEVICE);
 2ac:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <hop_count>
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	62 e0       	ldi	r22, 0x02	; 2
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	88 5e       	subi	r24, 0xE8	; 232
 2b8:	9d 4f       	sbci	r25, 0xFD	; 253
 2ba:	dc de       	rcall	.-584    	; 0x74 <word_to_bytes>
		//so the operator knows the nodes available
		continue_setup(upstairs_neighbor.id);
 2bc:	f8 01       	movw	r30, r16
 2be:	80 81       	ld	r24, Z
 2c0:	2e df       	rcall	.-420    	; 0x11e <continue_setup>
		node_status = IDLE;
 2c2:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <node_status>
 2c6:	2f c0       	rjmp	.+94     	; 0x326 <__stack+0x27>
	}
	else 
	{	
		++target_index; //increment through the list
 2c8:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <target_index>
 2cc:	8f 5f       	subi	r24, 0xFF	; 255
 2ce:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <target_index>
		//node status should still be WAITING_FOR_RESPONSE
		//so the waiting loop will continue unless the target_index is above the node count
		if(target_index > node_count) //we have exceeded the number of nodes available without finding a free node
 2d2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <node_count>
 2d6:	98 17       	cp	r25, r24
 2d8:	30 f5       	brcc	.+76     	; 0x326 <__stack+0x27>
		{
			//this node is the last node, relay that info back to the pi
			upstairs_neighbor.id = 0x9999; //no upstairs neighbor
 2da:	89 e9       	ldi	r24, 0x99	; 153
 2dc:	99 e9       	ldi	r25, 0x99	; 153
 2de:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <upstairs_neighbor+0x1>
 2e2:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <upstairs_neighbor>
			hop_count = message[PK_COMMAND_HEADER+PK_HOP_COUNT];
			++hop_count;
 2e6:	6e 81       	ldd	r22, Y+6	; 0x06
 2e8:	6f 5f       	subi	r22, 0xFF	; 255
 2ea:	60 93 3d 02 	sts	0x023D, r22	; 0x80023d <hop_count>
			Pk_Set_Hop_Count(transmit_data_buffer,hop_count); //set the new hop count in this device
 2ee:	89 e0       	ldi	r24, 0x09	; 9
 2f0:	92 e0       	ldi	r25, 0x02	; 2
 2f2:	e6 d4       	rcall	.+2508   	; 0xcc0 <Pk_Set_Hop_Count>
			word_to_bytes(&transmit_data_buffer[PK_DATA_START+hop_count+2],THIS_DEVICE);
 2f4:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <hop_count>
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	62 e0       	ldi	r22, 0x02	; 2
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	86 5e       	subi	r24, 0xE6	; 230
 300:	9d 4f       	sbci	r25, 0xFD	; 253
 302:	b8 de       	rcall	.-656    	; 0x74 <word_to_bytes>
			//Pk_Add_Data(transmit_data_buffer,THIS_DEVICE,hop_count);
			++neighbor_count;
 304:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <neighbor_count>
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <neighbor_count>
			last_node = THIS_DEVICE;
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <last_node+0x1>
 316:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <last_node>
			target_index = 0;
 31a:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <target_index>
			Network_Set=true;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <Network_Set>
			confirm_network_complete();
 324:	86 df       	rcall	.-244    	; 0x232 <confirm_network_complete>
		}
	}
}
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	08 95       	ret

00000330 <send_upstream>:
	}

}

void send_upstream(uint8_t* buff)
{
 330:	ef 92       	push	r14
 332:	0f 93       	push	r16
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	ec 01       	movw	r28, r24
	if(upstairs_neighbor.id != 0x9999) //0x9999 means this is the last node
 33a:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <upstairs_neighbor>
 33e:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <upstairs_neighbor+0x1>
 342:	89 39       	cpi	r24, 0x99	; 153
 344:	29 e9       	ldi	r18, 0x99	; 153
 346:	92 07       	cpc	r25, r18
 348:	19 f0       	breq	.+6      	; 0x350 <send_upstream+0x20>
	{
		send_message(upstairs_neighbor.id,buff);
 34a:	be 01       	movw	r22, r28
 34c:	c1 de       	rcall	.-638    	; 0xd0 <send_message>
 34e:	0f c0       	rjmp	.+30     	; 0x36e <send_upstream+0x3e>
	}
	else
	{
		Pk_Set_Command(buff,bytes_to_word(&buff[PK_COMMAND_HEADER + PK_CMD_HI]),0,0,0,9); //add a bit to indicate an error has ocurred
 350:	ce 01       	movw	r24, r28
 352:	08 96       	adiw	r24, 0x08	; 8
 354:	85 de       	rcall	.-758    	; 0x60 <bytes_to_word>
 356:	0f 2e       	mov	r0, r31
 358:	f9 e0       	ldi	r31, 0x09	; 9
 35a:	ef 2e       	mov	r14, r31
 35c:	f0 2d       	mov	r31, r0
 35e:	00 e0       	ldi	r16, 0x00	; 0
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	bc 01       	movw	r22, r24
 366:	ce 01       	movw	r24, r28
 368:	92 d4       	rcall	.+2340   	; 0xc8e <Pk_Set_Command>
		send_down_to_pi(buff);
 36a:	ce 01       	movw	r24, r28
 36c:	05 df       	rcall	.-502    	; 0x178 <send_down_to_pi>
		//send_message(downstairs_neighbor.id,buff);
	}
}
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	0f 91       	pop	r16
 374:	ef 90       	pop	r14
 376:	08 95       	ret

00000378 <collect_data>:




void collect_data(uint8_t* buff) 
{
 378:	df 92       	push	r13
 37a:	ef 92       	push	r14
 37c:	ff 92       	push	r15
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	ec 01       	movw	r28, r24
	memcpy(transmit_data_buffer,buff,PK_SZ_TXRX_BUFFER); //make sure the previous node's data is put in the transmit buffer
 388:	88 e2       	ldi	r24, 0x28	; 40
 38a:	fe 01       	movw	r30, r28
 38c:	a9 e0       	ldi	r26, 0x09	; 9
 38e:	b2 e0       	ldi	r27, 0x02	; 2
 390:	01 90       	ld	r0, Z+
 392:	0d 92       	st	X+, r0
 394:	8a 95       	dec	r24
 396:	e1 f7       	brne	.-8      	; 0x390 <collect_data+0x18>
	//with the first 16 bytes taken up by addressing and command bits, that leaves 111 bytes to use
	//each data point takes 2 bytes, preceded by an address (2 more bytes) to identify who it's from
	//this leaves a possibility of ~28 nodes with 1 sensor in a chain
	//with 40 sized buffer we can have 6 nodes with 1 sensor in a chain
	
	uint8_t channel = buff[PK_COMMAND_HEADER+PK_ADC_CHANNEL]; //which sensor to look at
 398:	1e 85       	ldd	r17, Y+14	; 0x0e
	//uint8_t location;// = buff[PK_COMMAND_HEADER+PK_HOP_COUNT]; //where this data is going
	
	if(bytes_to_word(&buff[PK_SRC_ADDR_HI]) == pi_address) hop_count = 0; //reset hop counter if this request came from the pi
 39a:	ce 01       	movw	r24, r28
 39c:	04 96       	adiw	r24, 0x04	; 4
 39e:	60 de       	rcall	.-832    	; 0x60 <bytes_to_word>
 3a0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 3a4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 3a8:	82 17       	cp	r24, r18
 3aa:	93 07       	cpc	r25, r19
 3ac:	19 f4       	brne	.+6      	; 0x3b4 <collect_data+0x3c>
 3ae:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <hop_count>
 3b2:	18 c0       	rjmp	.+48     	; 0x3e4 <collect_data+0x6c>
	else hop_count = buff[PK_COMMAND_HEADER+PK_HOP_COUNT];
 3b4:	8e 81       	ldd	r24, Y+6	; 0x06
 3b6:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <hop_count>

	//if the location is too close to the end of the packet size, this node is going to be the node that has to return data before re-starting
	//the collection
	if(hop_count*4+PK_DATA_START+4 > PK_SZ_TXRX_BUFFER) //size of the buffer, should be 127 bits. 2 is the addressing preface bits. 3 is the space an ADC value takes up
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	43 96       	adiw	r24, 0x13	; 19
 3c6:	89 97       	sbiw	r24, 0x29	; 41
 3c8:	6c f0       	brlt	.+26     	; 0x3e4 <collect_data+0x6c>
	{
	PORTD |= (1<<GREEN_LIGHT);
 3ca:	5f 9a       	sbi	0x0b, 7	; 11
	Pk_Set_Command(buff,CMD_TO_PI,CMD_MORE_DATA,buff[PK_DEST_ADDR_HI],buff[PK_DEST_ADDR_LO],1); //let the pi know there's more data to be collected
 3cc:	ee 24       	eor	r14, r14
 3ce:	e3 94       	inc	r14
 3d0:	09 81       	ldd	r16, Y+1	; 0x01
 3d2:	28 81       	ld	r18, Y
 3d4:	4f ef       	ldi	r20, 0xFF	; 255
 3d6:	6e ec       	ldi	r22, 0xCE	; 206
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	ce 01       	movw	r24, r28
 3dc:	58 d4       	rcall	.+2224   	; 0xc8e <Pk_Set_Command>
	//also places the address of this node in the command header
	send_down_to_pi(buff); //return the buffer that has been received down to the pi.
 3de:	ce 01       	movw	r24, r28
 3e0:	cb de       	rcall	.-618    	; 0x178 <send_down_to_pi>
 3e2:	41 c0       	rjmp	.+130    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	}
	else
	{
		PORTD &= ~(1<<GREEN_LIGHT); //turn off green light if it was set earlier
 3e4:	5f 98       	cbi	0x0b, 7	; 11
		Pk_Set_Command(transmit_data_buffer,bytes_to_word(&buff[PK_COMMAND_HEADER+PK_CMD_HI]),buff[PK_COMMAND_HEADER+PK_CMD_DATA_0],buff[PK_COMMAND_HEADER+PK_CMD_DATA_1],buff[PK_COMMAND_HEADER+PK_CMD_DATA_2],buff[PK_COMMAND_HEADER+PK_CMD_DATA_3]);
 3e6:	ed 84       	ldd	r14, Y+13	; 0x0d
 3e8:	0c 85       	ldd	r16, Y+12	; 0x0c
 3ea:	db 84       	ldd	r13, Y+11	; 0x0b
 3ec:	fa 84       	ldd	r15, Y+10	; 0x0a
 3ee:	ce 01       	movw	r24, r28
 3f0:	08 96       	adiw	r24, 0x08	; 8
 3f2:	36 de       	rcall	.-916    	; 0x60 <bytes_to_word>
 3f4:	2d 2d       	mov	r18, r13
 3f6:	4f 2d       	mov	r20, r15
 3f8:	bc 01       	movw	r22, r24
 3fa:	89 e0       	ldi	r24, 0x09	; 9
 3fc:	92 e0       	ldi	r25, 0x02	; 2
 3fe:	47 d4       	rcall	.+2190   	; 0xc8e <Pk_Set_Command>
		//need to repeat the command into the buffer so if it's sent upstream the node above knows to do this
		
		//ACQUIRE DATA
		word_to_bytes(&transmit_data_buffer[PK_DATA_START+(hop_count*4)],THIS_DEVICE); //loading data into the correct position
 400:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <hop_count>
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	62 e0       	ldi	r22, 0x02	; 2
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	88 5e       	subi	r24, 0xE8	; 232
 414:	9d 4f       	sbci	r25, 0xFD	; 253
 416:	2e de       	rcall	.-932    	; 0x74 <word_to_bytes>
		word_to_bytes(&transmit_data_buffer[PK_DATA_START+(hop_count*4)+2],get_adc_value(channel));
 418:	81 2f       	mov	r24, r17
 41a:	55 d4       	rcall	.+2218   	; 0xcc6 <get_adc_value>
 41c:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <hop_count>
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	22 0f       	add	r18, r18
 424:	33 1f       	adc	r19, r19
 426:	22 0f       	add	r18, r18
 428:	33 1f       	adc	r19, r19
 42a:	bc 01       	movw	r22, r24
 42c:	c9 01       	movw	r24, r18
 42e:	86 5e       	subi	r24, 0xE6	; 230
 430:	9d 4f       	sbci	r25, 0xFD	; 253
 432:	20 de       	rcall	.-960    	; 0x74 <word_to_bytes>
		
		++hop_count; //so next node will put data next in sequence
 434:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <hop_count>
 438:	6f 5f       	subi	r22, 0xFF	; 255
 43a:	60 93 3d 02 	sts	0x023D, r22	; 0x80023d <hop_count>
		Pk_Set_Hop_Count(transmit_data_buffer,hop_count);
 43e:	89 e0       	ldi	r24, 0x09	; 9
 440:	92 e0       	ldi	r25, 0x02	; 2
 442:	3e d4       	rcall	.+2172   	; 0xcc0 <Pk_Set_Hop_Count>
		transmit_data_buffer[PK_COMMAND_HEADER+PK_HOP_COUNT] = hop_count; //making sure??
 444:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <hop_count>
 448:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <transmit_data_buffer+0x6>
		
		if(THIS_DEVICE != last_node) 
 44c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <last_node>
 450:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <last_node+0x1>
 454:	02 97       	sbiw	r24, 0x02	; 2
 456:	21 f0       	breq	.+8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		{
			//send_directly_to_pi(transmit_data_buffer);
			send_upstream(transmit_data_buffer);
 458:	89 e0       	ldi	r24, 0x09	; 9
 45a:	92 e0       	ldi	r25, 0x02	; 2
 45c:	69 df       	rcall	.-302    	; 0x330 <send_upstream>
 45e:	03 c0       	rjmp	.+6      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
		}
		//data acquisition complete when we reach the last node
		else if(THIS_DEVICE == last_node) 
		{
			send_down_to_pi(transmit_data_buffer);
 460:	89 e0       	ldi	r24, 0x09	; 9
 462:	92 e0       	ldi	r25, 0x02	; 2
 464:	89 de       	rcall	.-750    	; 0x178 <send_down_to_pi>
		}
		//memset(transmit_data_buffer,0,PK_SZ_TXRX_BUFFER);
		else send_directly_to_pi(buff);
	}
}
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	ff 90       	pop	r15
 470:	ef 90       	pop	r14
 472:	df 90       	pop	r13
 474:	08 95       	ret

00000476 <probe_neighbor_status>:
void set_last_node(uint8_t* buff)
{	//executes upon "network complete" confirmation. Assigns the "end of the chain" for all nodes.
	last_node = bytes_to_word(&buff[PK_COMMAND_HEADER+PK_CMD_DATA_0]);
}
void probe_neighbor_status(uint16_t target)  //sends a request to see how many neighbors a node has during setup
{
 476:	ef 92       	push	r14
 478:	0f 93       	push	r16
	//TODO: This only works during a network setup first routine.
	if(target == THIS_DEVICE) target = node_list[++target_index]; //to avoid possibly sending a message to itself. Unsure if possible
 47a:	02 97       	sbiw	r24, 0x02	; 2
 47c:	29 f4       	brne	.+10     	; 0x488 <probe_neighbor_status+0x12>
 47e:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <target_index>
 482:	8f 5f       	subi	r24, 0xFF	; 255
 484:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <target_index>
	Pk_Set_Final_Node(transmit_data_buffer,node_list[target_index]);
 488:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <target_index>
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	ee 0f       	add	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	ed 5f       	subi	r30, 0xFD	; 253
 494:	fe 4f       	sbci	r31, 0xFE	; 254
 496:	60 81       	ld	r22, Z
 498:	71 81       	ldd	r23, Z+1	; 0x01
 49a:	89 e0       	ldi	r24, 0x09	; 9
 49c:	92 e0       	ldi	r25, 0x02	; 2
 49e:	f4 d3       	rcall	.+2024   	; 0xc88 <Pk_Set_Final_Node>
	//Pk_Set_Data_Direction(transmit_data_buffer,0);
	Pk_Set_Command(transmit_data_buffer,CMD_PROBE_NEIGHBORS,0,0,0,0);
 4a0:	e1 2c       	mov	r14, r1
 4a2:	00 e0       	ldi	r16, 0x00	; 0
 4a4:	20 e0       	ldi	r18, 0x00	; 0
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	62 e4       	ldi	r22, 0x42	; 66
 4aa:	72 e4       	ldi	r23, 0x42	; 66
 4ac:	89 e0       	ldi	r24, 0x09	; 9
 4ae:	92 e0       	ldi	r25, 0x02	; 2
 4b0:	ee d3       	rcall	.+2012   	; 0xc8e <Pk_Set_Command>
	send_message(node_list[target_index],transmit_data_buffer);
 4b2:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <target_index>
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	ee 0f       	add	r30, r30
 4ba:	ff 1f       	adc	r31, r31
 4bc:	ed 5f       	subi	r30, 0xFD	; 253
 4be:	fe 4f       	sbci	r31, 0xFE	; 254
 4c0:	69 e0       	ldi	r22, 0x09	; 9
 4c2:	72 e0       	ldi	r23, 0x02	; 2
 4c4:	80 81       	ld	r24, Z
 4c6:	91 81       	ldd	r25, Z+1	; 0x01
 4c8:	03 de       	rcall	.-1018   	; 0xd0 <send_message>
}
 4ca:	0f 91       	pop	r16
 4cc:	ef 90       	pop	r14
 4ce:	08 95       	ret

000004d0 <wait_for_response>:
	}
}


void wait_for_response(uint8_t * message)
{
 4d0:	cf 92       	push	r12
 4d2:	df 92       	push	r13
 4d4:	ef 92       	push	r14
 4d6:	ff 92       	push	r15
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	6c 01       	movw	r12, r24
	//TODO: Find out if receiving a message ensures a second message is not sent
	//this function waits for a response with a timer. If the time has passed and a message has not been received, the next node is searched
	//this is needed because the first message a node receives upon a reboot is thrown out
	//also controls for possibly randomly dropped messages
	node_status = WAITING_FOR_RESPONSE; //change the node status
 4e2:	82 e0       	ldi	r24, 0x02	; 2
 4e4:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <node_status>
	PORTD |= (1<<GREEN_LIGHT);
 4e8:	5f 9a       	sbi	0x0b, 7	; 11
	uint8_t overflow_counter = 0;
	uint8_t repeat_counter = 0;
	PRR |= (0<<PRTWI); //write 1 to the PRTWI bit on PRR (power reduction register) to ensure clock is running: Should default to 0. This is just in case?
 4ea:	e4 e6       	ldi	r30, 0x64	; 100
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	80 83       	st	Z, r24
	TCCR0A |= (1<<CTC0); //set CTC bit (clear timer compare)
 4f2:	85 b5       	in	r24, 0x25	; 37
 4f4:	88 60       	ori	r24, 0x08	; 8
 4f6:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1<<CS02) | (1<< CS00); //clock select 1024 prescaler
 4f8:	85 b5       	in	r24, 0x25	; 37
 4fa:	85 60       	ori	r24, 0x05	; 5
 4fc:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0; //set the 8 bit timer to 0
 4fe:	16 bc       	out	0x26, r1	; 38
	while(node_status == WAITING_FOR_RESPONSE)
	{
		//mrf_check_flags(&handle_rx,&handle_tx);		
		while((TIFR0 & 0x01) == 0) mrf_check_flags(&handle_rx,&handle_tx); //repeated action while the overflow hasn't occurred
		TCNT0 = 0; //write 0 to the counter on overflow
		TIFR0 = 0x01; //timer interrupt flag register cleared by writing 1. (this is super important, by the way)
 500:	d1 e0       	ldi	r29, 0x01	; 1
 502:	ed 2e       	mov	r14, r29
						 {
							hop_count = message[PK_COMMAND_HEADER+PK_HOP_COUNT];
							++hop_count;
							Pk_Set_Hop_Count(transmit_data_buffer,hop_count); //ensure hop count is preserved
							Network_Set = true;
							last_node = THIS_DEVICE;
 504:	02 e0       	ldi	r16, 0x02	; 2
 506:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t repeat_counter = 0;
	PRR |= (0<<PRTWI); //write 1 to the PRTWI bit on PRR (power reduction register) to ensure clock is running: Should default to 0. This is just in case?
	TCCR0A |= (1<<CTC0); //set CTC bit (clear timer compare)
	TCCR0A |= (1<<CS02) | (1<< CS00); //clock select 1024 prescaler
	TCNT0 = 0; //set the 8 bit timer to 0
	while(node_status == WAITING_FOR_RESPONSE)
 508:	48 c0       	rjmp	.+144    	; 0x59a <wait_for_response+0xca>
	{
		//mrf_check_flags(&handle_rx,&handle_tx);		
		while((TIFR0 & 0x01) == 0) mrf_check_flags(&handle_rx,&handle_tx); //repeated action while the overflow hasn't occurred
 50a:	6e e3       	ldi	r22, 0x3E	; 62
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	80 e6       	ldi	r24, 0x60	; 96
 510:	93 e0       	ldi	r25, 0x03	; 3
 512:	ff d2       	rcall	.+1534   	; 0xb12 <mrf_check_flags>
 514:	a8 9b       	sbis	0x15, 0	; 21
 516:	f9 cf       	rjmp	.-14     	; 0x50a <wait_for_response+0x3a>
		TCNT0 = 0; //write 0 to the counter on overflow
 518:	16 bc       	out	0x26, r1	; 38
		TIFR0 = 0x01; //timer interrupt flag register cleared by writing 1. (this is super important, by the way)
 51a:	d5 bb       	out	0x15, r29	; 21
 51c:	c1 50       	subi	r28, 0x01	; 1
		++overflow_counter; //increment overflow counter
		//So what happens now? If I get a message that I'm waiting for (the command) this function needs to exit.
		//if I get something else, or nothing at all, the function needs to continue
		if(overflow_counter >= 10 ) //by calculator 39 ~= 10 seconds. Change to 39 for final setup
 51e:	09 f0       	breq	.+2      	; 0x522 <wait_for_response+0x52>
 520:	40 c0       	rjmp	.+128    	; 0x5a2 <wait_for_response+0xd2>
			{
				probe_neighbor_status(node_list[target_index]);
 522:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <target_index>
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	ee 0f       	add	r30, r30
 52a:	ff 1f       	adc	r31, r31
 52c:	ed 5f       	subi	r30, 0xFD	; 253
 52e:	fe 4f       	sbci	r31, 0xFE	; 254
 530:	80 81       	ld	r24, Z
 532:	91 81       	ldd	r25, Z+1	; 0x01
 534:	a0 df       	rcall	.-192    	; 0x476 <probe_neighbor_status>
 536:	fa 94       	dec	r15
				++repeat_counter;
				overflow_counter = 0;
				if(repeat_counter >= 2)
 538:	f1 10       	cpse	r15, r1
 53a:	32 c0       	rjmp	.+100    	; 0x5a0 <wait_for_response+0xd0>
					{
						BLINK(LIGHT_PORT,RED_LIGHT);
 53c:	5d 9a       	sbi	0x0b, 5	; 11
 53e:	8f e4       	ldi	r24, 0x4F	; 79
 540:	93 ec       	ldi	r25, 0xC3	; 195
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <wait_for_response+0x72>
 546:	00 c0       	rjmp	.+0      	; 0x548 <wait_for_response+0x78>
 548:	00 00       	nop
 54a:	5d 98       	cbi	0x0b, 5	; 11
 54c:	ef e4       	ldi	r30, 0x4F	; 79
 54e:	f3 ec       	ldi	r31, 0xC3	; 195
 550:	31 97       	sbiw	r30, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <wait_for_response+0x80>
 554:	00 c0       	rjmp	.+0      	; 0x556 <wait_for_response+0x86>
 556:	00 00       	nop
						++target_index;
 558:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <target_index>
 55c:	ef 5f       	subi	r30, 0xFF	; 255
 55e:	e0 93 39 02 	sts	0x0239, r30	; 0x800239 <target_index>
						repeat_counter = 0;
						overflow_counter = 0;
						if(target_index > node_count)
 562:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <node_count>
 566:	8e 17       	cp	r24, r30
 568:	80 f4       	brcc	.+32     	; 0x58a <wait_for_response+0xba>
						 {
							hop_count = message[PK_COMMAND_HEADER+PK_HOP_COUNT];
							++hop_count;
 56a:	f6 01       	movw	r30, r12
 56c:	66 81       	ldd	r22, Z+6	; 0x06
 56e:	6f 5f       	subi	r22, 0xFF	; 255
 570:	60 93 3d 02 	sts	0x023D, r22	; 0x80023d <hop_count>
							Pk_Set_Hop_Count(transmit_data_buffer,hop_count); //ensure hop count is preserved
 574:	89 e0       	ldi	r24, 0x09	; 9
 576:	92 e0       	ldi	r25, 0x02	; 2
 578:	a3 d3       	rcall	.+1862   	; 0xcc0 <Pk_Set_Hop_Count>
							Network_Set = true;
 57a:	e0 92 33 02 	sts	0x0233, r14	; 0x800233 <Network_Set>
							last_node = THIS_DEVICE;
 57e:	10 93 32 02 	sts	0x0232, r17	; 0x800232 <last_node+0x1>
 582:	00 93 31 02 	sts	0x0231, r16	; 0x800231 <last_node>
							confirm_network_complete();
 586:	55 de       	rcall	.-854    	; 0x232 <confirm_network_complete>
 588:	08 c0       	rjmp	.+16     	; 0x59a <wait_for_response+0xca>
							}
						else probe_neighbor_status(node_list[target_index]);
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	ee 0f       	add	r30, r30
 58e:	ff 1f       	adc	r31, r31
 590:	ed 5f       	subi	r30, 0xFD	; 253
 592:	fe 4f       	sbci	r31, 0xFE	; 254
 594:	80 81       	ld	r24, Z
 596:	91 81       	ldd	r25, Z+1	; 0x01
 598:	6e df       	rcall	.-292    	; 0x476 <probe_neighbor_status>
	}
}


void wait_for_response(uint8_t * message)
{
 59a:	68 94       	set
 59c:	ff 24       	eor	r15, r15
 59e:	f1 f8       	bld	r15, 1
 5a0:	ca e0       	ldi	r28, 0x0A	; 10
	uint8_t repeat_counter = 0;
	PRR |= (0<<PRTWI); //write 1 to the PRTWI bit on PRR (power reduction register) to ensure clock is running: Should default to 0. This is just in case?
	TCCR0A |= (1<<CTC0); //set CTC bit (clear timer compare)
	TCCR0A |= (1<<CS02) | (1<< CS00); //clock select 1024 prescaler
	TCNT0 = 0; //set the 8 bit timer to 0
	while(node_status == WAITING_FOR_RESPONSE)
 5a2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <node_status>
 5a6:	82 30       	cpi	r24, 0x02	; 2
 5a8:	19 f4       	brne	.+6      	; 0x5b0 <wait_for_response+0xe0>
	{
		//mrf_check_flags(&handle_rx,&handle_tx);		
		while((TIFR0 & 0x01) == 0) mrf_check_flags(&handle_rx,&handle_tx); //repeated action while the overflow hasn't occurred
 5aa:	a8 9b       	sbis	0x15, 0	; 21
 5ac:	ae cf       	rjmp	.-164    	; 0x50a <wait_for_response+0x3a>
 5ae:	b4 cf       	rjmp	.-152    	; 0x518 <wait_for_response+0x48>
						else probe_neighbor_status(node_list[target_index]);
					}
				}
		}
	
}
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	1f 91       	pop	r17
 5b6:	0f 91       	pop	r16
 5b8:	ff 90       	pop	r15
 5ba:	ef 90       	pop	r14
 5bc:	df 90       	pop	r13
 5be:	cf 90       	pop	r12
 5c0:	08 95       	ret

000005c2 <setup_network>:
		break;
	}
}

void setup_network(uint8_t* message)
{	
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	ec 01       	movw	r28, r24
	//this function should only enter once, when the node is told to setup the network initially
	//TODO: Have a case where the network is already setup
	node_status = SETTING_UP; //flag for set up routine
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <node_status>
	neighbor_count = 0; //default it to 0 -> when setup routine is entered
 5ce:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <neighbor_count>
	target_index = 0; //default, allows to iterate through the whole list
 5d2:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <target_index>
	Network_Set = false;
 5d6:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <Network_Set>
	//upstairs_neighbor.id = 0x0000; //default
	//downstairs_neighbor.id = 0x0000; //default
	set_downstairs_neighbor(message); //set the downstairs node for this (node that messages will be relayed to) as the person who requested this
 5da:	ce 01       	movw	r24, r28
 5dc:	66 dd       	rcall	.-1332   	; 0xaa <set_downstairs_neighbor>
	probe_neighbor_status(node_list[target_index]); //start by searching node 0x0001 -> must wait for a response
 5de:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <target_index>
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	ee 0f       	add	r30, r30
 5e6:	ff 1f       	adc	r31, r31
 5e8:	ed 5f       	subi	r30, 0xFD	; 253
 5ea:	fe 4f       	sbci	r31, 0xFE	; 254
 5ec:	80 81       	ld	r24, Z
 5ee:	91 81       	ldd	r25, Z+1	; 0x01
 5f0:	42 df       	rcall	.-380    	; 0x476 <probe_neighbor_status>
	wait_for_response(message);
 5f2:	ce 01       	movw	r24, r28
 5f4:	6d df       	rcall	.-294    	; 0x4d0 <wait_for_response>
}
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	08 95       	ret

000005fc <confirm_neighbor>:
	//Pk_Set_Data_Direction(transmit_data_buffer,0);
	Pk_Set_Command(transmit_data_buffer,CMD_PROBE_NEIGHBORS,0,0,0,0);
	send_message(node_list[target_index],transmit_data_buffer);
}
void confirm_neighbor(uint8_t* message) //responds to a request for the number of neighbors
{
 5fc:	ef 92       	push	r14
 5fe:	0f 93       	push	r16
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	ec 01       	movw	r28, r24
	Pk_Set_Command(transmit_data_buffer,CMD_NEIGHBOR_COUNT,neighbor_count,0,0,0);
 606:	e1 2c       	mov	r14, r1
 608:	00 e0       	ldi	r16, 0x00	; 0
 60a:	20 e0       	ldi	r18, 0x00	; 0
 60c:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <neighbor_count>
 610:	64 e4       	ldi	r22, 0x44	; 68
 612:	74 e4       	ldi	r23, 0x44	; 68
 614:	89 e0       	ldi	r24, 0x09	; 9
 616:	92 e0       	ldi	r25, 0x02	; 2
 618:	3a d3       	rcall	.+1652   	; 0xc8e <Pk_Set_Command>
	Pk_Set_Final_Node(transmit_data_buffer,bytes_to_word(&message[PK_SRC_ADDR_HI]));
 61a:	24 96       	adiw	r28, 0x04	; 4
 61c:	ce 01       	movw	r24, r28
 61e:	20 dd       	rcall	.-1472   	; 0x60 <bytes_to_word>
 620:	bc 01       	movw	r22, r24
 622:	89 e0       	ldi	r24, 0x09	; 9
 624:	92 e0       	ldi	r25, 0x02	; 2
 626:	30 d3       	rcall	.+1632   	; 0xc88 <Pk_Set_Final_Node>
	send_message(bytes_to_word(&message[PK_SRC_ADDR_HI]), transmit_data_buffer); //return this to the requester
 628:	ce 01       	movw	r24, r28
 62a:	1a dd       	rcall	.-1484   	; 0x60 <bytes_to_word>
 62c:	69 e0       	ldi	r22, 0x09	; 9
 62e:	72 e0       	ldi	r23, 0x02	; 2
 630:	4f dd       	rcall	.-1378   	; 0xd0 <send_message>
}
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	0f 91       	pop	r16
 638:	ef 90       	pop	r14
 63a:	08 95       	ret

0000063c <COMMAND_HANDLER>:
	//doesn't really need to do anything upon sending a packet... yet...?
}


void COMMAND_HANDLER(uint8_t* message) //Looks at the command bits and decides what to do with the given command
{	
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	ec 01       	movw	r28, r24
	switch(bytes_to_word(&message[PK_COMMAND_HEADER+PK_CMD_HI])) //look at the command given to the node
 642:	08 96       	adiw	r24, 0x08	; 8
 644:	0d dd       	rcall	.-1510   	; 0x60 <bytes_to_word>
 646:	81 34       	cpi	r24, 0x41	; 65
 648:	24 e4       	ldi	r18, 0x44	; 68
 64a:	92 07       	cpc	r25, r18
 64c:	e9 f0       	breq	.+58     	; 0x688 <COMMAND_HANDLER+0x4c>
 64e:	58 f4       	brcc	.+22     	; 0x666 <COMMAND_HANDLER+0x2a>
 650:	8d 3d       	cpi	r24, 0xDD	; 221
 652:	91 05       	cpc	r25, r1
 654:	81 f1       	breq	.+96     	; 0x6b6 <COMMAND_HANDLER+0x7a>
 656:	82 34       	cpi	r24, 0x42	; 66
 658:	22 e4       	ldi	r18, 0x42	; 66
 65a:	92 07       	cpc	r25, r18
 65c:	f1 f0       	breq	.+60     	; 0x69a <COMMAND_HANDLER+0x5e>
 65e:	8e 3c       	cpi	r24, 0xCE	; 206
 660:	91 05       	cpc	r25, r1
 662:	59 f5       	brne	.+86     	; 0x6ba <COMMAND_HANDLER+0x7e>
 664:	25 c0       	rjmp	.+74     	; 0x6b0 <COMMAND_HANDLER+0x74>
 666:	84 34       	cpi	r24, 0x44	; 68
 668:	24 e4       	ldi	r18, 0x44	; 68
 66a:	92 07       	cpc	r25, r18
 66c:	c9 f0       	breq	.+50     	; 0x6a0 <COMMAND_HANDLER+0x64>
 66e:	20 f4       	brcc	.+8      	; 0x678 <COMMAND_HANDLER+0x3c>
 670:	82 34       	cpi	r24, 0x42	; 66
 672:	94 44       	sbci	r25, 0x44	; 68
 674:	61 f0       	breq	.+24     	; 0x68e <COMMAND_HANDLER+0x52>
 676:	21 c0       	rjmp	.+66     	; 0x6ba <COMMAND_HANDLER+0x7e>
 678:	85 35       	cpi	r24, 0x55	; 85
 67a:	25 e4       	ldi	r18, 0x45	; 69
 67c:	92 07       	cpc	r25, r18
 67e:	51 f0       	breq	.+20     	; 0x694 <COMMAND_HANDLER+0x58>
 680:	85 35       	cpi	r24, 0x55	; 85
 682:	95 45       	sbci	r25, 0x55	; 85
 684:	81 f0       	breq	.+32     	; 0x6a6 <COMMAND_HANDLER+0x6a>
 686:	19 c0       	rjmp	.+50     	; 0x6ba <COMMAND_HANDLER+0x7e>
	{
		case CMD_DATA:
		get_adc_data(message); //collect data from the required sensor, individual ping
 688:	ce 01       	movw	r24, r28
 68a:	85 dd       	rcall	.-1270   	; 0x196 <get_adc_data>
		break;
 68c:	16 c0       	rjmp	.+44     	; 0x6ba <COMMAND_HANDLER+0x7e>
		case CMD_ALL_DATA: //this routine is a chain from all the nodes
		collect_data(message);
 68e:	ce 01       	movw	r24, r28
 690:	73 de       	rcall	.-794    	; 0x378 <collect_data>
		break;
 692:	13 c0       	rjmp	.+38     	; 0x6ba <COMMAND_HANDLER+0x7e>
		case CMD_SETUP: //complete?!
		setup_network(message);//node is now in network setup mode
 694:	ce 01       	movw	r24, r28
 696:	95 df       	rcall	.-214    	; 0x5c2 <setup_network>
		break;
 698:	10 c0       	rjmp	.+32     	; 0x6ba <COMMAND_HANDLER+0x7e>
		case CMD_PROBE_NEIGHBORS: //node has received a request to return the number (and ID?) of its neighbors ->complete
		confirm_neighbor(message);
 69a:	ce 01       	movw	r24, r28
 69c:	af df       	rcall	.-162    	; 0x5fc <confirm_neighbor>
		break;
 69e:	0d c0       	rjmp	.+26     	; 0x6ba <COMMAND_HANDLER+0x7e>
		case CMD_NEIGHBOR_COUNT: //has received a response containing the number of neighbors (during a setup routine) -> complete
		set_upstairs_neighbor(message);
 6a0:	ce 01       	movw	r24, r28
 6a2:	e2 dd       	rcall	.-1084   	; 0x268 <set_upstairs_neighbor>
		break;
 6a4:	0a c0       	rjmp	.+20     	; 0x6ba <COMMAND_HANDLER+0x7e>
		case CMD_NETWORK_COMPLETE:
		set_last_node(message);
 6a6:	ce 01       	movw	r24, r28
 6a8:	0c dd       	rcall	.-1512   	; 0xc2 <set_last_node>
		send_down_to_pi(message);//relay the message down that the network is complete. Should go all the way to the pi.
 6aa:	ce 01       	movw	r24, r28
 6ac:	65 dd       	rcall	.-1334   	; 0x178 <send_down_to_pi>
		break;
 6ae:	05 c0       	rjmp	.+10     	; 0x6ba <COMMAND_HANDLER+0x7e>
		case CMD_TO_PI:
		send_down_to_pi(message);
 6b0:	ce 01       	movw	r24, r28
 6b2:	62 dd       	rcall	.-1340   	; 0x178 <send_down_to_pi>
		break;
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <COMMAND_HANDLER+0x7e>
		case CMD_SET_LIGHT:
		set_light(message);
 6b6:	ce 01       	movw	r24, r28
 6b8:	e2 dc       	rcall	.-1596   	; 0x7e <set_light>
		default:
		//command not recognized
		break;	
	}
	
}
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	08 95       	ret

000006c0 <handle_rx>:
struct neighbor upstairs_neighbor; //up towards the end of the line



void handle_rx()
{	
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
	
	memset(received_data_buffer,0,PK_SZ_TXRX_BUFFER);
 6c4:	88 e2       	ldi	r24, 0x28	; 40
 6c6:	e3 e4       	ldi	r30, 0x43	; 67
 6c8:	f2 e0       	ldi	r31, 0x02	; 2
 6ca:	df 01       	movw	r26, r30
 6cc:	1d 92       	st	X+, r1
 6ce:	8a 95       	dec	r24
 6d0:	e9 f7       	brne	.-6      	; 0x6cc <handle_rx+0xc>
	running_status |= (1<<RU_RX_HANDLE);  //MUTEX
 6d2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 6d6:	88 60       	ori	r24, 0x08	; 8
 6d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	memcpy(received_data_buffer,mrf_get_rxdata(),mrf_rx_datalength()); //makes a copy of the rx data to a buffer
 6dc:	34 d2       	rcall	.+1128   	; 0xb46 <mrf_rx_datalength>
 6de:	ec 01       	movw	r28, r24
 6e0:	cb d2       	rcall	.+1430   	; 0xc78 <mrf_get_rxdata>
 6e2:	ae 01       	movw	r20, r28
 6e4:	bc 01       	movw	r22, r24
 6e6:	83 e4       	ldi	r24, 0x43	; 67
 6e8:	92 e0       	ldi	r25, 0x02	; 2
 6ea:	4d d3       	rcall	.+1690   	; 0xd86 <memcpy>
	BLINK(LIGHT_PORT,GREEN_LIGHT);
 6ec:	5f 9a       	sbi	0x0b, 7	; 11
 6ee:	8f e4       	ldi	r24, 0x4F	; 79
 6f0:	93 ec       	ldi	r25, 0xC3	; 195
 6f2:	01 97       	sbiw	r24, 0x01	; 1
 6f4:	f1 f7       	brne	.-4      	; 0x6f2 <handle_rx+0x32>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <handle_rx+0x38>
 6f8:	00 00       	nop
 6fa:	5f 98       	cbi	0x0b, 7	; 11
 6fc:	af e4       	ldi	r26, 0x4F	; 79
 6fe:	b3 ec       	ldi	r27, 0xC3	; 195
 700:	11 97       	sbiw	r26, 0x01	; 1
 702:	f1 f7       	brne	.-4      	; 0x700 <handle_rx+0x40>
 704:	00 c0       	rjmp	.+0      	; 0x706 <handle_rx+0x46>
 706:	00 00       	nop
	
	//if there is no "final node" selected (for individual node targeting) or this is the "final node", execute the command
	if(Network_Set)
 708:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <Network_Set>
 70c:	88 23       	and	r24, r24
 70e:	69 f1       	breq	.+90     	; 0x76a <handle_rx+0xaa>
	{
	if(received_data_buffer[PK_COMMAND_HEADER + PK_CMD_DATA_3] == 1) send_downstream(received_data_buffer); //third data byte being non-zero indicates we are sending messages downstream.
 710:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <received_data_buffer+0xd>
 714:	81 30       	cpi	r24, 0x01	; 1
 716:	21 f4       	brne	.+8      	; 0x720 <handle_rx+0x60>
 718:	83 e4       	ldi	r24, 0x43	; 67
 71a:	92 e0       	ldi	r25, 0x02	; 2
 71c:	1f dd       	rcall	.-1474   	; 0x15c <send_downstream>
 71e:	2d c0       	rjmp	.+90     	; 0x77a <handle_rx+0xba>
	//I really should do something better
	else if((bytes_to_word(&received_data_buffer[PK_FINAL_ADDR_HI]) == 0x0000) || (bytes_to_word(&received_data_buffer[PK_FINAL_ADDR_HI]) == THIS_DEVICE)) 
 720:	85 e4       	ldi	r24, 0x45	; 69
 722:	92 e0       	ldi	r25, 0x02	; 2
 724:	9d dc       	rcall	.-1734   	; 0x60 <bytes_to_word>
 726:	89 2b       	or	r24, r25
 728:	29 f0       	breq	.+10     	; 0x734 <handle_rx+0x74>
 72a:	85 e4       	ldi	r24, 0x45	; 69
 72c:	92 e0       	ldi	r25, 0x02	; 2
 72e:	98 dc       	rcall	.-1744   	; 0x60 <bytes_to_word>
 730:	02 97       	sbiw	r24, 0x02	; 2
 732:	21 f4       	brne	.+8      	; 0x73c <handle_rx+0x7c>
		{
			COMMAND_HANDLER(received_data_buffer);
 734:	83 e4       	ldi	r24, 0x43	; 67
 736:	92 e0       	ldi	r25, 0x02	; 2
 738:	81 df       	rcall	.-254    	; 0x63c <COMMAND_HANDLER>
 73a:	1f c0       	rjmp	.+62     	; 0x77a <handle_rx+0xba>
		}
	//case where there is a node being selected but it is not this one:
	else if(bytes_to_word(&received_data_buffer[PK_FINAL_ADDR_HI]) != THIS_DEVICE)
 73c:	85 e4       	ldi	r24, 0x45	; 69
 73e:	92 e0       	ldi	r25, 0x02	; 2
 740:	8f dc       	rcall	.-1762   	; 0x60 <bytes_to_word>
 742:	02 97       	sbiw	r24, 0x02	; 2
 744:	d1 f0       	breq	.+52     	; 0x77a <handle_rx+0xba>
		{
			BLINK(LIGHT_PORT,GREEN_LIGHT); send_upstream(received_data_buffer);
 746:	5f 9a       	sbi	0x0b, 7	; 11
 748:	8f e4       	ldi	r24, 0x4F	; 79
 74a:	93 ec       	ldi	r25, 0xC3	; 195
 74c:	01 97       	sbiw	r24, 0x01	; 1
 74e:	f1 f7       	brne	.-4      	; 0x74c <handle_rx+0x8c>
 750:	00 c0       	rjmp	.+0      	; 0x752 <handle_rx+0x92>
 752:	00 00       	nop
 754:	5f 98       	cbi	0x0b, 7	; 11
 756:	af e4       	ldi	r26, 0x4F	; 79
 758:	b3 ec       	ldi	r27, 0xC3	; 195
 75a:	11 97       	sbiw	r26, 0x01	; 1
 75c:	f1 f7       	brne	.-4      	; 0x75a <handle_rx+0x9a>
 75e:	00 c0       	rjmp	.+0      	; 0x760 <handle_rx+0xa0>
 760:	00 00       	nop
 762:	83 e4       	ldi	r24, 0x43	; 67
 764:	92 e0       	ldi	r25, 0x02	; 2
 766:	e4 dd       	rcall	.-1080   	; 0x330 <send_upstream>
 768:	08 c0       	rjmp	.+16     	; 0x77a <handle_rx+0xba>
		}
	}
	//if the setup routine has not been completed, but there is a message for this node anyway. Ideally for "setup" case
	else if(bytes_to_word(&received_data_buffer[PK_DEST_ADDR_HI]) == THIS_DEVICE) 
 76a:	83 e4       	ldi	r24, 0x43	; 67
 76c:	92 e0       	ldi	r25, 0x02	; 2
 76e:	78 dc       	rcall	.-1808   	; 0x60 <bytes_to_word>
 770:	02 97       	sbiw	r24, 0x02	; 2
 772:	19 f4       	brne	.+6      	; 0x77a <handle_rx+0xba>
		{
			COMMAND_HANDLER(received_data_buffer);
 774:	83 e4       	ldi	r24, 0x43	; 67
 776:	92 e0       	ldi	r25, 0x02	; 2
 778:	61 df       	rcall	.-318    	; 0x63c <COMMAND_HANDLER>
		}
	//else send_directly_to_pi(received_data_buffer); //unusual case, error
	running_status &= ~(1<<RU_RX_HANDLE);
 77a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 77e:	87 7f       	andi	r24, 0xF7	; 247
 780:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
}
 784:	df 91       	pop	r29
 786:	cf 91       	pop	r28
 788:	08 95       	ret

0000078a <__vector_1>:
	mrf_send16(target,buff,PK_SZ_TXRX_BUFFER);
	
}

ISR(INT0_vect) //for when the MRF interrupts (sending or receiving a message)
{
 78a:	1f 92       	push	r1
 78c:	0f 92       	push	r0
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	0f 92       	push	r0
 792:	11 24       	eor	r1, r1
 794:	2f 93       	push	r18
 796:	3f 93       	push	r19
 798:	4f 93       	push	r20
 79a:	5f 93       	push	r21
 79c:	6f 93       	push	r22
 79e:	7f 93       	push	r23
 7a0:	8f 93       	push	r24
 7a2:	9f 93       	push	r25
 7a4:	af 93       	push	r26
 7a6:	bf 93       	push	r27
 7a8:	ef 93       	push	r30
 7aa:	ff 93       	push	r31
	running_status |= (1<<RU_INTERRUPT);
 7ac:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 7b0:	80 61       	ori	r24, 0x10	; 16
 7b2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	mrf_interrupt_handler();
 7b6:	d4 d1       	rcall	.+936    	; 0xb60 <mrf_interrupt_handler>
	running_status &= ~(1<<RU_INTERRUPT);
 7b8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 7bc:	8f 7e       	andi	r24, 0xEF	; 239
 7be:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 7c2:	ff 91       	pop	r31
 7c4:	ef 91       	pop	r30
 7c6:	bf 91       	pop	r27
 7c8:	af 91       	pop	r26
 7ca:	9f 91       	pop	r25
 7cc:	8f 91       	pop	r24
 7ce:	7f 91       	pop	r23
 7d0:	6f 91       	pop	r22
 7d2:	5f 91       	pop	r21
 7d4:	4f 91       	pop	r20
 7d6:	3f 91       	pop	r19
 7d8:	2f 91       	pop	r18
 7da:	0f 90       	pop	r0
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	0f 90       	pop	r0
 7e0:	1f 90       	pop	r1
 7e2:	18 95       	reti

000007e4 <setup>:


void setup()
{
	//LED setup
	DDRD |= (1 << RED_LIGHT); //set PD7 to output for LED
 7e4:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << YELLOW_LIGHT);
 7e6:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << GREEN_LIGHT);
 7e8:	57 9a       	sbi	0x0a, 7	; 10
	
	//SPI port setup
	PORTB |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<ADC_CS) | (1<<SPI_SS) | (1<<MRF_CS) ; //set these ports to high (required)
 7ea:	85 b1       	in	r24, 0x05	; 5
 7ec:	8c 6e       	ori	r24, 0xEC	; 236
 7ee:	85 b9       	out	0x05, r24	; 5
	DDRB |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<ADC_CS) | (1<<SPI_SS) | (1<<MRF_CS) ;  //set these to output
 7f0:	84 b1       	in	r24, 0x04	; 4
 7f2:	8c 6e       	ori	r24, 0xEC	; 236
 7f4:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<SPI_MISO);	//master in slave out, input on attiny
 7f6:	24 98       	cbi	0x04, 4	; 4
	
	spi_setup();
 7f8:	83 d2       	rcall	.+1286   	; 0xd00 <spi_setup>
	mrf_reset();
 7fa:	45 d0       	rcall	.+138    	; 0x886 <mrf_reset>
	mrf_init();
 7fc:	46 d1       	rcall	.+652    	; 0xa8a <mrf_init>
	
	mrf_set_pan(ASMP_PANID); //set PANID
 7fe:	8e ef       	ldi	r24, 0xFE	; 254
 800:	9a ec       	ldi	r25, 0xCA	; 202
 802:	af d0       	rcall	.+350    	; 0x962 <mrf_set_pan>
	mrf_address16_write(THIS_DEVICE); //set device address -> 16 bit addressing
 804:	82 e0       	ldi	r24, 0x02	; 2
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	b6 d0       	rcall	.+364    	; 0x976 <mrf_address16_write>
	sei(); //starts interrupts, essential to let chip know message is being handled
 80a:	78 94       	sei
	EIMSK |= (1<<INT0);
 80c:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC01);
 80e:	e9 e6       	ldi	r30, 0x69	; 105
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
 814:	82 60       	ori	r24, 0x02	; 2
 816:	80 83       	st	Z, r24
	
	memset(transmit_data_buffer,0,PK_SZ_TXRX_BUFFER); //clear buffer to 0 on reset, possibly not needed
 818:	88 e2       	ldi	r24, 0x28	; 40
 81a:	e9 e0       	ldi	r30, 0x09	; 9
 81c:	f2 e0       	ldi	r31, 0x02	; 2
 81e:	df 01       	movw	r26, r30
 820:	98 2f       	mov	r25, r24
 822:	1d 92       	st	X+, r1
 824:	9a 95       	dec	r25
 826:	e9 f7       	brne	.-6      	; 0x822 <setup+0x3e>
	memset(received_data_buffer,0,PK_SZ_TXRX_BUFFER); //clear buffer to 0 on reset
 828:	e3 e4       	ldi	r30, 0x43	; 67
 82a:	f2 e0       	ldi	r31, 0x02	; 2
 82c:	df 01       	movw	r26, r30
 82e:	1d 92       	st	X+, r1
 830:	8a 95       	dec	r24
 832:	e9 f7       	brne	.-6      	; 0x82e <setup+0x4a>
	
	Network_Set = false; //default to network setup: No down or up neighbor
 834:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <Network_Set>
	node_status = IDLE; //default to idle
 838:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <node_status>
	neighbor_count = 0; //setup resets these values to 0
 83c:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <neighbor_count>
	target_index = 0;
 840:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <target_index>
	last_node = 0x0000;
 844:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <last_node+0x1>
 848:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <last_node>
	hop_count = 0;
 84c:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <hop_count>
	
	BLINK(LIGHT_PORT,GREEN_LIGHT);
 850:	5f 9a       	sbi	0x0b, 7	; 11
 852:	8f e4       	ldi	r24, 0x4F	; 79
 854:	93 ec       	ldi	r25, 0xC3	; 195
 856:	01 97       	sbiw	r24, 0x01	; 1
 858:	f1 f7       	brne	.-4      	; 0x856 <setup+0x72>
 85a:	00 c0       	rjmp	.+0      	; 0x85c <setup+0x78>
 85c:	00 00       	nop
 85e:	5f 98       	cbi	0x0b, 7	; 11
 860:	af e4       	ldi	r26, 0x4F	; 79
 862:	b3 ec       	ldi	r27, 0xC3	; 195
 864:	11 97       	sbiw	r26, 0x01	; 1
 866:	f1 f7       	brne	.-4      	; 0x864 <setup+0x80>
 868:	00 c0       	rjmp	.+0      	; 0x86a <setup+0x86>
 86a:	00 00       	nop
 86c:	08 95       	ret

0000086e <main>:
}


int main(void)
{
    setup();
 86e:	ba df       	rcall	.-140    	; 0x7e4 <setup>
 870:	05 c0       	rjmp	.+10     	; 0x87c <main+0xe>
    while (1) 
    {
		while(node_status == IDLE) mrf_check_flags(&handle_rx, &handle_tx); //check for interrupts
 872:	6e e3       	ldi	r22, 0x3E	; 62
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	80 e6       	ldi	r24, 0x60	; 96
 878:	93 e0       	ldi	r25, 0x03	; 3
 87a:	4b d1       	rcall	.+662    	; 0xb12 <mrf_check_flags>
 87c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <node_status>
 880:	88 23       	and	r24, r24
 882:	b9 f3       	breq	.-18     	; 0x872 <main+0x4>
 884:	fd cf       	rjmp	.-6      	; 0x880 <main+0x12>

00000886 <mrf_reset>:
        mrf_write_long(MRF_TESTMODE, 0x00); // Disable PA/LNA on MRF24J40MB module.
    }
}

void mrf_rx_flush(void) {
    mrf_write_short(MRF_RXFLUSH, 0x01);
 886:	59 98       	cbi	0x0b, 1	; 11
 888:	87 ea       	ldi	r24, 0xA7	; 167
 88a:	91 e6       	ldi	r25, 0x61	; 97
 88c:	01 97       	sbiw	r24, 0x01	; 1
 88e:	f1 f7       	brne	.-4      	; 0x88c <mrf_reset+0x6>
 890:	00 c0       	rjmp	.+0      	; 0x892 <mrf_reset+0xc>
 892:	00 00       	nop
 894:	59 9a       	sbi	0x0b, 1	; 11
 896:	83 e2       	ldi	r24, 0x23	; 35
 898:	94 ef       	ldi	r25, 0xF4	; 244
 89a:	01 97       	sbiw	r24, 0x01	; 1
 89c:	f1 f7       	brne	.-4      	; 0x89a <mrf_reset+0x14>
 89e:	00 c0       	rjmp	.+0      	; 0x8a0 <mrf_reset+0x1a>
 8a0:	00 00       	nop
 8a2:	08 95       	ret

000008a4 <mrf_read_short>:
 8a4:	cf 93       	push	r28
 8a6:	df 93       	push	r29
 8a8:	cb e0       	ldi	r28, 0x0B	; 11
 8aa:	d1 e0       	ldi	r29, 0x01	; 1
 8ac:	88 0f       	add	r24, r24
 8ae:	8e 77       	andi	r24, 0x7E	; 126
 8b0:	88 83       	st	Y, r24
 8b2:	19 82       	std	Y+1, r1	; 0x01
 8b4:	26 e0       	ldi	r18, 0x06	; 6
 8b6:	42 e0       	ldi	r20, 0x02	; 2
 8b8:	be 01       	movw	r22, r28
 8ba:	ce 01       	movw	r24, r28
 8bc:	2e d2       	rcall	.+1116   	; 0xd1a <spi_transfer_nbytes>
 8be:	89 81       	ldd	r24, Y+1	; 0x01
 8c0:	df 91       	pop	r29
 8c2:	cf 91       	pop	r28
 8c4:	08 95       	ret

000008c6 <mrf_read_long>:
 8c6:	cf 93       	push	r28
 8c8:	df 93       	push	r29
 8ca:	cb e0       	ldi	r28, 0x0B	; 11
 8cc:	d1 e0       	ldi	r29, 0x01	; 1
 8ce:	9c 01       	movw	r18, r24
 8d0:	36 95       	lsr	r19
 8d2:	27 95       	ror	r18
 8d4:	36 95       	lsr	r19
 8d6:	27 95       	ror	r18
 8d8:	36 95       	lsr	r19
 8da:	27 95       	ror	r18
 8dc:	20 68       	ori	r18, 0x80	; 128
 8de:	28 83       	st	Y, r18
 8e0:	82 95       	swap	r24
 8e2:	88 0f       	add	r24, r24
 8e4:	80 7e       	andi	r24, 0xE0	; 224
 8e6:	89 83       	std	Y+1, r24	; 0x01
 8e8:	1a 82       	std	Y+2, r1	; 0x02
 8ea:	26 e0       	ldi	r18, 0x06	; 6
 8ec:	43 e0       	ldi	r20, 0x03	; 3
 8ee:	be 01       	movw	r22, r28
 8f0:	ce 01       	movw	r24, r28
 8f2:	13 d2       	rcall	.+1062   	; 0xd1a <spi_transfer_nbytes>
 8f4:	8a 81       	ldd	r24, Y+2	; 0x02
 8f6:	df 91       	pop	r29
 8f8:	cf 91       	pop	r28
 8fa:	08 95       	ret

000008fc <mrf_write_short>:
 8fc:	eb e0       	ldi	r30, 0x0B	; 11
 8fe:	f1 e0       	ldi	r31, 0x01	; 1
 900:	88 0f       	add	r24, r24
 902:	8e 77       	andi	r24, 0x7E	; 126
 904:	81 60       	ori	r24, 0x01	; 1
 906:	80 83       	st	Z, r24
 908:	61 83       	std	Z+1, r22	; 0x01
 90a:	26 e0       	ldi	r18, 0x06	; 6
 90c:	42 e0       	ldi	r20, 0x02	; 2
 90e:	bf 01       	movw	r22, r30
 910:	cf 01       	movw	r24, r30
 912:	03 d2       	rcall	.+1030   	; 0xd1a <spi_transfer_nbytes>
 914:	08 95       	ret

00000916 <mrf_write_long>:
 916:	eb e0       	ldi	r30, 0x0B	; 11
 918:	f1 e0       	ldi	r31, 0x01	; 1
 91a:	9c 01       	movw	r18, r24
 91c:	36 95       	lsr	r19
 91e:	27 95       	ror	r18
 920:	36 95       	lsr	r19
 922:	27 95       	ror	r18
 924:	36 95       	lsr	r19
 926:	27 95       	ror	r18
 928:	20 68       	ori	r18, 0x80	; 128
 92a:	20 83       	st	Z, r18
 92c:	82 95       	swap	r24
 92e:	88 0f       	add	r24, r24
 930:	80 7e       	andi	r24, 0xE0	; 224
 932:	80 61       	ori	r24, 0x10	; 16
 934:	81 83       	std	Z+1, r24	; 0x01
 936:	62 83       	std	Z+2, r22	; 0x02
 938:	26 e0       	ldi	r18, 0x06	; 6
 93a:	43 e0       	ldi	r20, 0x03	; 3
 93c:	bf 01       	movw	r22, r30
 93e:	cf 01       	movw	r24, r30
 940:	ec d1       	rcall	.+984    	; 0xd1a <spi_transfer_nbytes>
 942:	08 95       	ret

00000944 <mrf_get_pan>:
 944:	cf 93       	push	r28
 946:	82 e0       	ldi	r24, 0x02	; 2
 948:	ad df       	rcall	.-166    	; 0x8a4 <mrf_read_short>
 94a:	c8 2f       	mov	r28, r24
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	aa df       	rcall	.-172    	; 0x8a4 <mrf_read_short>
 950:	2c 2f       	mov	r18, r28
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	32 2f       	mov	r19, r18
 956:	22 27       	eor	r18, r18
 958:	a9 01       	movw	r20, r18
 95a:	48 2b       	or	r20, r24
 95c:	ca 01       	movw	r24, r20
 95e:	cf 91       	pop	r28
 960:	08 95       	ret

00000962 <mrf_set_pan>:
 962:	cf 93       	push	r28
 964:	c8 2f       	mov	r28, r24
 966:	69 2f       	mov	r22, r25
 968:	82 e0       	ldi	r24, 0x02	; 2
 96a:	c8 df       	rcall	.-112    	; 0x8fc <mrf_write_short>
 96c:	6c 2f       	mov	r22, r28
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	c5 df       	rcall	.-118    	; 0x8fc <mrf_write_short>
 972:	cf 91       	pop	r28
 974:	08 95       	ret

00000976 <mrf_address16_write>:
 976:	cf 93       	push	r28
 978:	c8 2f       	mov	r28, r24
 97a:	69 2f       	mov	r22, r25
 97c:	84 e0       	ldi	r24, 0x04	; 4
 97e:	be df       	rcall	.-132    	; 0x8fc <mrf_write_short>
 980:	6c 2f       	mov	r22, r28
 982:	83 e0       	ldi	r24, 0x03	; 3
 984:	bb df       	rcall	.-138    	; 0x8fc <mrf_write_short>
 986:	cf 91       	pop	r28
 988:	08 95       	ret

0000098a <mrf_address16_read>:
 98a:	cf 93       	push	r28
 98c:	84 e0       	ldi	r24, 0x04	; 4
 98e:	8a df       	rcall	.-236    	; 0x8a4 <mrf_read_short>
 990:	c8 2f       	mov	r28, r24
 992:	83 e0       	ldi	r24, 0x03	; 3
 994:	87 df       	rcall	.-242    	; 0x8a4 <mrf_read_short>
 996:	2c 2f       	mov	r18, r28
 998:	30 e0       	ldi	r19, 0x00	; 0
 99a:	32 2f       	mov	r19, r18
 99c:	22 27       	eor	r18, r18
 99e:	a9 01       	movw	r20, r18
 9a0:	48 2b       	or	r20, r24
 9a2:	ca 01       	movw	r24, r20
 9a4:	cf 91       	pop	r28
 9a6:	08 95       	ret

000009a8 <mrf_send16>:
 9a8:	df 92       	push	r13
 9aa:	ef 92       	push	r14
 9ac:	ff 92       	push	r15
 9ae:	0f 93       	push	r16
 9b0:	1f 93       	push	r17
 9b2:	cf 93       	push	r28
 9b4:	df 93       	push	r29
 9b6:	d8 2f       	mov	r29, r24
 9b8:	c9 2f       	mov	r28, r25
 9ba:	7b 01       	movw	r14, r22
 9bc:	d4 2e       	mov	r13, r20
 9be:	69 e0       	ldi	r22, 0x09	; 9
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	a8 df       	rcall	.-176    	; 0x916 <mrf_write_long>
 9c6:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <ignoreBytes>
 9ca:	67 5f       	subi	r22, 0xF7	; 247
 9cc:	6d 0d       	add	r22, r13
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	a1 df       	rcall	.-190    	; 0x916 <mrf_write_long>
 9d4:	61 e6       	ldi	r22, 0x61	; 97
 9d6:	82 e0       	ldi	r24, 0x02	; 2
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	9d df       	rcall	.-198    	; 0x916 <mrf_write_long>
 9dc:	68 e8       	ldi	r22, 0x88	; 136
 9de:	83 e0       	ldi	r24, 0x03	; 3
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	99 df       	rcall	.-206    	; 0x916 <mrf_write_long>
 9e4:	61 e0       	ldi	r22, 0x01	; 1
 9e6:	84 e0       	ldi	r24, 0x04	; 4
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	95 df       	rcall	.-214    	; 0x916 <mrf_write_long>
 9ec:	ab df       	rcall	.-170    	; 0x944 <mrf_get_pan>
 9ee:	19 2f       	mov	r17, r25
 9f0:	68 2f       	mov	r22, r24
 9f2:	85 e0       	ldi	r24, 0x05	; 5
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	8f df       	rcall	.-226    	; 0x916 <mrf_write_long>
 9f8:	61 2f       	mov	r22, r17
 9fa:	86 e0       	ldi	r24, 0x06	; 6
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	8b df       	rcall	.-234    	; 0x916 <mrf_write_long>
 a00:	6d 2f       	mov	r22, r29
 a02:	87 e0       	ldi	r24, 0x07	; 7
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	87 df       	rcall	.-242    	; 0x916 <mrf_write_long>
 a08:	6c 2f       	mov	r22, r28
 a0a:	88 e0       	ldi	r24, 0x08	; 8
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	83 df       	rcall	.-250    	; 0x916 <mrf_write_long>
 a10:	bc df       	rcall	.-136    	; 0x98a <mrf_address16_read>
 a12:	c9 2f       	mov	r28, r25
 a14:	68 2f       	mov	r22, r24
 a16:	89 e0       	ldi	r24, 0x09	; 9
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	7d df       	rcall	.-262    	; 0x916 <mrf_write_long>
 a1c:	6c 2f       	mov	r22, r28
 a1e:	8a e0       	ldi	r24, 0x0A	; 10
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	79 df       	rcall	.-270    	; 0x916 <mrf_write_long>
 a24:	c0 91 86 01 	lds	r28, 0x0186	; 0x800186 <ignoreBytes>
 a28:	d0 91 87 01 	lds	r29, 0x0187	; 0x800187 <ignoreBytes+0x1>
 a2c:	2b 96       	adiw	r28, 0x0b	; 11
 a2e:	dd 20       	and	r13, r13
 a30:	61 f0       	breq	.+24     	; 0xa4a <mrf_send16+0xa2>
 a32:	87 01       	movw	r16, r14
 a34:	ed 0c       	add	r14, r13
 a36:	f1 1c       	adc	r15, r1
 a38:	f8 01       	movw	r30, r16
 a3a:	61 91       	ld	r22, Z+
 a3c:	8f 01       	movw	r16, r30
 a3e:	ce 01       	movw	r24, r28
 a40:	6a df       	rcall	.-300    	; 0x916 <mrf_write_long>
 a42:	21 96       	adiw	r28, 0x01	; 1
 a44:	0e 15       	cp	r16, r14
 a46:	1f 05       	cpc	r17, r15
 a48:	b9 f7       	brne	.-18     	; 0xa38 <mrf_send16+0x90>
 a4a:	65 e0       	ldi	r22, 0x05	; 5
 a4c:	8b e1       	ldi	r24, 0x1B	; 27
 a4e:	56 df       	rcall	.-340    	; 0x8fc <mrf_write_short>
 a50:	df 91       	pop	r29
 a52:	cf 91       	pop	r28
 a54:	1f 91       	pop	r17
 a56:	0f 91       	pop	r16
 a58:	ff 90       	pop	r15
 a5a:	ef 90       	pop	r14
 a5c:	df 90       	pop	r13
 a5e:	08 95       	ret

00000a60 <mrf_set_interrupts>:
 a60:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <isr_lock>
 a64:	66 ef       	ldi	r22, 0xF6	; 246
 a66:	82 e3       	ldi	r24, 0x32	; 50
 a68:	49 df       	rcall	.-366    	; 0x8fc <mrf_write_short>
 a6a:	08 95       	ret

00000a6c <mrf_set_channel>:
 a6c:	68 2f       	mov	r22, r24
 a6e:	70 e0       	ldi	r23, 0x00	; 0
 a70:	6b 50       	subi	r22, 0x0B	; 11
 a72:	71 09       	sbc	r23, r1
 a74:	62 95       	swap	r22
 a76:	72 95       	swap	r23
 a78:	70 7f       	andi	r23, 0xF0	; 240
 a7a:	76 27       	eor	r23, r22
 a7c:	60 7f       	andi	r22, 0xF0	; 240
 a7e:	76 27       	eor	r23, r22
 a80:	63 60       	ori	r22, 0x03	; 3
 a82:	80 e0       	ldi	r24, 0x00	; 0
 a84:	92 e0       	ldi	r25, 0x02	; 2
 a86:	47 df       	rcall	.-370    	; 0x916 <mrf_write_long>
 a88:	08 95       	ret

00000a8a <mrf_init>:
 a8a:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <mrf_flags>
 a8e:	67 e0       	ldi	r22, 0x07	; 7
 a90:	8a e2       	ldi	r24, 0x2A	; 42
 a92:	34 df       	rcall	.-408    	; 0x8fc <mrf_write_short>
 a94:	68 e9       	ldi	r22, 0x98	; 152
 a96:	88 e1       	ldi	r24, 0x18	; 24
 a98:	31 df       	rcall	.-414    	; 0x8fc <mrf_write_short>
 a9a:	65 e9       	ldi	r22, 0x95	; 149
 a9c:	8e e2       	ldi	r24, 0x2E	; 46
 a9e:	2e df       	rcall	.-420    	; 0x8fc <mrf_write_short>
 aa0:	63 e0       	ldi	r22, 0x03	; 3
 aa2:	80 e0       	ldi	r24, 0x00	; 0
 aa4:	92 e0       	ldi	r25, 0x02	; 2
 aa6:	37 df       	rcall	.-402    	; 0x916 <mrf_write_long>
 aa8:	61 e0       	ldi	r22, 0x01	; 1
 aaa:	81 e0       	ldi	r24, 0x01	; 1
 aac:	92 e0       	ldi	r25, 0x02	; 2
 aae:	33 df       	rcall	.-410    	; 0x916 <mrf_write_long>
 ab0:	60 e8       	ldi	r22, 0x80	; 128
 ab2:	82 e0       	ldi	r24, 0x02	; 2
 ab4:	92 e0       	ldi	r25, 0x02	; 2
 ab6:	2f df       	rcall	.-418    	; 0x916 <mrf_write_long>
 ab8:	60 e9       	ldi	r22, 0x90	; 144
 aba:	86 e0       	ldi	r24, 0x06	; 6
 abc:	92 e0       	ldi	r25, 0x02	; 2
 abe:	2b df       	rcall	.-426    	; 0x916 <mrf_write_long>
 ac0:	60 e8       	ldi	r22, 0x80	; 128
 ac2:	87 e0       	ldi	r24, 0x07	; 7
 ac4:	92 e0       	ldi	r25, 0x02	; 2
 ac6:	27 df       	rcall	.-434    	; 0x916 <mrf_write_long>
 ac8:	60 e1       	ldi	r22, 0x10	; 16
 aca:	88 e0       	ldi	r24, 0x08	; 8
 acc:	92 e0       	ldi	r25, 0x02	; 2
 ace:	23 df       	rcall	.-442    	; 0x916 <mrf_write_long>
 ad0:	61 e2       	ldi	r22, 0x21	; 33
 ad2:	80 e2       	ldi	r24, 0x20	; 32
 ad4:	92 e0       	ldi	r25, 0x02	; 2
 ad6:	1f df       	rcall	.-450    	; 0x916 <mrf_write_long>
 ad8:	60 e8       	ldi	r22, 0x80	; 128
 ada:	8a e3       	ldi	r24, 0x3A	; 58
 adc:	0f df       	rcall	.-482    	; 0x8fc <mrf_write_short>
 ade:	60 e6       	ldi	r22, 0x60	; 96
 ae0:	8f e3       	ldi	r24, 0x3F	; 63
 ae2:	0c df       	rcall	.-488    	; 0x8fc <mrf_write_short>
 ae4:	60 e4       	ldi	r22, 0x40	; 64
 ae6:	8e e3       	ldi	r24, 0x3E	; 62
 ae8:	09 df       	rcall	.-494    	; 0x8fc <mrf_write_short>
 aea:	ba df       	rcall	.-140    	; 0xa60 <mrf_set_interrupts>
 aec:	84 e1       	ldi	r24, 0x14	; 20
 aee:	be df       	rcall	.-132    	; 0xa6c <mrf_set_channel>
 af0:	64 e0       	ldi	r22, 0x04	; 4
 af2:	86 e3       	ldi	r24, 0x36	; 54
 af4:	03 df       	rcall	.-506    	; 0x8fc <mrf_write_short>
 af6:	60 e0       	ldi	r22, 0x00	; 0
 af8:	86 e3       	ldi	r24, 0x36	; 54
 afa:	00 df       	rcall	.-512    	; 0x8fc <mrf_write_short>
 afc:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <flag_got_rx>
 b00:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <flag_got_tx>
 b04:	89 ef       	ldi	r24, 0xF9	; 249
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	01 97       	sbiw	r24, 0x01	; 1
 b0a:	f1 f7       	brne	.-4      	; 0xb08 <mrf_init+0x7e>
 b0c:	00 c0       	rjmp	.+0      	; 0xb0e <mrf_init+0x84>
 b0e:	00 00       	nop
 b10:	08 95       	ret

00000b12 <mrf_check_flags>:
 b12:	cf 93       	push	r28
 b14:	df 93       	push	r29
 b16:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <isr_lock>
 b1a:	21 11       	cpse	r18, r1
 b1c:	11 c0       	rjmp	.+34     	; 0xb40 <mrf_check_flags+0x2e>
 b1e:	eb 01       	movw	r28, r22
 b20:	fc 01       	movw	r30, r24
 b22:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <flag_got_rx>
 b26:	22 23       	and	r18, r18
 b28:	19 f0       	breq	.+6      	; 0xb30 <mrf_check_flags+0x1e>
 b2a:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <flag_got_rx>
 b2e:	09 95       	icall
 b30:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <flag_got_tx>
 b34:	88 23       	and	r24, r24
 b36:	21 f0       	breq	.+8      	; 0xb40 <mrf_check_flags+0x2e>
 b38:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <flag_got_tx>
 b3c:	fe 01       	movw	r30, r28
 b3e:	09 95       	icall
 b40:	df 91       	pop	r29
 b42:	cf 91       	pop	r28
 b44:	08 95       	ret

00000b46 <mrf_rx_datalength>:
 b46:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rx_info>
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	0b 97       	sbiw	r24, 0x0b	; 11
 b4e:	08 95       	ret

00000b50 <mrf_rx_disable>:
}

void mrf_rx_disable(void) {
    mrf_write_short(MRF_BBREG1, 0x04);  // RXDECINV - disable receiver
 b50:	64 e0       	ldi	r22, 0x04	; 4
 b52:	89 e3       	ldi	r24, 0x39	; 57
 b54:	d3 de       	rcall	.-602    	; 0x8fc <mrf_write_short>
 b56:	08 95       	ret

00000b58 <mrf_rx_enable>:
}

void mrf_rx_enable(void) {
    mrf_write_short(MRF_BBREG1, 0x00);  // RXDECINV - enable receiver
 b58:	60 e0       	ldi	r22, 0x00	; 0
 b5a:	89 e3       	ldi	r24, 0x39	; 57
 b5c:	cf de       	rcall	.-610    	; 0x8fc <mrf_write_short>
 b5e:	08 95       	ret

00000b60 <mrf_interrupt_handler>:
 * Call this from within an interrupt handler connected to the MRFs output
 * interrupt pin.  It handles reading in any data from the module, and letting it
 * continue working.
 * Only the most recent data is ever kept.
 */
void mrf_interrupt_handler(void) {
 b60:	af 92       	push	r10
 b62:	bf 92       	push	r11
 b64:	cf 92       	push	r12
 b66:	df 92       	push	r13
 b68:	ef 92       	push	r14
 b6a:	ff 92       	push	r15
 b6c:	0f 93       	push	r16
 b6e:	1f 93       	push	r17
 b70:	cf 93       	push	r28
 b72:	df 93       	push	r29
    //GRAB_ISR_MUTEX;
    isr_lock = 1;
 b74:	81 e0       	ldi	r24, 0x01	; 1
 b76:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <isr_lock>
    uint8_t last_interrupt = mrf_read_short(MRF_INTSTAT);
 b7a:	81 e3       	ldi	r24, 0x31	; 49
 b7c:	93 de       	rcall	.-730    	; 0x8a4 <mrf_read_short>
 b7e:	b8 2e       	mov	r11, r24
    if (last_interrupt & MRF_I_RXIF) {
 b80:	83 ff       	sbrs	r24, 3
 b82:	4f c0       	rjmp	.+158    	; 0xc22 <mrf_interrupt_handler+0xc2>
		//ERROR: This doesn't enter upon reboot until a second message is sent
		//BLINK(LIGHT_PORT,GREEN_LIGHT);
        int i = 0;
        flag_got_rx++;
 b84:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <flag_got_rx>
 b88:	8f 5f       	subi	r24, 0xFF	; 255
 b8a:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <flag_got_rx>
        // read out the packet data...
    //    cli();
        mrf_rx_disable();
 b8e:	e0 df       	rcall	.-64     	; 0xb50 <mrf_rx_disable>
        // read start of rxfifo for, has 2 bytes more added by FCS. frame_length = m + n + 2
        uint8_t frame_length = mrf_read_long(0x300);
 b90:	80 e0       	ldi	r24, 0x00	; 0
 b92:	93 e0       	ldi	r25, 0x03	; 3
 b94:	98 de       	rcall	.-720    	; 0x8c6 <mrf_read_long>
 b96:	a8 2e       	mov	r10, r24

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
 b98:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <mrf_flags>
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 b9c:	ea 2c       	mov	r14, r10
 b9e:	f1 2c       	mov	r15, r1
 ba0:	1e 14       	cp	r1, r14
 ba2:	1f 04       	cpc	r1, r15
 ba4:	9c f4       	brge	.+38     	; 0xbcc <mrf_interrupt_handler+0x6c>
 ba6:	c7 01       	movw	r24, r14
 ba8:	9c 01       	movw	r18, r24
 baa:	28 57       	subi	r18, 0x78	; 120
 bac:	3e 4f       	sbci	r19, 0xFE	; 254
 bae:	69 01       	movw	r12, r18
 bb0:	c8 e8       	ldi	r28, 0x88	; 136
 bb2:	d1 e0       	ldi	r29, 0x01	; 1
                rx_buf[rb_ptr++] = mrf_read_long(0x301 + i);
 bb4:	01 e0       	ldi	r16, 0x01	; 1
 bb6:	13 e0       	ldi	r17, 0x03	; 3
 bb8:	08 58       	subi	r16, 0x88	; 136
 bba:	11 40       	sbci	r17, 0x01	; 1
 bbc:	c8 01       	movw	r24, r16
 bbe:	8c 0f       	add	r24, r28
 bc0:	9d 1f       	adc	r25, r29
 bc2:	81 de       	rcall	.-766    	; 0x8c6 <mrf_read_long>
 bc4:	89 93       	st	Y+, r24
        uint8_t frame_length = mrf_read_long(0x300);

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 bc6:	cc 15       	cp	r28, r12
 bc8:	dd 05       	cpc	r29, r13
 bca:	c1 f7       	brne	.-16     	; 0xbbc <mrf_interrupt_handler+0x5c>
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 bcc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rx_info>
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	0b 97       	sbiw	r24, 0x0b	; 11
 bd4:	18 16       	cp	r1, r24
 bd6:	19 06       	cpc	r1, r25
 bd8:	ac f4       	brge	.+42     	; 0xc04 <mrf_interrupt_handler+0xa4>
 bda:	c0 e1       	ldi	r28, 0x10	; 16
 bdc:	d1 e0       	ldi	r29, 0x01	; 1
 bde:	c1 2c       	mov	r12, r1
 be0:	d1 2c       	mov	r13, r1
uint8_t * mrf_get_rxbuf(void) {
    return rx_buf;
}

int mrf_rx_datalength(void) {
    return rx_info.frame_length - bytes_nodata;
 be2:	0f e0       	ldi	r16, 0x0F	; 15
 be4:	11 e0       	ldi	r17, 0x01	; 1

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
 be6:	3f ef       	ldi	r19, 0xFF	; 255
 be8:	c3 1a       	sub	r12, r19
 bea:	d3 0a       	sbc	r13, r19
 bec:	c6 01       	movw	r24, r12
 bee:	87 5f       	subi	r24, 0xF7	; 247
 bf0:	9c 4f       	sbci	r25, 0xFC	; 252
 bf2:	69 de       	rcall	.-814    	; 0x8c6 <mrf_read_long>
 bf4:	89 93       	st	Y+, r24
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 bf6:	f8 01       	movw	r30, r16
 bf8:	80 81       	ld	r24, Z
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	0b 97       	sbiw	r24, 0x0b	; 11
 bfe:	c8 16       	cp	r12, r24
 c00:	d9 06       	cpc	r13, r25
 c02:	8c f3       	brlt	.-30     	; 0xbe6 <mrf_interrupt_handler+0x86>
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
        }

        rx_info.frame_length = frame_length;
 c04:	a0 92 0f 01 	sts	0x010F, r10	; 0x80010f <rx_info>
        // same as datasheet 0x301 + (m + n + 2) <-- frame_length
        rx_info.lqi = mrf_read_long(0x301 + frame_length);
 c08:	c7 01       	movw	r24, r14
 c0a:	8f 5f       	subi	r24, 0xFF	; 255
 c0c:	9c 4f       	sbci	r25, 0xFC	; 252
 c0e:	5b de       	rcall	.-842    	; 0x8c6 <mrf_read_long>
 c10:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <rx_info+0x75>
        // same as datasheet 0x301 + (m + n + 3) <-- frame_length + 1
        rx_info.rssi = mrf_read_long(0x301 + frame_length + 1);
 c14:	c7 01       	movw	r24, r14
 c16:	8e 5f       	subi	r24, 0xFE	; 254
 c18:	9c 4f       	sbci	r25, 0xFC	; 252
 c1a:	55 de       	rcall	.-854    	; 0x8c6 <mrf_read_long>
 c1c:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <rx_info+0x76>

        mrf_rx_enable();
 c20:	9b df       	rcall	.-202    	; 0xb58 <mrf_rx_enable>
    //    sei();
    }
    if (last_interrupt & MRF_I_TXNIF) {
 c22:	b0 fe       	sbrs	r11, 0
 c24:	1c c0       	rjmp	.+56     	; 0xc5e <mrf_interrupt_handler+0xfe>
        flag_got_tx++;
 c26:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <flag_got_tx>
 c2a:	8f 5f       	subi	r24, 0xFF	; 255
 c2c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <flag_got_tx>
        mrf_reg_TXSTAT = mrf_read_short(MRF_TXSTAT);
 c30:	84 e2       	ldi	r24, 0x24	; 36
 c32:	38 de       	rcall	.-912    	; 0x8a4 <mrf_read_short>
 c34:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <mrf_reg_TXSTAT>
        // 1 means it failed, we want 1 to mean it worked.
        tx_info.tx_ok = !(mrf_reg_TXSTAT & 0x3F);
 c38:	98 2f       	mov	r25, r24
 c3a:	9f 73       	andi	r25, 0x3F	; 63
 c3c:	21 e0       	ldi	r18, 0x01	; 1
 c3e:	09 f0       	breq	.+2      	; 0xc42 <mrf_interrupt_handler+0xe2>
 c40:	20 e0       	ldi	r18, 0x00	; 0
 c42:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <tx_info>
 c46:	20 fb       	bst	r18, 0
 c48:	90 f9       	bld	r25, 0
        tx_info.retries = mrf_reg_TXSTAT >> 6;
 c4a:	82 95       	swap	r24
 c4c:	86 95       	lsr	r24
 c4e:	86 95       	lsr	r24
 c50:	83 70       	andi	r24, 0x03	; 3
 c52:	88 0f       	add	r24, r24
 c54:	99 7f       	andi	r25, 0xF9	; 249
        tx_info.channel_busy = (mrf_reg_TXSTAT & (1 << CCAFAIL));
 c56:	89 2b       	or	r24, r25
 c58:	87 7f       	andi	r24, 0xF7	; 247
 c5a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tx_info>
    }
//DROP_ISR_MUTEX;
    isr_lock = 0;
 c5e:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <isr_lock>
}
 c62:	df 91       	pop	r29
 c64:	cf 91       	pop	r28
 c66:	1f 91       	pop	r17
 c68:	0f 91       	pop	r16
 c6a:	ff 90       	pop	r15
 c6c:	ef 90       	pop	r14
 c6e:	df 90       	pop	r13
 c70:	cf 90       	pop	r12
 c72:	bf 90       	pop	r11
 c74:	af 90       	pop	r10
 c76:	08 95       	ret

00000c78 <mrf_get_rxdata>:
}

uint8_t* mrf_get_rxdata()
{
	return rx_info.rx_data;
}
 c78:	80 e1       	ldi	r24, 0x10	; 16
 c7a:	91 e0       	ldi	r25, 0x01	; 1
 c7c:	08 95       	ret

00000c7e <Pk_Set_Packet_Size>:
}

void Pk_Add_Data(uint8_t* buff, uint16_t data, uint8_t data_location)
{   //adds data in two byte elements to the data_start area
	//TODO: incorporate "hop count"?
	word_to_bytes(&buff[PK_DATA_START+data_location*3],data);
 c7e:	fc 01       	movw	r30, r24
 c80:	67 83       	std	Z+7, r22	; 0x07
 c82:	08 95       	ret

00000c84 <Pk_Set_Target_Node>:
 c84:	f7 d9       	rcall	.-3090   	; 0x74 <word_to_bytes>
 c86:	08 95       	ret

00000c88 <Pk_Set_Final_Node>:
 c88:	02 96       	adiw	r24, 0x02	; 2
 c8a:	f4 d9       	rcall	.-3096   	; 0x74 <word_to_bytes>
 c8c:	08 95       	ret

00000c8e <Pk_Set_Command>:
 c8e:	ef 92       	push	r14
 c90:	ff 92       	push	r15
 c92:	0f 93       	push	r16
 c94:	1f 93       	push	r17
 c96:	cf 93       	push	r28
 c98:	df 93       	push	r29
 c9a:	ec 01       	movw	r28, r24
 c9c:	f4 2e       	mov	r15, r20
 c9e:	12 2f       	mov	r17, r18
 ca0:	08 96       	adiw	r24, 0x08	; 8
 ca2:	e8 d9       	rcall	.-3120   	; 0x74 <word_to_bytes>
 ca4:	fa 86       	std	Y+10, r15	; 0x0a
 ca6:	1b 87       	std	Y+11, r17	; 0x0b
 ca8:	0c 87       	std	Y+12, r16	; 0x0c
 caa:	ed 86       	std	Y+13, r14	; 0x0d
 cac:	df 91       	pop	r29
 cae:	cf 91       	pop	r28
 cb0:	1f 91       	pop	r17
 cb2:	0f 91       	pop	r16
 cb4:	ff 90       	pop	r15
 cb6:	ef 90       	pop	r14
 cb8:	08 95       	ret

00000cba <Pk_Set_Src_Node>:
 cba:	04 96       	adiw	r24, 0x04	; 4
 cbc:	db d9       	rcall	.-3146   	; 0x74 <word_to_bytes>
 cbe:	08 95       	ret

00000cc0 <Pk_Set_Hop_Count>:
	//location*2 to separate data [0,1],[1,2],[3,4] etc.
}

void Pk_Set_Hop_Count(uint8_t* buff, uint8_t hop_count)
{
	buff[PK_COMMAND_HEADER+PK_HOP_COUNT] = hop_count;
 cc0:	fc 01       	movw	r30, r24
 cc2:	66 83       	std	Z+6, r22	; 0x06
 cc4:	08 95       	ret

00000cc6 <get_adc_value>:
uint8_t adc_buffer[3];



uint16_t get_adc_value(uint8_t chan) //change this function to have ADC_CS as a parameter(?)
{
 cc6:	cf 93       	push	r28
 cc8:	df 93       	push	r29

	adc_buffer[0] = 6 | (chan >>2);
 cca:	ce e6       	ldi	r28, 0x6E	; 110
 ccc:	d2 e0       	ldi	r29, 0x02	; 2
 cce:	98 2f       	mov	r25, r24
 cd0:	96 95       	lsr	r25
 cd2:	96 95       	lsr	r25
 cd4:	96 60       	ori	r25, 0x06	; 6
 cd6:	98 83       	st	Y, r25
	adc_buffer[1] = chan << 6;
 cd8:	82 95       	swap	r24
 cda:	88 0f       	add	r24, r24
 cdc:	88 0f       	add	r24, r24
 cde:	80 7c       	andi	r24, 0xC0	; 192
 ce0:	89 83       	std	Y+1, r24	; 0x01
	spi_transfer_nbytes(adc_buffer,adc_buffer,3,ADC_CS);
 ce2:	27 e0       	ldi	r18, 0x07	; 7
 ce4:	43 e0       	ldi	r20, 0x03	; 3
 ce6:	be 01       	movw	r22, r28
 ce8:	ce 01       	movw	r24, r28
 cea:	17 d0       	rcall	.+46     	; 0xd1a <spi_transfer_nbytes>
	uint16_t b1 = adc_buffer[1] & 0xF; //magic number sets first 4 bits to 0.
	uint16_t b2 = adc_buffer[2];
	
	return b2 | (b1<<8);
 cec:	89 81       	ldd	r24, Y+1	; 0x01
 cee:	8f 70       	andi	r24, 0x0F	; 15
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	98 2f       	mov	r25, r24
 cf4:	88 27       	eor	r24, r24
 cf6:	2a 81       	ldd	r18, Y+2	; 0x02
}
 cf8:	82 2b       	or	r24, r18
 cfa:	df 91       	pop	r29
 cfc:	cf 91       	pop	r28
 cfe:	08 95       	ret

00000d00 <spi_setup>:

void spi_setup()
{

	#ifndef SPI_ON_USI
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0); //enables SPI, sets chip as master, sets clock speed to fosc/16
 d00:	81 e5       	ldi	r24, 0x51	; 81
 d02:	8c bd       	out	0x2c, r24	; 44
 d04:	08 95       	ret

00000d06 <spi_transfer_byte>:

/*Transfers a single byte between master and slave*/

void spi_transfer_byte(uint8_t* bout, uint8_t* bin)
{
	DATAREG = *bout;
 d06:	fc 01       	movw	r30, r24
 d08:	80 81       	ld	r24, Z
 d0a:	8e bd       	out	0x2e, r24	; 46
	while(! SPI_BYTE_XFER_DONE)
 d0c:	0d b4       	in	r0, 0x2d	; 45
 d0e:	07 fe       	sbrs	r0, 7
 d10:	fd cf       	rjmp	.-6      	; 0xd0c <spi_transfer_byte+0x6>
		USICR = usi_clk_lo;
		USICR = usi_clk_hi;
		#endif
	} 
	/*Incoming data out of data register*/
	*bin = DATAREG;
 d12:	8e b5       	in	r24, 0x2e	; 46
 d14:	fb 01       	movw	r30, r22
 d16:	80 83       	st	Z, r24
 d18:	08 95       	ret

00000d1a <spi_transfer_nbytes>:
}

/*Selects the slave (cs)  and transfers n bytes. The input and output buffers must be defined and contain at least n bytes each*/

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
 d1a:	cf 92       	push	r12
 d1c:	df 92       	push	r13
 d1e:	ef 92       	push	r14
 d20:	ff 92       	push	r15
 d22:	0f 93       	push	r16
 d24:	1f 93       	push	r17
 d26:	cf 93       	push	r28
 d28:	df 93       	push	r29
 d2a:	ec 01       	movw	r28, r24
 d2c:	8b 01       	movw	r16, r22
	
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
 d2e:	85 b1       	in	r24, 0x05	; 5
 d30:	61 e0       	ldi	r22, 0x01	; 1
 d32:	70 e0       	ldi	r23, 0x00	; 0
 d34:	6b 01       	movw	r12, r22
 d36:	02 c0       	rjmp	.+4      	; 0xd3c <spi_transfer_nbytes+0x22>
 d38:	cc 0c       	add	r12, r12
 d3a:	dd 1c       	adc	r13, r13
 d3c:	2a 95       	dec	r18
 d3e:	e2 f7       	brpl	.-8      	; 0xd38 <spi_transfer_nbytes+0x1e>
 d40:	9c 2d       	mov	r25, r12
 d42:	90 95       	com	r25
 d44:	89 23       	and	r24, r25
 d46:	85 b9       	out	0x05, r24	; 5
	while(n)
 d48:	44 23       	and	r20, r20
 d4a:	89 f0       	breq	.+34     	; 0xd6e <spi_transfer_nbytes+0x54>
 d4c:	41 50       	subi	r20, 0x01	; 1
 d4e:	e4 2e       	mov	r14, r20
 d50:	f1 2c       	mov	r15, r1
 d52:	8f ef       	ldi	r24, 0xFF	; 255
 d54:	e8 1a       	sub	r14, r24
 d56:	f8 0a       	sbc	r15, r24
 d58:	ec 0e       	add	r14, r28
 d5a:	fd 1e       	adc	r15, r29
	{
		spi_transfer_byte(out,in);    /*transfer byte */
 d5c:	b8 01       	movw	r22, r16
 d5e:	ce 01       	movw	r24, r28
 d60:	d2 df       	rcall	.-92     	; 0xd06 <spi_transfer_byte>
		/*advance iterators*/
		out = out + 1;
 d62:	21 96       	adiw	r28, 0x01	; 1
		in = in + 1;
 d64:	0f 5f       	subi	r16, 0xFF	; 255
 d66:	1f 4f       	sbci	r17, 0xFF	; 255

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
	
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
	while(n)
 d68:	ec 16       	cp	r14, r28
 d6a:	fd 06       	cpc	r15, r29
 d6c:	b9 f7       	brne	.-18     	; 0xd5c <spi_transfer_nbytes+0x42>
		/*advance iterators*/
		out = out + 1;
		in = in + 1;
		n = n - 1;
	}
	CS_PORT |= 1<<cs;/*Deselect slave chip*/
 d6e:	85 b1       	in	r24, 0x05	; 5
 d70:	c8 2a       	or	r12, r24
 d72:	c5 b8       	out	0x05, r12	; 5
}
 d74:	df 91       	pop	r29
 d76:	cf 91       	pop	r28
 d78:	1f 91       	pop	r17
 d7a:	0f 91       	pop	r16
 d7c:	ff 90       	pop	r15
 d7e:	ef 90       	pop	r14
 d80:	df 90       	pop	r13
 d82:	cf 90       	pop	r12
 d84:	08 95       	ret

00000d86 <memcpy>:
 d86:	fb 01       	movw	r30, r22
 d88:	dc 01       	movw	r26, r24
 d8a:	02 c0       	rjmp	.+4      	; 0xd90 <memcpy+0xa>
 d8c:	01 90       	ld	r0, Z+
 d8e:	0d 92       	st	X+, r0
 d90:	41 50       	subi	r20, 0x01	; 1
 d92:	50 40       	sbci	r21, 0x00	; 0
 d94:	d8 f7       	brcc	.-10     	; 0xd8c <memcpy+0x6>
 d96:	08 95       	ret

00000d98 <_exit>:
 d98:	f8 94       	cli

00000d9a <__stop_program>:
 d9a:	ff cf       	rjmp	.-2      	; 0xd9a <__stop_program>
