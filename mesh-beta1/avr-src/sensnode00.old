#include <string.h>
#include "tinyspi.h"
#include "mrf24j.h"
#include "mrfpindefs.h"
#include "blinkin.h"


#define PI_ADDRESS 0x3142

/*
EEPROM DATA:
0x0000  PANID_HI
        PANID_LO   
0x0001  ADDRESS_HI
0x0002  ADDRESS_LO
0x0003  PI_ADDRESS_HI
0x0004  PI_ADDRESS_LO
0x0005  NCHANS
0x0006  SAMPLE_DELAY
0x0007  SZ_RAW_DATA_BUFFER



status

1: measuring 
2: data_ready
3: data_transmitted

*/

#define ADC_CS PB7
#define CMD_DATA 0x4441
#define CMD_ERROR 0x4552

#define NS_DATA_REQUESTED 1
#define NS_DATA_READY 2
#define NS_ERROR 3
#define NS_MEASURING 4

#define NX_UNREC_CMD 1
#define NX_WRONG_SRC 2

#define ADDRESS_HI (MY_ADDRESS >> 8)
#define ADDRESS_LO (255 & MY_ADDRESS)

#define PI_ADDRESS_HI (PI_ADDRESS >> 8)
#define PI_ADDRESS_LO (255 & PI_ADDRESS)

#define PANID_HI (ASMP_PANID >> 8)
#define PANID_LO (255 & ASMP_PANID)

#define SZ_ADDRESSING_HEADER 8
#define SZ_PKT_CMD 6

#define SAMPLING_DELAY 5 
#define N_ADC_CHANS 1
#define SZ_RAW_DATA_BUFFER 8


#define LED_PORT    PORTD
#define LED_1       PD3    /*REMOTE LED*/
#define LED_2       PD4    /*LOCAL LED*/


uint16_t last_data_request;
uint8_t status;
uint8_t errcode;
uint16_t loopcount;

uint8_t current_rx_data[aMaxPHYPacketSize];
uint8_t packet[aMaxPHYPacketSize];

uint16_t two_bytes(uint8_t* b)
{
    uint16_t hi = (uint16_t) b[0];
    uint16_t lo = (uint16_t) b[1];

    return (hi << 8) | lo;
}

void two_bytes_out(uint8_t* b, uint16_t d)
{
    b[0] = (uint8_t)(d >> 8);
    b[1] = (uint8_t)(255 & d);
}


/* ADC FUNCTIONS */

uint8_t adc_buffer[3];


uint16_t get_adc_value(uint8_t chan)
{
	adc_buffer[0] = 6 | (chan >>2);
	adc_buffer[1] = chan << 6;
	
	spi_transfer_nbytes(adc_buffer,adc_buffer,3,ADC_CS);
	
	uint16_t b1 = adc_buffer[1];
	uint16_t b2 = adc_buffer[2];
	
	return b2 | (b1<<8);
}

uint16_t raw_data_buffer[SZ_RAW_DATA_BUFFER];
uint8_t data_package[3 * N_ADC_CHANS];



void package_data(uint8_t* dat, uint16_t mn, uint16_t sd)
{

    /* Take 12-bit mean and standard error values and spread them accross 3 bytes */

    uint16_t d;

    d = 255 & (mn >> 4);
    
    dat[0] = d;
    
    d = 255 & ((mn << 4) | (sd >> 8));

    dat[1] = d;

    d = 255 & sd;

    dat[2] = d;
    
}

void get_raw_data()
{
    status |= (1 << NS_MEASURING);
    int ch = 0;
    for(ch = 0; ch<N_ADC_CHANS; ch++)
    {
        int i = 0;
        uint16_t mean = 0;
        for(i = 0; i<SZ_RAW_DATA_BUFFER; i++)
        {
            raw_data_buffer[i] = get_adc_value(ch);
            mean = mean + raw_data_buffer[i];
            _delay_ms(SAMPLING_DELAY);
        }
        mean = mean / SZ_RAW_DATA_BUFFER;
        uint16_t sd = 0;
        uint16_t dev;
        for(i = 0; i<SZ_RAW_DATA_BUFFER; i++)
        {
            dev = raw_data_buffer[i] > mean ? raw_data_buffer[i] - mean : mean - raw_data_buffer[i];
            sd = sd + dev * dev;   
        }
        sd = sqrt(sd / (SZ_RAW_DATA_BUFFER * (SZ_RAW_DATA_BUFFER-1)));  //Standard error

        package_data(& data_package[3*ch], mean, sd);
    }
    status &= ~(1<<NS_MEASURING);
    status |= (1<<NS_DATA_READY);
}




/* TRANSMIT and RECIEVE HANDLERS FOR MRF24J40 */


void send_packet_in(uint8_t sz_packet)
{
    uint8_t next_address[2];
    next_address[0] = ADDRESS_HI;
    next_address[1] = ADDRESS_LO;

    if(next_address[0] == 0x01) // I am a row coordinator
    {
        if(next_address[1] == 0x01) // I am the first node (send direct to Raspberry Pi
        {
            next_address[0] = PI_ADDRESS_HI;
            next_address[1] = PI_ADDRESS_LO;
        }
        else
        {
            next_address[1] = next_address[1] - 1;
        }

    }
    else
    {
        next_address[0] = next_address[0] - 1;
    }

    mrf_send16(two_bytes(next_address),packet,sz_packet);
}


void send_packet_out(uint8_t sz_packet)
{
    uint8_t next_address[2];
    next_address[0] = ADDRESS_HI;
    next_address[1] = ADDRESS_LO;

    if(next_address[1] < packet[3]) // I am not on target row
    {
        next_address[1] = next_address[1] + 1;
    }
    else
    {
        if(next_address[1] > packet[3]) // This should never happen!
        {
            next_address[1] = next_address[1] - 1;
        }
        else
        {
            next_address[0] = next_address[0] + 1;
        }
    }

    mrf_send16(two_bytes(next_address),packet,sz_packet);
}

void send_data()
{
    uint8_t sz_packet = SZ_ADDRESSING_HEADER + SZ_PKT_CMD + (3*N_ADC_CHANS);
   // uint8_t packet[sz_packet];
    packet[0] = PANID_HI;
    packet[1] = PANID_LO;
    packet[2] = PI_ADDRESS_HI;
    packet[3] = PI_ADDRESS_LO;
    packet[4] = PANID_HI;
    packet[5] = PANID_LO;
    packet[6] = ADDRESS_HI;
    packet[7] = ADDRESS_LO;
    packet[8] = 0; // HOP COUNTER
    packet[9] = sz_packet;
    packet[10] = 0x44;
    packet[11] = 0x41;
    if(status | (1<<NS_DATA_REQUESTED))
    {
        packet[12]= 255 & (last_data_request >> 8);  // If this is requested data will send id of last request. Sends zero if this is auto-data
        packet[13]= 255 & last_data_request;
    }
    else
    {
        packet[12] = 0;
        packet[13] = 0;
    }

    int i = 0;
    
    for(i = 0; i<3*N_ADC_CHANS; i++)
    {
        packet[14+i] = data_package[i];
    }

    send_packet_in(sz_packet);

    status &= ~(1<<NS_DATA_READY);
    if(status | (1<<NS_DATA_REQUESTED)) status &= ~(1<<NS_DATA_REQUESTED);
}

void send_error_report()
{
    uint8_t sz_packet = SZ_ADDRESSING_HEADER + SZ_PKT_CMD;
   // uint8_t packet[sz_packet];
    packet[0] = PANID_HI;
    packet[1] = PANID_LO;
    packet[2] = PI_ADDRESS_HI;
    packet[3] = PI_ADDRESS_LO;
    packet[4] = PANID_HI;
    packet[5] = PANID_LO;
    packet[6] = ADDRESS_HI;
    packet[7] = ADDRESS_LO;
    packet[8] = 0; // HOP COUNTER
    packet[9] = sz_packet;
    packet[10] = 0x45;
    packet[11] = 0x52;
    packet[12] = errcode;
    packet[13] = status;

    send_packet_in(sz_packet);

    status &= ~(1<<NS_ERROR);
    errcode = 0;
}

void relay_packet() {

    uint8_t sz_packet = current_rx_data[9];

    memcpy(packet,current_rx_data,sz_packet);
    packet[8] = packet[8]+1; // Increase hop counter

    if(two_bytes(& packet[2]) == PI_ADDRESS)
    {
        send_packet_in(sz_packet);
    }
    else
    {
        send_packet_out(sz_packet);
    }

    
}

void handle_rx() {


		BLINK(LED_PORT,LED_2);
		BLINK(LED_PORT,LED_2);
		
    if(mrf_get_bufferPHY()){

    }

	uint8_t * rx_data = mrf_get_rxdata();
    memcpy(current_rx_data,rx_data,aMaxPHYPacketSize);


    if(two_bytes(& current_rx_data[3]) == MY_ADDRESS) // Is for me
    {
        if(two_bytes(& current_rx_data[6]) == PI_ADDRESS)  // Is from the Pi (shouldn't be from anywhere else!)
        {
            if(two_bytes(& current_rx_data[10]) == CMD_DATA)
            {
                status |= (1<<NS_DATA_REQUESTED);
                last_data_request = two_bytes(& current_rx_data[12]);

                get_raw_data();
                send_data();
            }
            else
            {
                status |= (1<<NS_ERROR);
                errcode |= (1<<NX_UNREC_CMD);
            }
        }
        else
        {
            status |= (1<<NS_ERROR);
            errcode |= (1<<NX_WRONG_SRC);
        }
    }
    else
    {
        if(current_rx_data[3] == 0 && current_rx_data[4] == 0) // Is for everyone
        {
            
        }
        
      //  relay_packet();

    }

   
}

void handle_tx() {

	

		BLINK(LED_PORT,LED_2);
		
		
    if (mrf_tx_ok()) {
        /*Log transmit ok*/
    } else {
        /*Log transmit failed*/
    }
}


ISR(INT0_vect) {
    mrf_interrupt_handler(); // mrf24 object interrupt routine
}

void setup() {
 /* Data directions */
 

  DDRB |= (1<<MRF_WAKE) | (1<<MRF_RESET) | (1<<MRF_CS);
  DDRB |= (1<<SPI_MOSI) | (1<<SPI_SCK);

  DDRB |= (1<<ADC_CS);
  
  PORTB |= (1<<MRF_CS); //
  PORTB |= (1<<ADC_CS);
  PORTD |= (1<<MRF_INT);
  MRF_RESET_PORT |= (1<<MRF_RESET);
  
  DDRD |= (1<<LED_1) | (1<<LED_2);
 
		BLINK(LED_PORT,LED_1);
		BLINK(LED_PORT,LED_2);
		BLINK(LED_PORT,LED_1);
		BLINK(LED_PORT,LED_2);
  
  spi_set_data_direction(SPI_MSB);
  spi_setup();

	
		BLINK(LED_PORT,LED_1);
		BLINK(LED_PORT,LED_1);

  mrf_reset();
  mrf_init();
  
  
		BLINK(LED_PORT,LED_2);
		BLINK(LED_PORT,LED_2);
  
  mrf_set_pan(ASMP_PANID);
  // This is _our_ address
  mrf_address16_write(MY_ADDRESS); 

  sei();
  EIMSK |= (1<<INT0);
  EICRA |= (1<<ISC01);   
		BLINK(LED_PORT,LED_1);
		BLINK(LED_PORT,LED_2);
		BLINK(LED_PORT,LED_1);
		BLINK(LED_PORT,LED_2);

  status = 0;
  errcode = 0; 
  
  loopcount = 0;
}

void loop() {
    mrf_check_flags(&handle_rx, &handle_tx);

    if(status |= NS_ERROR)
    {
        send_error_report();
    }
    
    loopcount ++;
    if(loopcount > 50)
    {
		loopcount = 0;
		BLINK(LED_PORT,LED_1);
		BLINK(LED_PORT,LED_1);
	}

    _delay_ms(10);
    
    
}

int main(void)
{
    setup();
    while(1) loop();
}
