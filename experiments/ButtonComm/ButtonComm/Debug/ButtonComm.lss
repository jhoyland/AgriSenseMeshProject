
ButtonComm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000064e  000006e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000064e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ff  00800108  00800108  000006ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000071c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b88  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6c  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b88  00000000  00000000  00002ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00003a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006eb  00000000  00000000  00003e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e69  00000000  00000000  0000450f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00005378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	ad c0       	rjmp	.+346    	; 0x15e <__vector_1>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	ee e4       	ldi	r30, 0x4E	; 78
  3c:	f6 e0       	ldi	r31, 0x06	; 6
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a8 30       	cpi	r26, 0x08	; 8
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	22 e0       	ldi	r18, 0x02	; 2
  4c:	a8 e0       	ldi	r26, 0x08	; 8
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a7 30       	cpi	r26, 0x07	; 7
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	ce d0       	rcall	.+412    	; 0x1f8 <main>
  5c:	f6 c2       	rjmp	.+1516   	; 0x64a <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <handle_rx>:
#define SRC_ADDRESS 0x0023
#define DEST_ADDRESS 0x0016


void handle_rx(){
	if(mrf_get_bufferPHY()){} //not needed
  60:	0d d2       	rcall	.+1050   	; 0x47c <mrf_get_bufferPHY>
		
	uint8_t * rx_data = mrf_get_rxdata();
  62:	9f d2       	rcall	.+1342   	; 0x5a2 <mrf_get_rxdata>
	
	if(rx_data[0] == 'a'){
  64:	fc 01       	movw	r30, r24
  66:	80 81       	ld	r24, Z
  68:	81 36       	cpi	r24, 0x61	; 97
  6a:	71 f4       	brne	.+28     	; 0x88 <handle_rx+0x28>
		BLINK(LED_PORT, RECEIVE_LED);
  6c:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6e:	8f e4       	ldi	r24, 0x4F	; 79
  70:	93 ec       	ldi	r25, 0xC3	; 195
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <handle_rx+0x12>
  76:	00 c0       	rjmp	.+0      	; 0x78 <handle_rx+0x18>
  78:	00 00       	nop
  7a:	5c 98       	cbi	0x0b, 4	; 11
  7c:	ef e4       	ldi	r30, 0x4F	; 79
  7e:	f3 ec       	ldi	r31, 0xC3	; 195
  80:	31 97       	sbiw	r30, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <handle_rx+0x20>
  84:	00 c0       	rjmp	.+0      	; 0x86 <handle_rx+0x26>
  86:	00 00       	nop
  88:	08 95       	ret

0000008a <handle_tx>:
		//blink LED for different message
	}
}

void handle_tx(){
	if(mrf_tx_ok()){
  8a:	8e d2       	rcall	.+1308   	; 0x5a8 <mrf_tx_ok>
  8c:	88 23       	and	r24, r24
  8e:	59 f1       	breq	.+86     	; 0xe6 <handle_tx+0x5c>
		BLINK(LED_PORT, SEND_LED);
  90:	5b 9a       	sbi	0x0b, 3	; 11
  92:	8f e4       	ldi	r24, 0x4F	; 79
  94:	93 ec       	ldi	r25, 0xC3	; 195
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <handle_tx+0xc>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <handle_tx+0x12>
  9c:	00 00       	nop
  9e:	5b 98       	cbi	0x0b, 3	; 11
  a0:	8f e4       	ldi	r24, 0x4F	; 79
  a2:	93 ec       	ldi	r25, 0xC3	; 195
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <handle_tx+0x1a>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <handle_tx+0x20>
  aa:	00 00       	nop
		BLINK(LED_PORT, RECEIVE_LED);
  ac:	5c 9a       	sbi	0x0b, 4	; 11
  ae:	8f e4       	ldi	r24, 0x4F	; 79
  b0:	93 ec       	ldi	r25, 0xC3	; 195
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <handle_tx+0x28>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <handle_tx+0x2e>
  b8:	00 00       	nop
  ba:	5c 98       	cbi	0x0b, 4	; 11
  bc:	8f e4       	ldi	r24, 0x4F	; 79
  be:	93 ec       	ldi	r25, 0xC3	; 195
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <handle_tx+0x36>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <handle_tx+0x3c>
  c6:	00 00       	nop
		BLINK(LED_PORT, SEND_LED);
  c8:	5b 9a       	sbi	0x0b, 3	; 11
  ca:	8f e4       	ldi	r24, 0x4F	; 79
  cc:	93 ec       	ldi	r25, 0xC3	; 195
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <handle_tx+0x44>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <handle_tx+0x4a>
  d4:	00 00       	nop
  d6:	5b 98       	cbi	0x0b, 3	; 11
  d8:	8f e4       	ldi	r24, 0x4F	; 79
  da:	93 ec       	ldi	r25, 0xC3	; 195
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <handle_tx+0x52>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <handle_tx+0x58>
  e2:	00 00       	nop
  e4:	08 95       	ret
	}
	else{
		//transmitted and not received acknowledgment
		BLINK(LED_PORT,RECEIVE_LED);
  e6:	5c 9a       	sbi	0x0b, 4	; 11
  e8:	8f e4       	ldi	r24, 0x4F	; 79
  ea:	93 ec       	ldi	r25, 0xC3	; 195
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <handle_tx+0x62>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <handle_tx+0x68>
  f2:	00 00       	nop
  f4:	5c 98       	cbi	0x0b, 4	; 11
  f6:	8f e4       	ldi	r24, 0x4F	; 79
  f8:	93 ec       	ldi	r25, 0xC3	; 195
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <handle_tx+0x70>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <handle_tx+0x76>
 100:	00 00       	nop
		BLINK(LED_PORT,RECEIVE_LED);
 102:	5c 9a       	sbi	0x0b, 4	; 11
 104:	8f e4       	ldi	r24, 0x4F	; 79
 106:	93 ec       	ldi	r25, 0xC3	; 195
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <handle_tx+0x7e>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <handle_tx+0x84>
 10e:	00 00       	nop
 110:	5c 98       	cbi	0x0b, 4	; 11
 112:	8f e4       	ldi	r24, 0x4F	; 79
 114:	93 ec       	ldi	r25, 0xC3	; 195
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <handle_tx+0x8c>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <handle_tx+0x92>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <setup>:
}

void setup(){
	// data directions
	
	DDRB |= (1<<MRF_WAKE) | (1<<MRF_RESET) | (1<<MRF_CS);
 120:	84 b1       	in	r24, 0x04	; 4
 122:	86 64       	ori	r24, 0x46	; 70
 124:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<SPI_MOSI) | (1<<SPI_SCK);
 126:	84 b1       	in	r24, 0x04	; 4
 128:	88 62       	ori	r24, 0x28	; 40
 12a:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<BUTTON);
 12c:	20 98       	cbi	0x04, 0	; 4

	DDRD |= (1<<SEND_LED) | (1<<RECEIVE_LED) | (1<<BUTTON_LED); //sets LED pins to outputs
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	88 69       	ori	r24, 0x98	; 152
 132:	8a b9       	out	0x0a, r24	; 10
	
	PORTB |= (1<<BUTTON) | (1<<MRF_CS) | (1<<MRF_INT); //makes button pin high
 134:	85 b1       	in	r24, 0x05	; 5
 136:	85 60       	ori	r24, 0x05	; 5
 138:	85 b9       	out	0x05, r24	; 5
	MRF_RESET_PORT |= (1<<MRF_RESET);
 13a:	29 9a       	sbi	0x05, 1	; 5
	spi_set_data_direction(SPI_MSB);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	38 d2       	rcall	.+1136   	; 0x5b0 <spi_set_data_direction>
	spi_setup();
 140:	41 d2       	rcall	.+1154   	; 0x5c4 <spi_setup>
	
	mrf_reset();
 142:	5d d0       	rcall	.+186    	; 0x1fe <mrf_reset>
	mrf_init();
 144:	48 d1       	rcall	.+656    	; 0x3d6 <mrf_init>
	
	sei(); //starts interrupts, essential to let chip know message is being handled
 146:	78 94       	sei
	EIMSK |= (1<<INT0);
 148:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC01);
 14a:	e9 e6       	ldi	r30, 0x69	; 105
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	82 60       	ori	r24, 0x02	; 2
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <pollButton>:
}

uint8_t pollButton()
{
	if(BUTTON_PIN & (1<<BUTTON)) return 0;
 156:	83 b1       	in	r24, 0x03	; 3
 158:	80 95       	com	r24
	else return 1;
}
 15a:	81 70       	andi	r24, 0x01	; 1
 15c:	08 95       	ret

0000015e <__vector_1>:


ISR(INT0_vect){
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	mrf_interrupt_handler(); //mrf24 object interrupt routine
 180:	89 d1       	rcall	.+786    	; 0x494 <mrf_interrupt_handler>
}
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	7f 91       	pop	r23
 190:	6f 91       	pop	r22
 192:	5f 91       	pop	r21
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <loop>:

void loop(){
	mrf_check_flags(&handle_rx, &handle_tx);
 1a4:	65 e4       	ldi	r22, 0x45	; 69
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	80 e3       	ldi	r24, 0x30	; 48
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	51 d1       	rcall	.+674    	; 0x450 <mrf_check_flags>
	if(pollButton()){
 1ae:	d3 df       	rcall	.-90     	; 0x156 <pollButton>
 1b0:	88 23       	and	r24, r24
 1b2:	e1 f0       	breq	.+56     	; 0x1ec <loop+0x48>
		BLINK(LED_PORT,BUTTON_LED); //if button is pushed, LED blinks
 1b4:	5f 9a       	sbi	0x0b, 7	; 11
 1b6:	8f e4       	ldi	r24, 0x4F	; 79
 1b8:	93 ec       	ldi	r25, 0xC3	; 195
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <loop+0x16>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <loop+0x1c>
 1c0:	00 00       	nop
 1c2:	5f 98       	cbi	0x0b, 7	; 11
 1c4:	8f e4       	ldi	r24, 0x4F	; 79
 1c6:	93 ec       	ldi	r25, 0xC3	; 195
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <loop+0x24>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <loop+0x2a>
 1ce:	00 00       	nop
		//on button push, send message and blink to confirm message is sent
		mrf_send16(DEST_ADDRESS, (uint8_t*)msg, 4);	
 1d0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 1d4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 1d8:	44 e0       	ldi	r20, 0x04	; 4
 1da:	86 e1       	ldi	r24, 0x16	; 22
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	8c d0       	rcall	.+280    	; 0x2f8 <mrf_send16>
		mrf_check_flags(&handle_rx, &handle_tx);	
 1e0:	65 e4       	ldi	r22, 0x45	; 69
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	80 e3       	ldi	r24, 0x30	; 48
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	33 d1       	rcall	.+614    	; 0x450 <mrf_check_flags>
 1ea:	08 95       	ret
	}
	else{
		mrf_check_flags(&handle_rx, &handle_tx);
 1ec:	65 e4       	ldi	r22, 0x45	; 69
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	80 e3       	ldi	r24, 0x30	; 48
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	2d d1       	rcall	.+602    	; 0x450 <mrf_check_flags>
 1f6:	08 95       	ret

000001f8 <main>:
	
}

int main(void)
{
	setup();
 1f8:	93 df       	rcall	.-218    	; 0x120 <setup>
    while (1) loop();
 1fa:	d4 df       	rcall	.-88     	; 0x1a4 <loop>
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <main+0x2>

000001fe <mrf_reset>:
        mrf_write_long(MRF_TESTMODE, 0x00); // Disable PA/LNA on MRF24J40MB module.
    }
}

void mrf_rx_flush(void) {
    mrf_write_short(MRF_RXFLUSH, 0x01);
 1fe:	29 98       	cbi	0x05, 1	; 5
 200:	83 ec       	ldi	r24, 0xC3	; 195
 202:	99 e0       	ldi	r25, 0x09	; 9
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <mrf_reset+0x6>
 208:	00 c0       	rjmp	.+0      	; 0x20a <mrf_reset+0xc>
 20a:	00 00       	nop
 20c:	29 9a       	sbi	0x05, 1	; 5
 20e:	87 e8       	ldi	r24, 0x87	; 135
 210:	93 e1       	ldi	r25, 0x13	; 19
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <mrf_reset+0x14>
 216:	00 c0       	rjmp	.+0      	; 0x218 <mrf_reset+0x1a>
 218:	00 00       	nop
 21a:	08 95       	ret

0000021c <mrf_read_short>:
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	c8 e0       	ldi	r28, 0x08	; 8
 222:	d1 e0       	ldi	r29, 0x01	; 1
 224:	88 0f       	add	r24, r24
 226:	8e 77       	andi	r24, 0x7E	; 126
 228:	88 83       	st	Y, r24
 22a:	19 82       	std	Y+1, r1	; 0x01
 22c:	22 e0       	ldi	r18, 0x02	; 2
 22e:	42 e0       	ldi	r20, 0x02	; 2
 230:	be 01       	movw	r22, r28
 232:	ce 01       	movw	r24, r28
 234:	d4 d1       	rcall	.+936    	; 0x5de <spi_transfer_nbytes>
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <mrf_read_long>:
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	c8 e0       	ldi	r28, 0x08	; 8
 244:	d1 e0       	ldi	r29, 0x01	; 1
 246:	9c 01       	movw	r18, r24
 248:	36 95       	lsr	r19
 24a:	27 95       	ror	r18
 24c:	36 95       	lsr	r19
 24e:	27 95       	ror	r18
 250:	36 95       	lsr	r19
 252:	27 95       	ror	r18
 254:	20 68       	ori	r18, 0x80	; 128
 256:	28 83       	st	Y, r18
 258:	82 95       	swap	r24
 25a:	88 0f       	add	r24, r24
 25c:	80 7e       	andi	r24, 0xE0	; 224
 25e:	89 83       	std	Y+1, r24	; 0x01
 260:	1a 82       	std	Y+2, r1	; 0x02
 262:	22 e0       	ldi	r18, 0x02	; 2
 264:	43 e0       	ldi	r20, 0x03	; 3
 266:	be 01       	movw	r22, r28
 268:	ce 01       	movw	r24, r28
 26a:	b9 d1       	rcall	.+882    	; 0x5de <spi_transfer_nbytes>
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <mrf_write_short>:
 274:	e8 e0       	ldi	r30, 0x08	; 8
 276:	f1 e0       	ldi	r31, 0x01	; 1
 278:	88 0f       	add	r24, r24
 27a:	8e 77       	andi	r24, 0x7E	; 126
 27c:	81 60       	ori	r24, 0x01	; 1
 27e:	80 83       	st	Z, r24
 280:	61 83       	std	Z+1, r22	; 0x01
 282:	22 e0       	ldi	r18, 0x02	; 2
 284:	42 e0       	ldi	r20, 0x02	; 2
 286:	bf 01       	movw	r22, r30
 288:	cf 01       	movw	r24, r30
 28a:	a9 d1       	rcall	.+850    	; 0x5de <spi_transfer_nbytes>
 28c:	08 95       	ret

0000028e <mrf_write_long>:
 28e:	e8 e0       	ldi	r30, 0x08	; 8
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	9c 01       	movw	r18, r24
 294:	36 95       	lsr	r19
 296:	27 95       	ror	r18
 298:	36 95       	lsr	r19
 29a:	27 95       	ror	r18
 29c:	36 95       	lsr	r19
 29e:	27 95       	ror	r18
 2a0:	20 68       	ori	r18, 0x80	; 128
 2a2:	20 83       	st	Z, r18
 2a4:	82 95       	swap	r24
 2a6:	88 0f       	add	r24, r24
 2a8:	80 7e       	andi	r24, 0xE0	; 224
 2aa:	80 61       	ori	r24, 0x10	; 16
 2ac:	81 83       	std	Z+1, r24	; 0x01
 2ae:	62 83       	std	Z+2, r22	; 0x02
 2b0:	22 e0       	ldi	r18, 0x02	; 2
 2b2:	43 e0       	ldi	r20, 0x03	; 3
 2b4:	bf 01       	movw	r22, r30
 2b6:	cf 01       	movw	r24, r30
 2b8:	92 d1       	rcall	.+804    	; 0x5de <spi_transfer_nbytes>
 2ba:	08 95       	ret

000002bc <mrf_get_pan>:
 2bc:	cf 93       	push	r28
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	ad df       	rcall	.-166    	; 0x21c <mrf_read_short>
 2c2:	c8 2f       	mov	r28, r24
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	aa df       	rcall	.-172    	; 0x21c <mrf_read_short>
 2c8:	2c 2f       	mov	r18, r28
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	32 2f       	mov	r19, r18
 2ce:	22 27       	eor	r18, r18
 2d0:	a9 01       	movw	r20, r18
 2d2:	48 2b       	or	r20, r24
 2d4:	ca 01       	movw	r24, r20
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <mrf_address16_read>:
 2da:	cf 93       	push	r28
 2dc:	84 e0       	ldi	r24, 0x04	; 4
 2de:	9e df       	rcall	.-196    	; 0x21c <mrf_read_short>
 2e0:	c8 2f       	mov	r28, r24
 2e2:	83 e0       	ldi	r24, 0x03	; 3
 2e4:	9b df       	rcall	.-202    	; 0x21c <mrf_read_short>
 2e6:	2c 2f       	mov	r18, r28
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	32 2f       	mov	r19, r18
 2ec:	22 27       	eor	r18, r18
 2ee:	a9 01       	movw	r20, r18
 2f0:	48 2b       	or	r20, r24
 2f2:	ca 01       	movw	r24, r20
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <mrf_send16>:
 2f8:	df 92       	push	r13
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	d8 2f       	mov	r29, r24
 308:	c9 2f       	mov	r28, r25
 30a:	7b 01       	movw	r14, r22
 30c:	d4 2e       	mov	r13, r20
 30e:	69 e0       	ldi	r22, 0x09	; 9
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	bc df       	rcall	.-136    	; 0x28e <mrf_write_long>
 316:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <ignoreBytes>
 31a:	67 5f       	subi	r22, 0xF7	; 247
 31c:	6d 0d       	add	r22, r13
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	b5 df       	rcall	.-150    	; 0x28e <mrf_write_long>
 324:	61 e6       	ldi	r22, 0x61	; 97
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	b1 df       	rcall	.-158    	; 0x28e <mrf_write_long>
 32c:	68 e8       	ldi	r22, 0x88	; 136
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	ad df       	rcall	.-166    	; 0x28e <mrf_write_long>
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	84 e0       	ldi	r24, 0x04	; 4
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	a9 df       	rcall	.-174    	; 0x28e <mrf_write_long>
 33c:	bf df       	rcall	.-130    	; 0x2bc <mrf_get_pan>
 33e:	19 2f       	mov	r17, r25
 340:	68 2f       	mov	r22, r24
 342:	85 e0       	ldi	r24, 0x05	; 5
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	a3 df       	rcall	.-186    	; 0x28e <mrf_write_long>
 348:	61 2f       	mov	r22, r17
 34a:	86 e0       	ldi	r24, 0x06	; 6
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	9f df       	rcall	.-194    	; 0x28e <mrf_write_long>
 350:	6d 2f       	mov	r22, r29
 352:	87 e0       	ldi	r24, 0x07	; 7
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	9b df       	rcall	.-202    	; 0x28e <mrf_write_long>
 358:	6c 2f       	mov	r22, r28
 35a:	88 e0       	ldi	r24, 0x08	; 8
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	97 df       	rcall	.-210    	; 0x28e <mrf_write_long>
 360:	bc df       	rcall	.-136    	; 0x2da <mrf_address16_read>
 362:	c9 2f       	mov	r28, r25
 364:	68 2f       	mov	r22, r24
 366:	89 e0       	ldi	r24, 0x09	; 9
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	91 df       	rcall	.-222    	; 0x28e <mrf_write_long>
 36c:	6c 2f       	mov	r22, r28
 36e:	8a e0       	ldi	r24, 0x0A	; 10
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	8d df       	rcall	.-230    	; 0x28e <mrf_write_long>
 374:	c0 91 83 01 	lds	r28, 0x0183	; 0x800183 <ignoreBytes>
 378:	d0 91 84 01 	lds	r29, 0x0184	; 0x800184 <ignoreBytes+0x1>
 37c:	2b 96       	adiw	r28, 0x0b	; 11
 37e:	dd 20       	and	r13, r13
 380:	61 f0       	breq	.+24     	; 0x39a <__stack+0x9b>
 382:	87 01       	movw	r16, r14
 384:	ed 0c       	add	r14, r13
 386:	f1 1c       	adc	r15, r1
 388:	f8 01       	movw	r30, r16
 38a:	61 91       	ld	r22, Z+
 38c:	8f 01       	movw	r16, r30
 38e:	ce 01       	movw	r24, r28
 390:	7e df       	rcall	.-260    	; 0x28e <mrf_write_long>
 392:	21 96       	adiw	r28, 0x01	; 1
 394:	0e 15       	cp	r16, r14
 396:	1f 05       	cpc	r17, r15
 398:	b9 f7       	brne	.-18     	; 0x388 <__stack+0x89>
 39a:	65 e0       	ldi	r22, 0x05	; 5
 39c:	8b e1       	ldi	r24, 0x1B	; 27
 39e:	6a df       	rcall	.-300    	; 0x274 <mrf_write_short>
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	ff 90       	pop	r15
 3aa:	ef 90       	pop	r14
 3ac:	df 90       	pop	r13
 3ae:	08 95       	ret

000003b0 <mrf_set_interrupts>:
 3b0:	66 ef       	ldi	r22, 0xF6	; 246
 3b2:	82 e3       	ldi	r24, 0x32	; 50
 3b4:	5f df       	rcall	.-322    	; 0x274 <mrf_write_short>
 3b6:	08 95       	ret

000003b8 <mrf_set_channel>:
 3b8:	68 2f       	mov	r22, r24
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	6b 50       	subi	r22, 0x0B	; 11
 3be:	71 09       	sbc	r23, r1
 3c0:	62 95       	swap	r22
 3c2:	72 95       	swap	r23
 3c4:	70 7f       	andi	r23, 0xF0	; 240
 3c6:	76 27       	eor	r23, r22
 3c8:	60 7f       	andi	r22, 0xF0	; 240
 3ca:	76 27       	eor	r23, r22
 3cc:	63 60       	ori	r22, 0x03	; 3
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	92 e0       	ldi	r25, 0x02	; 2
 3d2:	5d df       	rcall	.-326    	; 0x28e <mrf_write_long>
 3d4:	08 95       	ret

000003d6 <mrf_init>:
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	eb d0       	rcall	.+470    	; 0x5b0 <spi_set_data_direction>
 3da:	68 e9       	ldi	r22, 0x98	; 152
 3dc:	88 e1       	ldi	r24, 0x18	; 24
 3de:	4a df       	rcall	.-364    	; 0x274 <mrf_write_short>
 3e0:	65 e9       	ldi	r22, 0x95	; 149
 3e2:	8e e2       	ldi	r24, 0x2E	; 46
 3e4:	47 df       	rcall	.-370    	; 0x274 <mrf_write_short>
 3e6:	63 e0       	ldi	r22, 0x03	; 3
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	92 e0       	ldi	r25, 0x02	; 2
 3ec:	50 df       	rcall	.-352    	; 0x28e <mrf_write_long>
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	92 e0       	ldi	r25, 0x02	; 2
 3f4:	4c df       	rcall	.-360    	; 0x28e <mrf_write_long>
 3f6:	60 e8       	ldi	r22, 0x80	; 128
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	92 e0       	ldi	r25, 0x02	; 2
 3fc:	48 df       	rcall	.-368    	; 0x28e <mrf_write_long>
 3fe:	60 e9       	ldi	r22, 0x90	; 144
 400:	86 e0       	ldi	r24, 0x06	; 6
 402:	92 e0       	ldi	r25, 0x02	; 2
 404:	44 df       	rcall	.-376    	; 0x28e <mrf_write_long>
 406:	60 e8       	ldi	r22, 0x80	; 128
 408:	87 e0       	ldi	r24, 0x07	; 7
 40a:	92 e0       	ldi	r25, 0x02	; 2
 40c:	40 df       	rcall	.-384    	; 0x28e <mrf_write_long>
 40e:	60 e1       	ldi	r22, 0x10	; 16
 410:	88 e0       	ldi	r24, 0x08	; 8
 412:	92 e0       	ldi	r25, 0x02	; 2
 414:	3c df       	rcall	.-392    	; 0x28e <mrf_write_long>
 416:	61 e2       	ldi	r22, 0x21	; 33
 418:	80 e2       	ldi	r24, 0x20	; 32
 41a:	92 e0       	ldi	r25, 0x02	; 2
 41c:	38 df       	rcall	.-400    	; 0x28e <mrf_write_long>
 41e:	60 e8       	ldi	r22, 0x80	; 128
 420:	8a e3       	ldi	r24, 0x3A	; 58
 422:	28 df       	rcall	.-432    	; 0x274 <mrf_write_short>
 424:	60 e6       	ldi	r22, 0x60	; 96
 426:	8f e3       	ldi	r24, 0x3F	; 63
 428:	25 df       	rcall	.-438    	; 0x274 <mrf_write_short>
 42a:	60 e4       	ldi	r22, 0x40	; 64
 42c:	8e e3       	ldi	r24, 0x3E	; 62
 42e:	22 df       	rcall	.-444    	; 0x274 <mrf_write_short>
 430:	bf df       	rcall	.-130    	; 0x3b0 <mrf_set_interrupts>
 432:	8c e0       	ldi	r24, 0x0C	; 12
 434:	c1 df       	rcall	.-126    	; 0x3b8 <mrf_set_channel>
 436:	64 e0       	ldi	r22, 0x04	; 4
 438:	86 e3       	ldi	r24, 0x36	; 54
 43a:	1c df       	rcall	.-456    	; 0x274 <mrf_write_short>
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	86 e3       	ldi	r24, 0x36	; 54
 440:	19 df       	rcall	.-462    	; 0x274 <mrf_write_short>
 442:	89 ef       	ldi	r24, 0xF9	; 249
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
 44e:	08 95       	ret

00000450 <mrf_check_flags>:
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	fc 01       	movw	r30, r24
 456:	eb 01       	movw	r28, r22
 458:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <flag_got_rx>
 45c:	99 23       	and	r25, r25
 45e:	19 f0       	breq	.+6      	; 0x466 <mrf_check_flags+0x16>
 460:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <flag_got_rx>
 464:	09 95       	icall
 466:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <flag_got_tx>
 46a:	88 23       	and	r24, r24
 46c:	21 f0       	breq	.+8      	; 0x476 <mrf_check_flags+0x26>
 46e:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <flag_got_tx>
 472:	fe 01       	movw	r30, r28
 474:	09 95       	icall
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <mrf_get_bufferPHY>:
 47c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <mrf_flags>
 480:	84 60       	ori	r24, 0x04	; 4
 482:	08 95       	ret

00000484 <mrf_rx_disable>:
}

void mrf_rx_disable(void) {
    mrf_write_short(MRF_BBREG1, 0x04);  // RXDECINV - disable receiver
 484:	64 e0       	ldi	r22, 0x04	; 4
 486:	89 e3       	ldi	r24, 0x39	; 57
 488:	f5 de       	rcall	.-534    	; 0x274 <mrf_write_short>
 48a:	08 95       	ret

0000048c <mrf_rx_enable>:
}

void mrf_rx_enable(void) {
    mrf_write_short(MRF_BBREG1, 0x00);  // RXDECINV - enable receiver
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	89 e3       	ldi	r24, 0x39	; 57
 490:	f1 de       	rcall	.-542    	; 0x274 <mrf_write_short>
 492:	08 95       	ret

00000494 <mrf_interrupt_handler>:
 * Call this from within an interrupt handler connected to the MRFs output
 * interrupt pin.  It handles reading in any data from the module, and letting it
 * continue working.
 * Only the most recent data is ever kept.
 */
void mrf_interrupt_handler(void) {
 494:	af 92       	push	r10
 496:	bf 92       	push	r11
 498:	cf 92       	push	r12
 49a:	df 92       	push	r13
 49c:	ef 92       	push	r14
 49e:	ff 92       	push	r15
 4a0:	0f 93       	push	r16
 4a2:	1f 93       	push	r17
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
    uint8_t last_interrupt = mrf_read_short(MRF_INTSTAT);
 4a8:	81 e3       	ldi	r24, 0x31	; 49
 4aa:	b8 de       	rcall	.-656    	; 0x21c <mrf_read_short>
 4ac:	b8 2e       	mov	r11, r24
    if (last_interrupt & MRF_I_RXIF) {
 4ae:	83 ff       	sbrs	r24, 3
 4b0:	51 c0       	rjmp	.+162    	; 0x554 <mrf_interrupt_handler+0xc0>
        int i = 0;
        flag_got_rx++;
 4b2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <flag_got_rx>
 4b6:	8f 5f       	subi	r24, 0xFF	; 255
 4b8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <flag_got_rx>
        // read out the packet data...
        cli();
 4bc:	f8 94       	cli
        mrf_rx_disable();
 4be:	e2 df       	rcall	.-60     	; 0x484 <mrf_rx_disable>
        // read start of rxfifo for, has 2 bytes more added by FCS. frame_length = m + n + 2
        uint8_t frame_length = mrf_read_long(0x300);
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	93 e0       	ldi	r25, 0x03	; 3
 4c4:	bc de       	rcall	.-648    	; 0x23e <mrf_read_long>
 4c6:	a8 2e       	mov	r10, r24

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
 4c8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <mrf_flags>
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 4cc:	ea 2c       	mov	r14, r10
 4ce:	f1 2c       	mov	r15, r1
 4d0:	1e 14       	cp	r1, r14
 4d2:	1f 04       	cpc	r1, r15
 4d4:	9c f4       	brge	.+38     	; 0x4fc <mrf_interrupt_handler+0x68>
 4d6:	c7 01       	movw	r24, r14
 4d8:	9c 01       	movw	r18, r24
 4da:	2b 57       	subi	r18, 0x7B	; 123
 4dc:	3e 4f       	sbci	r19, 0xFE	; 254
 4de:	69 01       	movw	r12, r18
 4e0:	c5 e8       	ldi	r28, 0x85	; 133
 4e2:	d1 e0       	ldi	r29, 0x01	; 1
                rx_buf[rb_ptr++] = mrf_read_long(0x301 + i);
 4e4:	01 e0       	ldi	r16, 0x01	; 1
 4e6:	13 e0       	ldi	r17, 0x03	; 3
 4e8:	05 58       	subi	r16, 0x85	; 133
 4ea:	11 40       	sbci	r17, 0x01	; 1
 4ec:	c8 01       	movw	r24, r16
 4ee:	8c 0f       	add	r24, r28
 4f0:	9d 1f       	adc	r25, r29
 4f2:	a5 de       	rcall	.-694    	; 0x23e <mrf_read_long>
 4f4:	89 93       	st	Y+, r24
        uint8_t frame_length = mrf_read_long(0x300);

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 4f6:	cc 15       	cp	r28, r12
 4f8:	dd 05       	cpc	r29, r13
 4fa:	c1 f7       	brne	.-16     	; 0x4ec <mrf_interrupt_handler+0x58>
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 4fc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rx_info>
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0b 97       	sbiw	r24, 0x0b	; 11
 504:	18 16       	cp	r1, r24
 506:	19 06       	cpc	r1, r25
 508:	ac f4       	brge	.+42     	; 0x534 <mrf_interrupt_handler+0xa0>
 50a:	cd e0       	ldi	r28, 0x0D	; 13
 50c:	d1 e0       	ldi	r29, 0x01	; 1
 50e:	c1 2c       	mov	r12, r1
 510:	d1 2c       	mov	r13, r1
uint8_t * mrf_get_rxbuf(void) {
    return rx_buf;
}

int mrf_rx_datalength(void) {
    return rx_info.frame_length - bytes_nodata;
 512:	0c e0       	ldi	r16, 0x0C	; 12
 514:	11 e0       	ldi	r17, 0x01	; 1

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
 516:	3f ef       	ldi	r19, 0xFF	; 255
 518:	c3 1a       	sub	r12, r19
 51a:	d3 0a       	sbc	r13, r19
 51c:	c6 01       	movw	r24, r12
 51e:	87 5f       	subi	r24, 0xF7	; 247
 520:	9c 4f       	sbci	r25, 0xFC	; 252
 522:	8d de       	rcall	.-742    	; 0x23e <mrf_read_long>
 524:	89 93       	st	Y+, r24
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 526:	f8 01       	movw	r30, r16
 528:	80 81       	ld	r24, Z
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0b 97       	sbiw	r24, 0x0b	; 11
 52e:	c8 16       	cp	r12, r24
 530:	d9 06       	cpc	r13, r25
 532:	8c f3       	brlt	.-30     	; 0x516 <mrf_interrupt_handler+0x82>
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
        }

        rx_info.frame_length = frame_length;
 534:	a0 92 0c 01 	sts	0x010C, r10	; 0x80010c <rx_info>
        // same as datasheet 0x301 + (m + n + 2) <-- frame_length
        rx_info.lqi = mrf_read_long(0x301 + frame_length);
 538:	c7 01       	movw	r24, r14
 53a:	8f 5f       	subi	r24, 0xFF	; 255
 53c:	9c 4f       	sbci	r25, 0xFC	; 252
 53e:	7f de       	rcall	.-770    	; 0x23e <mrf_read_long>
 540:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <rx_info+0x75>
        // same as datasheet 0x301 + (m + n + 3) <-- frame_length + 1
        rx_info.rssi = mrf_read_long(0x301 + frame_length + 1);
 544:	c7 01       	movw	r24, r14
 546:	8e 5f       	subi	r24, 0xFE	; 254
 548:	9c 4f       	sbci	r25, 0xFC	; 252
 54a:	79 de       	rcall	.-782    	; 0x23e <mrf_read_long>
 54c:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <rx_info+0x76>

        mrf_rx_enable();
 550:	9d df       	rcall	.-198    	; 0x48c <mrf_rx_enable>
        sei();
 552:	78 94       	sei
    }
    if (last_interrupt & MRF_I_TXNIF) {
 554:	b0 fe       	sbrs	r11, 0
 556:	1a c0       	rjmp	.+52     	; 0x58c <mrf_interrupt_handler+0xf8>
        flag_got_tx++;
 558:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <flag_got_tx>
 55c:	8f 5f       	subi	r24, 0xFF	; 255
 55e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <flag_got_tx>
        uint8_t tmp = mrf_read_short(MRF_TXSTAT);
 562:	84 e2       	ldi	r24, 0x24	; 36
 564:	5b de       	rcall	.-842    	; 0x21c <mrf_read_short>
        // 1 means it failed, we want 1 to mean it worked.
        tx_info.tx_ok = !(tmp & ~(1 << TXNSTAT));
 566:	98 2f       	mov	r25, r24
 568:	9e 7f       	andi	r25, 0xFE	; 254
 56a:	21 e0       	ldi	r18, 0x01	; 1
 56c:	09 f0       	breq	.+2      	; 0x570 <mrf_interrupt_handler+0xdc>
 56e:	20 e0       	ldi	r18, 0x00	; 0
 570:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tx_info>
 574:	20 fb       	bst	r18, 0
 576:	90 f9       	bld	r25, 0
        tx_info.retries = tmp >> 6;
 578:	82 95       	swap	r24
 57a:	86 95       	lsr	r24
 57c:	86 95       	lsr	r24
 57e:	83 70       	andi	r24, 0x03	; 3
 580:	88 0f       	add	r24, r24
 582:	99 7f       	andi	r25, 0xF9	; 249
        tx_info.channel_busy = (tmp & (1 << CCAFAIL));
 584:	89 2b       	or	r24, r25
 586:	87 7f       	andi	r24, 0xF7	; 247
 588:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tx_info>
    }
}
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	1f 91       	pop	r17
 592:	0f 91       	pop	r16
 594:	ff 90       	pop	r15
 596:	ef 90       	pop	r14
 598:	df 90       	pop	r13
 59a:	cf 90       	pop	r12
 59c:	bf 90       	pop	r11
 59e:	af 90       	pop	r10
 5a0:	08 95       	ret

000005a2 <mrf_get_rxdata>:
}

uint8_t* mrf_get_rxdata()
{
	return rx_info.rx_data;
}
 5a2:	8d e0       	ldi	r24, 0x0D	; 13
 5a4:	91 e0       	ldi	r25, 0x01	; 1
 5a6:	08 95       	ret

000005a8 <mrf_tx_ok>:


uint8_t mrf_tx_ok()
{
	return tx_info.tx_ok;
 5a8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tx_info>
}
 5ac:	81 70       	andi	r24, 0x01	; 1
 5ae:	08 95       	ret

000005b0 <spi_set_data_direction>:

void spi_set_data_direction(uint8_t d)
{
    /*USI version of SPI can only do LSB first*/
    #ifndef SPI_ON_USI
    if(d == SPI_LSB)
 5b0:	81 11       	cpse	r24, r1
 5b2:	04 c0       	rjmp	.+8      	; 0x5bc <spi_set_data_direction+0xc>
        SPCR |=  (1 << DORD);
 5b4:	8c b5       	in	r24, 0x2c	; 44
 5b6:	80 62       	ori	r24, 0x20	; 32
 5b8:	8c bd       	out	0x2c, r24	; 44
 5ba:	08 95       	ret
    else
        SPCR &= ~(1 << DORD);
 5bc:	8c b5       	in	r24, 0x2c	; 44
 5be:	8f 7d       	andi	r24, 0xDF	; 223
 5c0:	8c bd       	out	0x2c, r24	; 44
 5c2:	08 95       	ret

000005c4 <spi_setup>:

void spi_setup()
{

	#ifndef SPI_ON_USI
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
 5c4:	81 e5       	ldi	r24, 0x51	; 81
 5c6:	8c bd       	out	0x2c, r24	; 44
 5c8:	08 95       	ret

000005ca <spi_transfer_byte>:
/*Transfers a single byte between master and slave*/

void spi_transfer_byte(uint8_t* bout, uint8_t* bin)
{
	/*Outgoing data into data register*/
	DATAREG = *bout;
 5ca:	fc 01       	movw	r30, r24
 5cc:	80 81       	ld	r24, Z
 5ce:	8e bd       	out	0x2e, r24	; 46

	while(! SPI_BYTE_XFER_DONE)
 5d0:	0d b4       	in	r0, 0x2d	; 45
 5d2:	07 fe       	sbrs	r0, 7
 5d4:	fd cf       	rjmp	.-6      	; 0x5d0 <spi_transfer_byte+0x6>
		USICR = usi_clk_lo;
		USICR = usi_clk_hi;
		#endif
	} 
	/*Incomming data out of data register*/
	*bin = DATAREG;
 5d6:	8e b5       	in	r24, 0x2e	; 46
 5d8:	fb 01       	movw	r30, r22
 5da:	80 83       	st	Z, r24
 5dc:	08 95       	ret

000005de <spi_transfer_nbytes>:
}

/*Selects the slave (cs)  and transfers n bytes. The input and output buffers must be defined and contain at least n bytes each*/

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
 5de:	cf 92       	push	r12
 5e0:	df 92       	push	r13
 5e2:	ef 92       	push	r14
 5e4:	ff 92       	push	r15
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	ec 01       	movw	r28, r24
 5f0:	8b 01       	movw	r16, r22
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
 5f2:	85 b1       	in	r24, 0x05	; 5
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	6b 01       	movw	r12, r22
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <spi_transfer_nbytes+0x22>
 5fc:	cc 0c       	add	r12, r12
 5fe:	dd 1c       	adc	r13, r13
 600:	2a 95       	dec	r18
 602:	e2 f7       	brpl	.-8      	; 0x5fc <spi_transfer_nbytes+0x1e>
 604:	9c 2d       	mov	r25, r12
 606:	90 95       	com	r25
 608:	89 23       	and	r24, r25
 60a:	85 b9       	out	0x05, r24	; 5
	while(n)
 60c:	44 23       	and	r20, r20
 60e:	89 f0       	breq	.+34     	; 0x632 <spi_transfer_nbytes+0x54>
 610:	41 50       	subi	r20, 0x01	; 1
 612:	e4 2e       	mov	r14, r20
 614:	f1 2c       	mov	r15, r1
 616:	8f ef       	ldi	r24, 0xFF	; 255
 618:	e8 1a       	sub	r14, r24
 61a:	f8 0a       	sbc	r15, r24
 61c:	ec 0e       	add	r14, r28
 61e:	fd 1e       	adc	r15, r29
	{
		spi_transfer_byte(out,in);    /*transfer byte */
 620:	b8 01       	movw	r22, r16
 622:	ce 01       	movw	r24, r28
 624:	d2 df       	rcall	.-92     	; 0x5ca <spi_transfer_byte>
		/*advance iterators*/
		out = out + 1;
 626:	21 96       	adiw	r28, 0x01	; 1
		in = in + 1;
 628:	0f 5f       	subi	r16, 0xFF	; 255
 62a:	1f 4f       	sbci	r17, 0xFF	; 255
/*Selects the slave (cs)  and transfers n bytes. The input and output buffers must be defined and contain at least n bytes each*/

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
	while(n)
 62c:	ec 16       	cp	r14, r28
 62e:	fd 06       	cpc	r15, r29
 630:	b9 f7       	brne	.-18     	; 0x620 <spi_transfer_nbytes+0x42>
		/*advance iterators*/
		out = out + 1;
		in = in + 1;
		n = n - 1;
	}
	CS_PORT |= 1<<cs;/*Deselect slave chip*/
 632:	85 b1       	in	r24, 0x05	; 5
 634:	c8 2a       	or	r12, r24
 636:	c5 b8       	out	0x05, r12	; 5
}
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	1f 91       	pop	r17
 63e:	0f 91       	pop	r16
 640:	ff 90       	pop	r15
 642:	ef 90       	pop	r14
 644:	df 90       	pop	r13
 646:	cf 90       	pop	r12
 648:	08 95       	ret

0000064a <_exit>:
 64a:	f8 94       	cli

0000064c <__stop_program>:
 64c:	ff cf       	rjmp	.-2      	; 0x64c <__stop_program>
