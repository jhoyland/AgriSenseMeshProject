
ButtonComm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000744  000007d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000744  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000101  0080010a  0080010a  000007e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000814  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e1f  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a84  00000000  00000000  000027f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c56  00000000  00000000  0000327b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00003ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000711  00000000  00000000  0000429c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001101  00000000  00000000  000049ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00005aae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	0b c3       	rjmp	.+1558   	; 0x61a <__vector_1>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	e4 e4       	ldi	r30, 0x44	; 68
  3c:	f7 e0       	ldi	r31, 0x07	; 7
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	aa 30       	cpi	r26, 0x0A	; 10
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	22 e0       	ldi	r18, 0x02	; 2
  4c:	aa e0       	ldi	r26, 0x0A	; 10
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	ab 30       	cpi	r26, 0x0B	; 11
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	6f d3       	rcall	.+1758   	; 0x73a <main>
  5c:	71 c3       	rjmp	.+1762   	; 0x740 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <mrf_reset>:
        mrf_write_long(MRF_TESTMODE, 0x00); // Disable PA/LNA on MRF24J40MB module.
    }
}

void mrf_rx_flush(void) {
    mrf_write_short(MRF_RXFLUSH, 0x01);
  60:	29 98       	cbi	0x05, 1	; 5
  62:	83 ec       	ldi	r24, 0xC3	; 195
  64:	99 e0       	ldi	r25, 0x09	; 9
  66:	01 97       	sbiw	r24, 0x01	; 1
  68:	f1 f7       	brne	.-4      	; 0x66 <mrf_reset+0x6>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <mrf_reset+0xc>
  6c:	00 00       	nop
  6e:	29 9a       	sbi	0x05, 1	; 5
  70:	87 e8       	ldi	r24, 0x87	; 135
  72:	93 e1       	ldi	r25, 0x13	; 19
  74:	01 97       	sbiw	r24, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <mrf_reset+0x14>
  78:	00 c0       	rjmp	.+0      	; 0x7a <mrf_reset+0x1a>
  7a:	00 00       	nop
  7c:	08 95       	ret

0000007e <mrf_read_short>:
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	ca e0       	ldi	r28, 0x0A	; 10
  84:	d1 e0       	ldi	r29, 0x01	; 1
  86:	88 0f       	add	r24, r24
  88:	8e 77       	andi	r24, 0x7E	; 126
  8a:	88 83       	st	Y, r24
  8c:	19 82       	std	Y+1, r1	; 0x01
  8e:	22 e0       	ldi	r18, 0x02	; 2
  90:	42 e0       	ldi	r20, 0x02	; 2
  92:	be 01       	movw	r22, r28
  94:	ce 01       	movw	r24, r28
  96:	e8 d1       	rcall	.+976    	; 0x468 <spi_transfer_nbytes>
  98:	89 81       	ldd	r24, Y+1	; 0x01
  9a:	df 91       	pop	r29
  9c:	cf 91       	pop	r28
  9e:	08 95       	ret

000000a0 <mrf_read_long>:
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	ca e0       	ldi	r28, 0x0A	; 10
  a6:	d1 e0       	ldi	r29, 0x01	; 1
  a8:	9c 01       	movw	r18, r24
  aa:	36 95       	lsr	r19
  ac:	27 95       	ror	r18
  ae:	36 95       	lsr	r19
  b0:	27 95       	ror	r18
  b2:	36 95       	lsr	r19
  b4:	27 95       	ror	r18
  b6:	20 68       	ori	r18, 0x80	; 128
  b8:	28 83       	st	Y, r18
  ba:	82 95       	swap	r24
  bc:	88 0f       	add	r24, r24
  be:	80 7e       	andi	r24, 0xE0	; 224
  c0:	89 83       	std	Y+1, r24	; 0x01
  c2:	1a 82       	std	Y+2, r1	; 0x02
  c4:	22 e0       	ldi	r18, 0x02	; 2
  c6:	43 e0       	ldi	r20, 0x03	; 3
  c8:	be 01       	movw	r22, r28
  ca:	ce 01       	movw	r24, r28
  cc:	cd d1       	rcall	.+922    	; 0x468 <spi_transfer_nbytes>
  ce:	8a 81       	ldd	r24, Y+2	; 0x02
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <mrf_write_short>:
  d6:	ea e0       	ldi	r30, 0x0A	; 10
  d8:	f1 e0       	ldi	r31, 0x01	; 1
  da:	88 0f       	add	r24, r24
  dc:	8e 77       	andi	r24, 0x7E	; 126
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	80 83       	st	Z, r24
  e2:	61 83       	std	Z+1, r22	; 0x01
  e4:	22 e0       	ldi	r18, 0x02	; 2
  e6:	42 e0       	ldi	r20, 0x02	; 2
  e8:	bf 01       	movw	r22, r30
  ea:	cf 01       	movw	r24, r30
  ec:	bd d1       	rcall	.+890    	; 0x468 <spi_transfer_nbytes>
  ee:	08 95       	ret

000000f0 <mrf_write_long>:
  f0:	ea e0       	ldi	r30, 0x0A	; 10
  f2:	f1 e0       	ldi	r31, 0x01	; 1
  f4:	9c 01       	movw	r18, r24
  f6:	36 95       	lsr	r19
  f8:	27 95       	ror	r18
  fa:	36 95       	lsr	r19
  fc:	27 95       	ror	r18
  fe:	36 95       	lsr	r19
 100:	27 95       	ror	r18
 102:	20 68       	ori	r18, 0x80	; 128
 104:	20 83       	st	Z, r18
 106:	82 95       	swap	r24
 108:	88 0f       	add	r24, r24
 10a:	80 7e       	andi	r24, 0xE0	; 224
 10c:	80 61       	ori	r24, 0x10	; 16
 10e:	81 83       	std	Z+1, r24	; 0x01
 110:	62 83       	std	Z+2, r22	; 0x02
 112:	22 e0       	ldi	r18, 0x02	; 2
 114:	43 e0       	ldi	r20, 0x03	; 3
 116:	bf 01       	movw	r22, r30
 118:	cf 01       	movw	r24, r30
 11a:	a6 d1       	rcall	.+844    	; 0x468 <spi_transfer_nbytes>
 11c:	08 95       	ret

0000011e <mrf_get_pan>:
 11e:	cf 93       	push	r28
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	ad df       	rcall	.-166    	; 0x7e <mrf_read_short>
 124:	c8 2f       	mov	r28, r24
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	aa df       	rcall	.-172    	; 0x7e <mrf_read_short>
 12a:	2c 2f       	mov	r18, r28
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	32 2f       	mov	r19, r18
 130:	22 27       	eor	r18, r18
 132:	a9 01       	movw	r20, r18
 134:	48 2b       	or	r20, r24
 136:	ca 01       	movw	r24, r20
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <mrf_set_pan>:
 13c:	cf 93       	push	r28
 13e:	c8 2f       	mov	r28, r24
 140:	69 2f       	mov	r22, r25
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	c8 df       	rcall	.-112    	; 0xd6 <mrf_write_short>
 146:	6c 2f       	mov	r22, r28
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	c5 df       	rcall	.-118    	; 0xd6 <mrf_write_short>
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <mrf_address16_write>:
 150:	cf 93       	push	r28
 152:	c8 2f       	mov	r28, r24
 154:	69 2f       	mov	r22, r25
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	be df       	rcall	.-132    	; 0xd6 <mrf_write_short>
 15a:	6c 2f       	mov	r22, r28
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	bb df       	rcall	.-138    	; 0xd6 <mrf_write_short>
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <mrf_address16_read>:
 164:	cf 93       	push	r28
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	8a df       	rcall	.-236    	; 0x7e <mrf_read_short>
 16a:	c8 2f       	mov	r28, r24
 16c:	83 e0       	ldi	r24, 0x03	; 3
 16e:	87 df       	rcall	.-242    	; 0x7e <mrf_read_short>
 170:	2c 2f       	mov	r18, r28
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	32 2f       	mov	r19, r18
 176:	22 27       	eor	r18, r18
 178:	a9 01       	movw	r20, r18
 17a:	48 2b       	or	r20, r24
 17c:	ca 01       	movw	r24, r20
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <mrf_send16>:
 182:	df 92       	push	r13
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	d8 2f       	mov	r29, r24
 192:	c9 2f       	mov	r28, r25
 194:	7b 01       	movw	r14, r22
 196:	d4 2e       	mov	r13, r20
 198:	69 e0       	ldi	r22, 0x09	; 9
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	a8 df       	rcall	.-176    	; 0xf0 <mrf_write_long>
 1a0:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <ignoreBytes>
 1a4:	67 5f       	subi	r22, 0xF7	; 247
 1a6:	6d 0d       	add	r22, r13
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	a1 df       	rcall	.-190    	; 0xf0 <mrf_write_long>
 1ae:	61 e6       	ldi	r22, 0x61	; 97
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	9d df       	rcall	.-198    	; 0xf0 <mrf_write_long>
 1b6:	68 e8       	ldi	r22, 0x88	; 136
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	99 df       	rcall	.-206    	; 0xf0 <mrf_write_long>
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	95 df       	rcall	.-214    	; 0xf0 <mrf_write_long>
 1c6:	ab df       	rcall	.-170    	; 0x11e <mrf_get_pan>
 1c8:	19 2f       	mov	r17, r25
 1ca:	68 2f       	mov	r22, r24
 1cc:	85 e0       	ldi	r24, 0x05	; 5
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	8f df       	rcall	.-226    	; 0xf0 <mrf_write_long>
 1d2:	61 2f       	mov	r22, r17
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	8b df       	rcall	.-234    	; 0xf0 <mrf_write_long>
 1da:	6d 2f       	mov	r22, r29
 1dc:	87 e0       	ldi	r24, 0x07	; 7
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	87 df       	rcall	.-242    	; 0xf0 <mrf_write_long>
 1e2:	6c 2f       	mov	r22, r28
 1e4:	88 e0       	ldi	r24, 0x08	; 8
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	83 df       	rcall	.-250    	; 0xf0 <mrf_write_long>
 1ea:	bc df       	rcall	.-136    	; 0x164 <mrf_address16_read>
 1ec:	c9 2f       	mov	r28, r25
 1ee:	68 2f       	mov	r22, r24
 1f0:	89 e0       	ldi	r24, 0x09	; 9
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	7d df       	rcall	.-262    	; 0xf0 <mrf_write_long>
 1f6:	6c 2f       	mov	r22, r28
 1f8:	8a e0       	ldi	r24, 0x0A	; 10
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	79 df       	rcall	.-270    	; 0xf0 <mrf_write_long>
 1fe:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <ignoreBytes>
 202:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <ignoreBytes+0x1>
 206:	2b 96       	adiw	r28, 0x0b	; 11
 208:	dd 20       	and	r13, r13
 20a:	61 f0       	breq	.+24     	; 0x224 <mrf_send16+0xa2>
 20c:	87 01       	movw	r16, r14
 20e:	ed 0c       	add	r14, r13
 210:	f1 1c       	adc	r15, r1
 212:	f8 01       	movw	r30, r16
 214:	61 91       	ld	r22, Z+
 216:	8f 01       	movw	r16, r30
 218:	ce 01       	movw	r24, r28
 21a:	6a df       	rcall	.-300    	; 0xf0 <mrf_write_long>
 21c:	21 96       	adiw	r28, 0x01	; 1
 21e:	0e 15       	cp	r16, r14
 220:	1f 05       	cpc	r17, r15
 222:	b9 f7       	brne	.-18     	; 0x212 <mrf_send16+0x90>
 224:	65 e0       	ldi	r22, 0x05	; 5
 226:	8b e1       	ldi	r24, 0x1B	; 27
 228:	56 df       	rcall	.-340    	; 0xd6 <mrf_write_short>
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	ff 90       	pop	r15
 234:	ef 90       	pop	r14
 236:	df 90       	pop	r13
 238:	08 95       	ret

0000023a <mrf_set_interrupts>:
 23a:	66 ef       	ldi	r22, 0xF6	; 246
 23c:	82 e3       	ldi	r24, 0x32	; 50
 23e:	4b df       	rcall	.-362    	; 0xd6 <mrf_write_short>
 240:	08 95       	ret

00000242 <mrf_set_channel>:
 242:	68 2f       	mov	r22, r24
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	6b 50       	subi	r22, 0x0B	; 11
 248:	71 09       	sbc	r23, r1
 24a:	62 95       	swap	r22
 24c:	72 95       	swap	r23
 24e:	70 7f       	andi	r23, 0xF0	; 240
 250:	76 27       	eor	r23, r22
 252:	60 7f       	andi	r22, 0xF0	; 240
 254:	76 27       	eor	r23, r22
 256:	63 60       	ori	r22, 0x03	; 3
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	49 df       	rcall	.-366    	; 0xf0 <mrf_write_long>
 25e:	08 95       	ret

00000260 <mrf_init>:
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	eb d0       	rcall	.+470    	; 0x43a <spi_set_data_direction>
 264:	68 e9       	ldi	r22, 0x98	; 152
 266:	88 e1       	ldi	r24, 0x18	; 24
 268:	36 df       	rcall	.-404    	; 0xd6 <mrf_write_short>
 26a:	65 e9       	ldi	r22, 0x95	; 149
 26c:	8e e2       	ldi	r24, 0x2E	; 46
 26e:	33 df       	rcall	.-410    	; 0xd6 <mrf_write_short>
 270:	63 e0       	ldi	r22, 0x03	; 3
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	92 e0       	ldi	r25, 0x02	; 2
 276:	3c df       	rcall	.-392    	; 0xf0 <mrf_write_long>
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	92 e0       	ldi	r25, 0x02	; 2
 27e:	38 df       	rcall	.-400    	; 0xf0 <mrf_write_long>
 280:	60 e8       	ldi	r22, 0x80	; 128
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	34 df       	rcall	.-408    	; 0xf0 <mrf_write_long>
 288:	60 e9       	ldi	r22, 0x90	; 144
 28a:	86 e0       	ldi	r24, 0x06	; 6
 28c:	92 e0       	ldi	r25, 0x02	; 2
 28e:	30 df       	rcall	.-416    	; 0xf0 <mrf_write_long>
 290:	60 e8       	ldi	r22, 0x80	; 128
 292:	87 e0       	ldi	r24, 0x07	; 7
 294:	92 e0       	ldi	r25, 0x02	; 2
 296:	2c df       	rcall	.-424    	; 0xf0 <mrf_write_long>
 298:	60 e1       	ldi	r22, 0x10	; 16
 29a:	88 e0       	ldi	r24, 0x08	; 8
 29c:	92 e0       	ldi	r25, 0x02	; 2
 29e:	28 df       	rcall	.-432    	; 0xf0 <mrf_write_long>
 2a0:	61 e2       	ldi	r22, 0x21	; 33
 2a2:	80 e2       	ldi	r24, 0x20	; 32
 2a4:	92 e0       	ldi	r25, 0x02	; 2
 2a6:	24 df       	rcall	.-440    	; 0xf0 <mrf_write_long>
 2a8:	60 e8       	ldi	r22, 0x80	; 128
 2aa:	8a e3       	ldi	r24, 0x3A	; 58
 2ac:	14 df       	rcall	.-472    	; 0xd6 <mrf_write_short>
 2ae:	60 e6       	ldi	r22, 0x60	; 96
 2b0:	8f e3       	ldi	r24, 0x3F	; 63
 2b2:	11 df       	rcall	.-478    	; 0xd6 <mrf_write_short>
 2b4:	60 e4       	ldi	r22, 0x40	; 64
 2b6:	8e e3       	ldi	r24, 0x3E	; 62
 2b8:	0e df       	rcall	.-484    	; 0xd6 <mrf_write_short>
 2ba:	bf df       	rcall	.-130    	; 0x23a <mrf_set_interrupts>
 2bc:	8c e0       	ldi	r24, 0x0C	; 12
 2be:	c1 df       	rcall	.-126    	; 0x242 <mrf_set_channel>
 2c0:	64 e0       	ldi	r22, 0x04	; 4
 2c2:	86 e3       	ldi	r24, 0x36	; 54
 2c4:	08 df       	rcall	.-496    	; 0xd6 <mrf_write_short>
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	86 e3       	ldi	r24, 0x36	; 54
 2ca:	05 df       	rcall	.-502    	; 0xd6 <mrf_write_short>
 2cc:	89 ef       	ldi	r24, 0xF9	; 249
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <mrf_init+0x70>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <mrf_init+0x76>
 2d6:	00 00       	nop
 2d8:	08 95       	ret

000002da <mrf_check_flags>:
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	fc 01       	movw	r30, r24
 2e0:	eb 01       	movw	r28, r22
 2e2:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <flag_got_rx>
 2e6:	99 23       	and	r25, r25
 2e8:	19 f0       	breq	.+6      	; 0x2f0 <mrf_check_flags+0x16>
 2ea:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <flag_got_rx>
 2ee:	09 95       	icall
 2f0:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <flag_got_tx>
 2f4:	88 23       	and	r24, r24
 2f6:	21 f0       	breq	.+8      	; 0x300 <__stack+0x1>
 2f8:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <flag_got_tx>
 2fc:	fe 01       	movw	r30, r28
 2fe:	09 95       	icall
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <mrf_get_bufferPHY>:
 306:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <mrf_flags>
 30a:	84 60       	ori	r24, 0x04	; 4
 30c:	08 95       	ret

0000030e <mrf_rx_disable>:
}

void mrf_rx_disable(void) {
    mrf_write_short(MRF_BBREG1, 0x04);  // RXDECINV - disable receiver
 30e:	64 e0       	ldi	r22, 0x04	; 4
 310:	89 e3       	ldi	r24, 0x39	; 57
 312:	e1 de       	rcall	.-574    	; 0xd6 <mrf_write_short>
 314:	08 95       	ret

00000316 <mrf_rx_enable>:
}

void mrf_rx_enable(void) {
    mrf_write_short(MRF_BBREG1, 0x00);  // RXDECINV - enable receiver
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	89 e3       	ldi	r24, 0x39	; 57
 31a:	dd de       	rcall	.-582    	; 0xd6 <mrf_write_short>
 31c:	08 95       	ret

0000031e <mrf_interrupt_handler>:
 * Call this from within an interrupt handler connected to the MRFs output
 * interrupt pin.  It handles reading in any data from the module, and letting it
 * continue working.
 * Only the most recent data is ever kept.
 */
void mrf_interrupt_handler(void) {
 31e:	af 92       	push	r10
 320:	bf 92       	push	r11
 322:	cf 92       	push	r12
 324:	df 92       	push	r13
 326:	ef 92       	push	r14
 328:	ff 92       	push	r15
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
    uint8_t last_interrupt = mrf_read_short(MRF_INTSTAT);
 332:	81 e3       	ldi	r24, 0x31	; 49
 334:	a4 de       	rcall	.-696    	; 0x7e <mrf_read_short>
 336:	b8 2e       	mov	r11, r24
    if (last_interrupt & MRF_I_RXIF) {
 338:	83 ff       	sbrs	r24, 3
 33a:	51 c0       	rjmp	.+162    	; 0x3de <mrf_interrupt_handler+0xc0>
        int i = 0;
        flag_got_rx++;
 33c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <flag_got_rx>
 340:	8f 5f       	subi	r24, 0xFF	; 255
 342:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <flag_got_rx>
        // read out the packet data...
        cli();
 346:	f8 94       	cli
        mrf_rx_disable();
 348:	e2 df       	rcall	.-60     	; 0x30e <mrf_rx_disable>
        // read start of rxfifo for, has 2 bytes more added by FCS. frame_length = m + n + 2
        uint8_t frame_length = mrf_read_long(0x300);
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	93 e0       	ldi	r25, 0x03	; 3
 34e:	a8 de       	rcall	.-688    	; 0xa0 <mrf_read_long>
 350:	a8 2e       	mov	r10, r24

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
 352:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <mrf_flags>
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 356:	ea 2c       	mov	r14, r10
 358:	f1 2c       	mov	r15, r1
 35a:	1e 14       	cp	r1, r14
 35c:	1f 04       	cpc	r1, r15
 35e:	9c f4       	brge	.+38     	; 0x386 <mrf_interrupt_handler+0x68>
 360:	c7 01       	movw	r24, r14
 362:	9c 01       	movw	r18, r24
 364:	29 57       	subi	r18, 0x79	; 121
 366:	3e 4f       	sbci	r19, 0xFE	; 254
 368:	69 01       	movw	r12, r18
 36a:	c7 e8       	ldi	r28, 0x87	; 135
 36c:	d1 e0       	ldi	r29, 0x01	; 1
                rx_buf[rb_ptr++] = mrf_read_long(0x301 + i);
 36e:	01 e0       	ldi	r16, 0x01	; 1
 370:	13 e0       	ldi	r17, 0x03	; 3
 372:	07 58       	subi	r16, 0x87	; 135
 374:	11 40       	sbci	r17, 0x01	; 1
 376:	c8 01       	movw	r24, r16
 378:	8c 0f       	add	r24, r28
 37a:	9d 1f       	adc	r25, r29
 37c:	91 de       	rcall	.-734    	; 0xa0 <mrf_read_long>
 37e:	89 93       	st	Y+, r24
        uint8_t frame_length = mrf_read_long(0x300);

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 380:	cc 15       	cp	r28, r12
 382:	dd 05       	cpc	r29, r13
 384:	c1 f7       	brne	.-16     	; 0x376 <mrf_interrupt_handler+0x58>
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 386:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rx_info>
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0b 97       	sbiw	r24, 0x0b	; 11
 38e:	18 16       	cp	r1, r24
 390:	19 06       	cpc	r1, r25
 392:	ac f4       	brge	.+42     	; 0x3be <mrf_interrupt_handler+0xa0>
 394:	cf e0       	ldi	r28, 0x0F	; 15
 396:	d1 e0       	ldi	r29, 0x01	; 1
 398:	c1 2c       	mov	r12, r1
 39a:	d1 2c       	mov	r13, r1
uint8_t * mrf_get_rxbuf(void) {
    return rx_buf;
}

int mrf_rx_datalength(void) {
    return rx_info.frame_length - bytes_nodata;
 39c:	0e e0       	ldi	r16, 0x0E	; 14
 39e:	11 e0       	ldi	r17, 0x01	; 1

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
 3a0:	3f ef       	ldi	r19, 0xFF	; 255
 3a2:	c3 1a       	sub	r12, r19
 3a4:	d3 0a       	sbc	r13, r19
 3a6:	c6 01       	movw	r24, r12
 3a8:	87 5f       	subi	r24, 0xF7	; 247
 3aa:	9c 4f       	sbci	r25, 0xFC	; 252
 3ac:	79 de       	rcall	.-782    	; 0xa0 <mrf_read_long>
 3ae:	89 93       	st	Y+, r24
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 3b0:	f8 01       	movw	r30, r16
 3b2:	80 81       	ld	r24, Z
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0b 97       	sbiw	r24, 0x0b	; 11
 3b8:	c8 16       	cp	r12, r24
 3ba:	d9 06       	cpc	r13, r25
 3bc:	8c f3       	brlt	.-30     	; 0x3a0 <mrf_interrupt_handler+0x82>
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
        }

        rx_info.frame_length = frame_length;
 3be:	a0 92 0e 01 	sts	0x010E, r10	; 0x80010e <rx_info>
        // same as datasheet 0x301 + (m + n + 2) <-- frame_length
        rx_info.lqi = mrf_read_long(0x301 + frame_length);
 3c2:	c7 01       	movw	r24, r14
 3c4:	8f 5f       	subi	r24, 0xFF	; 255
 3c6:	9c 4f       	sbci	r25, 0xFC	; 252
 3c8:	6b de       	rcall	.-810    	; 0xa0 <mrf_read_long>
 3ca:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <rx_info+0x75>
        // same as datasheet 0x301 + (m + n + 3) <-- frame_length + 1
        rx_info.rssi = mrf_read_long(0x301 + frame_length + 1);
 3ce:	c7 01       	movw	r24, r14
 3d0:	8e 5f       	subi	r24, 0xFE	; 254
 3d2:	9c 4f       	sbci	r25, 0xFC	; 252
 3d4:	65 de       	rcall	.-822    	; 0xa0 <mrf_read_long>
 3d6:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <rx_info+0x76>

        mrf_rx_enable();
 3da:	9d df       	rcall	.-198    	; 0x316 <mrf_rx_enable>
        sei();
 3dc:	78 94       	sei
    }
    if (last_interrupt & MRF_I_TXNIF) {
 3de:	b0 fe       	sbrs	r11, 0
 3e0:	1a c0       	rjmp	.+52     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
        flag_got_tx++;
 3e2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <flag_got_tx>
 3e6:	8f 5f       	subi	r24, 0xFF	; 255
 3e8:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <flag_got_tx>
        uint8_t tmp = mrf_read_short(MRF_TXSTAT);
 3ec:	84 e2       	ldi	r24, 0x24	; 36
 3ee:	47 de       	rcall	.-882    	; 0x7e <mrf_read_short>
        // 1 means it failed, we want 1 to mean it worked.
        tx_info.tx_ok = !(tmp & ~(1 << TXNSTAT));
 3f0:	98 2f       	mov	r25, r24
 3f2:	9e 7f       	andi	r25, 0xFE	; 254
 3f4:	21 e0       	ldi	r18, 0x01	; 1
 3f6:	09 f0       	breq	.+2      	; 0x3fa <mrf_interrupt_handler+0xdc>
 3f8:	20 e0       	ldi	r18, 0x00	; 0
 3fa:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tx_info>
 3fe:	20 fb       	bst	r18, 0
 400:	90 f9       	bld	r25, 0
        tx_info.retries = tmp >> 6;
 402:	82 95       	swap	r24
 404:	86 95       	lsr	r24
 406:	86 95       	lsr	r24
 408:	83 70       	andi	r24, 0x03	; 3
 40a:	88 0f       	add	r24, r24
 40c:	99 7f       	andi	r25, 0xF9	; 249
        tx_info.channel_busy = (tmp & (1 << CCAFAIL));
 40e:	89 2b       	or	r24, r25
 410:	87 7f       	andi	r24, 0xF7	; 247
 412:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <tx_info>
    }
}
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	ff 90       	pop	r15
 420:	ef 90       	pop	r14
 422:	df 90       	pop	r13
 424:	cf 90       	pop	r12
 426:	bf 90       	pop	r11
 428:	af 90       	pop	r10
 42a:	08 95       	ret

0000042c <mrf_get_rxdata>:
}

uint8_t* mrf_get_rxdata()
{
	return rx_info.rx_data;
}
 42c:	8f e0       	ldi	r24, 0x0F	; 15
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	08 95       	ret

00000432 <mrf_tx_ok>:


uint8_t mrf_tx_ok()
{
	return tx_info.tx_ok;
 432:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <tx_info>
}
 436:	81 70       	andi	r24, 0x01	; 1
 438:	08 95       	ret

0000043a <spi_set_data_direction>:

void spi_set_data_direction(uint8_t d)
{
    /*USI version of SPI can only do LSB first*/
    #ifndef SPI_ON_USI
    if(d == SPI_LSB)
 43a:	81 11       	cpse	r24, r1
 43c:	04 c0       	rjmp	.+8      	; 0x446 <spi_set_data_direction+0xc>
        SPCR |=  (1 << DORD);
 43e:	8c b5       	in	r24, 0x2c	; 44
 440:	80 62       	ori	r24, 0x20	; 32
 442:	8c bd       	out	0x2c, r24	; 44
 444:	08 95       	ret
    else
        SPCR &= ~(1 << DORD);
 446:	8c b5       	in	r24, 0x2c	; 44
 448:	8f 7d       	andi	r24, 0xDF	; 223
 44a:	8c bd       	out	0x2c, r24	; 44
 44c:	08 95       	ret

0000044e <spi_setup>:

void spi_setup()
{

	#ifndef SPI_ON_USI
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
 44e:	81 e5       	ldi	r24, 0x51	; 81
 450:	8c bd       	out	0x2c, r24	; 44
 452:	08 95       	ret

00000454 <spi_transfer_byte>:
/*Transfers a single byte between master and slave*/

void spi_transfer_byte(uint8_t* bout, uint8_t* bin)
{
	/*Outgoing data into data register*/
	DATAREG = *bout;
 454:	fc 01       	movw	r30, r24
 456:	80 81       	ld	r24, Z
 458:	8e bd       	out	0x2e, r24	; 46

	while(! SPI_BYTE_XFER_DONE)
 45a:	0d b4       	in	r0, 0x2d	; 45
 45c:	07 fe       	sbrs	r0, 7
 45e:	fd cf       	rjmp	.-6      	; 0x45a <spi_transfer_byte+0x6>
		USICR = usi_clk_lo;
		USICR = usi_clk_hi;
		#endif
	} 
	/*Incomming data out of data register*/
	*bin = DATAREG;
 460:	8e b5       	in	r24, 0x2e	; 46
 462:	fb 01       	movw	r30, r22
 464:	80 83       	st	Z, r24
 466:	08 95       	ret

00000468 <spi_transfer_nbytes>:
}

/*Selects the slave (cs)  and transfers n bytes. The input and output buffers must be defined and contain at least n bytes each*/

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
 468:	cf 92       	push	r12
 46a:	df 92       	push	r13
 46c:	ef 92       	push	r14
 46e:	ff 92       	push	r15
 470:	0f 93       	push	r16
 472:	1f 93       	push	r17
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	ec 01       	movw	r28, r24
 47a:	8b 01       	movw	r16, r22
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
 47c:	85 b1       	in	r24, 0x05	; 5
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	6b 01       	movw	r12, r22
 484:	02 c0       	rjmp	.+4      	; 0x48a <spi_transfer_nbytes+0x22>
 486:	cc 0c       	add	r12, r12
 488:	dd 1c       	adc	r13, r13
 48a:	2a 95       	dec	r18
 48c:	e2 f7       	brpl	.-8      	; 0x486 <spi_transfer_nbytes+0x1e>
 48e:	9c 2d       	mov	r25, r12
 490:	90 95       	com	r25
 492:	89 23       	and	r24, r25
 494:	85 b9       	out	0x05, r24	; 5
	while(n)
 496:	44 23       	and	r20, r20
 498:	89 f0       	breq	.+34     	; 0x4bc <spi_transfer_nbytes+0x54>
 49a:	41 50       	subi	r20, 0x01	; 1
 49c:	e4 2e       	mov	r14, r20
 49e:	f1 2c       	mov	r15, r1
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	e8 1a       	sub	r14, r24
 4a4:	f8 0a       	sbc	r15, r24
 4a6:	ec 0e       	add	r14, r28
 4a8:	fd 1e       	adc	r15, r29
	{
		spi_transfer_byte(out,in);    /*transfer byte */
 4aa:	b8 01       	movw	r22, r16
 4ac:	ce 01       	movw	r24, r28
 4ae:	d2 df       	rcall	.-92     	; 0x454 <spi_transfer_byte>
		/*advance iterators*/
		out = out + 1;
 4b0:	21 96       	adiw	r28, 0x01	; 1
		in = in + 1;
 4b2:	0f 5f       	subi	r16, 0xFF	; 255
 4b4:	1f 4f       	sbci	r17, 0xFF	; 255
/*Selects the slave (cs)  and transfers n bytes. The input and output buffers must be defined and contain at least n bytes each*/

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
	while(n)
 4b6:	ec 16       	cp	r14, r28
 4b8:	fd 06       	cpc	r15, r29
 4ba:	b9 f7       	brne	.-18     	; 0x4aa <spi_transfer_nbytes+0x42>
		/*advance iterators*/
		out = out + 1;
		in = in + 1;
		n = n - 1;
	}
	CS_PORT |= 1<<cs;/*Deselect slave chip*/
 4bc:	85 b1       	in	r24, 0x05	; 5
 4be:	c8 2a       	or	r12, r24
 4c0:	c5 b8       	out	0x05, r12	; 5
}
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	ff 90       	pop	r15
 4cc:	ef 90       	pop	r14
 4ce:	df 90       	pop	r13
 4d0:	cf 90       	pop	r12
 4d2:	08 95       	ret

000004d4 <handle_rx>:

/*Called by check flags*/
void handle_rx() {

    
    if(mrf_get_bufferPHY()){
 4d4:	18 df       	rcall	.-464    	; 0x306 <mrf_get_bufferPHY>

    }

	uint8_t * rx_data = mrf_get_rxdata();
 4d6:	aa df       	rcall	.-172    	; 0x42c <mrf_get_rxdata>

    if(rx_data[0] == 'a') 
 4d8:	fc 01       	movw	r30, r24
 4da:	80 81       	ld	r24, Z
 4dc:	81 36       	cpi	r24, 0x61	; 97
 4de:	59 f5       	brne	.+86     	; 0x536 <handle_rx+0x62>
    {	
		BLINK(LED_PORT,LED_1);
 4e0:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e2:	8f e4       	ldi	r24, 0x4F	; 79
 4e4:	93 ec       	ldi	r25, 0xC3	; 195
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <handle_rx+0x12>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <handle_rx+0x18>
 4ec:	00 00       	nop
 4ee:	5b 98       	cbi	0x0b, 3	; 11
 4f0:	ef e4       	ldi	r30, 0x4F	; 79
 4f2:	f3 ec       	ldi	r31, 0xC3	; 195
 4f4:	31 97       	sbiw	r30, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <handle_rx+0x20>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <handle_rx+0x26>
 4fa:	00 00       	nop
		BLINK(LED_PORT,LED_2);
 4fc:	5c 9a       	sbi	0x0b, 4	; 11
 4fe:	8f e4       	ldi	r24, 0x4F	; 79
 500:	93 ec       	ldi	r25, 0xC3	; 195
 502:	01 97       	sbiw	r24, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <handle_rx+0x2e>
 506:	00 c0       	rjmp	.+0      	; 0x508 <handle_rx+0x34>
 508:	00 00       	nop
 50a:	5c 98       	cbi	0x0b, 4	; 11
 50c:	ef e4       	ldi	r30, 0x4F	; 79
 50e:	f3 ec       	ldi	r31, 0xC3	; 195
 510:	31 97       	sbiw	r30, 0x01	; 1
 512:	f1 f7       	brne	.-4      	; 0x510 <handle_rx+0x3c>
 514:	00 c0       	rjmp	.+0      	; 0x516 <handle_rx+0x42>
 516:	00 00       	nop
		BLINK(LED_PORT,LED_2);
 518:	5c 9a       	sbi	0x0b, 4	; 11
 51a:	8f e4       	ldi	r24, 0x4F	; 79
 51c:	93 ec       	ldi	r25, 0xC3	; 195
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <handle_rx+0x4a>
 522:	00 c0       	rjmp	.+0      	; 0x524 <handle_rx+0x50>
 524:	00 00       	nop
 526:	5c 98       	cbi	0x0b, 4	; 11
 528:	ef e4       	ldi	r30, 0x4F	; 79
 52a:	f3 ec       	ldi	r31, 0xC3	; 195
 52c:	31 97       	sbiw	r30, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <handle_rx+0x58>
 530:	00 c0       	rjmp	.+0      	; 0x532 <handle_rx+0x5e>
 532:	00 00       	nop
 534:	08 95       	ret
	}
	else
	{
		BLINK(LED_PORT,LED_1);
 536:	5b 9a       	sbi	0x0b, 3	; 11
 538:	8f e4       	ldi	r24, 0x4F	; 79
 53a:	93 ec       	ldi	r25, 0xC3	; 195
 53c:	01 97       	sbiw	r24, 0x01	; 1
 53e:	f1 f7       	brne	.-4      	; 0x53c <handle_rx+0x68>
 540:	00 c0       	rjmp	.+0      	; 0x542 <handle_rx+0x6e>
 542:	00 00       	nop
 544:	5b 98       	cbi	0x0b, 3	; 11
 546:	ef e4       	ldi	r30, 0x4F	; 79
 548:	f3 ec       	ldi	r31, 0xC3	; 195
 54a:	31 97       	sbiw	r30, 0x01	; 1
 54c:	f1 f7       	brne	.-4      	; 0x54a <handle_rx+0x76>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <handle_rx+0x7c>
 550:	00 00       	nop
 552:	08 95       	ret

00000554 <handle_tx>:
}

void handle_tx() {

	
    if (mrf_tx_ok()) {
 554:	6e df       	rcall	.-292    	; 0x432 <mrf_tx_ok>
 556:	88 23       	and	r24, r24
 558:	59 f1       	breq	.+86     	; 0x5b0 <handle_tx+0x5c>
        BLINK(LED_PORT,LED_1);
 55a:	5b 9a       	sbi	0x0b, 3	; 11
 55c:	8f e4       	ldi	r24, 0x4F	; 79
 55e:	93 ec       	ldi	r25, 0xC3	; 195
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <handle_tx+0xc>
 564:	00 c0       	rjmp	.+0      	; 0x566 <handle_tx+0x12>
 566:	00 00       	nop
 568:	5b 98       	cbi	0x0b, 3	; 11
 56a:	8f e4       	ldi	r24, 0x4F	; 79
 56c:	93 ec       	ldi	r25, 0xC3	; 195
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <handle_tx+0x1a>
 572:	00 c0       	rjmp	.+0      	; 0x574 <handle_tx+0x20>
 574:	00 00       	nop
        BLINK(LED_PORT,LED_2);
 576:	5c 9a       	sbi	0x0b, 4	; 11
 578:	8f e4       	ldi	r24, 0x4F	; 79
 57a:	93 ec       	ldi	r25, 0xC3	; 195
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <handle_tx+0x28>
 580:	00 c0       	rjmp	.+0      	; 0x582 <handle_tx+0x2e>
 582:	00 00       	nop
 584:	5c 98       	cbi	0x0b, 4	; 11
 586:	8f e4       	ldi	r24, 0x4F	; 79
 588:	93 ec       	ldi	r25, 0xC3	; 195
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	f1 f7       	brne	.-4      	; 0x58a <handle_tx+0x36>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <handle_tx+0x3c>
 590:	00 00       	nop
        BLINK(LED_PORT,LED_3);
 592:	5f 9a       	sbi	0x0b, 7	; 11
 594:	8f e4       	ldi	r24, 0x4F	; 79
 596:	93 ec       	ldi	r25, 0xC3	; 195
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	f1 f7       	brne	.-4      	; 0x598 <handle_tx+0x44>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <handle_tx+0x4a>
 59e:	00 00       	nop
 5a0:	5f 98       	cbi	0x0b, 7	; 11
 5a2:	8f e4       	ldi	r24, 0x4F	; 79
 5a4:	93 ec       	ldi	r25, 0xC3	; 195
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <handle_tx+0x52>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <handle_tx+0x58>
 5ac:	00 00       	nop
 5ae:	08 95       	ret
    } else {
        BLINK(LED_PORT,LED_2);
 5b0:	5c 9a       	sbi	0x0b, 4	; 11
 5b2:	8f e4       	ldi	r24, 0x4F	; 79
 5b4:	93 ec       	ldi	r25, 0xC3	; 195
 5b6:	01 97       	sbiw	r24, 0x01	; 1
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <handle_tx+0x62>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <handle_tx+0x68>
 5bc:	00 00       	nop
 5be:	5c 98       	cbi	0x0b, 4	; 11
 5c0:	8f e4       	ldi	r24, 0x4F	; 79
 5c2:	93 ec       	ldi	r25, 0xC3	; 195
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <handle_tx+0x70>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <handle_tx+0x76>
 5ca:	00 00       	nop
 5cc:	08 95       	ret

000005ce <setup>:

void setup() {

  /* Data directions */

  DDRB |= (1<<MRF_WAKE) | (1<<MRF_RESET) | (1<<MRF_CS);
 5ce:	84 b1       	in	r24, 0x04	; 4
 5d0:	86 64       	ori	r24, 0x46	; 70
 5d2:	84 b9       	out	0x04, r24	; 4
  DDRB |= (1<<SPI_MOSI) | (1<<SPI_SCK);    
 5d4:	84 b1       	in	r24, 0x04	; 4
 5d6:	88 62       	ori	r24, 0x28	; 40
 5d8:	84 b9       	out	0x04, r24	; 4

  DDRD |= (1<<LED_1) | (1<<LED_2);  
 5da:	8a b1       	in	r24, 0x0a	; 10
 5dc:	88 61       	ori	r24, 0x18	; 24
 5de:	8a b9       	out	0x0a, r24	; 10
  
  PORTD |= (1<<BUTTON_1);
 5e0:	5d 9a       	sbi	0x0b, 5	; 11
  PORTB |= (1<<MRF_CS); //
 5e2:	2a 9a       	sbi	0x05, 2	; 5
  PORTB |= (1<<MRF_INT);
 5e4:	2a 9a       	sbi	0x05, 2	; 5
  MRF_RESET_PORT |= (1<<MRF_RESET);
 5e6:	29 9a       	sbi	0x05, 1	; 5
  spi_set_data_direction(SPI_MSB);
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	27 df       	rcall	.-434    	; 0x43a <spi_set_data_direction>
  spi_setup();
 5ec:	30 df       	rcall	.-416    	; 0x44e <spi_setup>

  mrf_reset();
 5ee:	38 dd       	rcall	.-1424   	; 0x60 <mrf_reset>
  mrf_init();
 5f0:	37 de       	rcall	.-914    	; 0x260 <mrf_init>
  
  mrf_set_pan(ASMP_PANID);
 5f2:	8e ef       	ldi	r24, 0xFE	; 254
 5f4:	9a ec       	ldi	r25, 0xCA	; 202
 5f6:	a2 dd       	rcall	.-1212   	; 0x13c <mrf_set_pan>
  // This is _our_ address
  mrf_address16_write(SRC_ADDRESS); 
 5f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SRC_ADDRESS>
 5fc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <SRC_ADDRESS+0x1>
 600:	a7 dd       	rcall	.-1202   	; 0x150 <mrf_address16_write>
  
  loop_counter = 0;
 602:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <loop_counter+0x1>
 606:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <loop_counter>
  // uncomment if you want to buffer all PHY Payload
  //mrf_set_bufferPHY(true);

 // attachInterrupt(0, interrupt_routine, CHANGE); // interrupt 0 equivalent to pin 2(INT0) on ATmega8/168/328
 // last_time = millis();
  sei();
 60a:	78 94       	sei
  EIMSK |= (1<<INT0);
 60c:	e8 9a       	sbi	0x1d, 0	; 29
  EICRA |= (1<<ISC01);
 60e:	e9 e6       	ldi	r30, 0x69	; 105
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	82 60       	ori	r24, 0x02	; 2
 616:	80 83       	st	Z, r24
 618:	08 95       	ret

0000061a <__vector_1>:
  
}

ISR(INT0_vect) {
 61a:	1f 92       	push	r1
 61c:	0f 92       	push	r0
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	0f 92       	push	r0
 622:	11 24       	eor	r1, r1
 624:	2f 93       	push	r18
 626:	3f 93       	push	r19
 628:	4f 93       	push	r20
 62a:	5f 93       	push	r21
 62c:	6f 93       	push	r22
 62e:	7f 93       	push	r23
 630:	8f 93       	push	r24
 632:	9f 93       	push	r25
 634:	af 93       	push	r26
 636:	bf 93       	push	r27
 638:	ef 93       	push	r30
 63a:	ff 93       	push	r31
    mrf_interrupt_handler(); // mrf24 object interrupt routine
 63c:	70 de       	rcall	.-800    	; 0x31e <mrf_interrupt_handler>
}
 63e:	ff 91       	pop	r31
 640:	ef 91       	pop	r30
 642:	bf 91       	pop	r27
 644:	af 91       	pop	r26
 646:	9f 91       	pop	r25
 648:	8f 91       	pop	r24
 64a:	7f 91       	pop	r23
 64c:	6f 91       	pop	r22
 64e:	5f 91       	pop	r21
 650:	4f 91       	pop	r20
 652:	3f 91       	pop	r19
 654:	2f 91       	pop	r18
 656:	0f 90       	pop	r0
 658:	0f be       	out	0x3f, r0	; 63
 65a:	0f 90       	pop	r0
 65c:	1f 90       	pop	r1
 65e:	18 95       	reti

00000660 <pollButton>:



uint8_t pollButton()
{
	if(BUTTON_PIN & (1<<BUTTON_1)) return 0;
 660:	89 b1       	in	r24, 0x09	; 9
 662:	85 fb       	bst	r24, 5
 664:	88 27       	eor	r24, r24
 666:	80 f9       	bld	r24, 0
		else return 1;
}
 668:	91 e0       	ldi	r25, 0x01	; 1
 66a:	89 27       	eor	r24, r25
 66c:	08 95       	ret

0000066e <loop>:

void loop() {
    mrf_check_flags(&handle_rx, &handle_tx);
 66e:	6a ea       	ldi	r22, 0xAA	; 170
 670:	72 e0       	ldi	r23, 0x02	; 2
 672:	8a e6       	ldi	r24, 0x6A	; 106
 674:	92 e0       	ldi	r25, 0x02	; 2
 676:	31 de       	rcall	.-926    	; 0x2da <mrf_check_flags>

		if( loop_counter > 32768 )
 678:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <loop_counter>
 67c:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <loop_counter+0x1>
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	90 48       	sbci	r25, 0x80	; 128
 684:	40 f1       	brcs	.+80     	; 0x6d6 <loop+0x68>
		{
			loop_counter = 0;
 686:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <loop_counter+0x1>
 68a:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <loop_counter>
			BLINK(LED_PORT,LED_2);
 68e:	5c 9a       	sbi	0x0b, 4	; 11
 690:	8f e4       	ldi	r24, 0x4F	; 79
 692:	93 ec       	ldi	r25, 0xC3	; 195
 694:	01 97       	sbiw	r24, 0x01	; 1
 696:	f1 f7       	brne	.-4      	; 0x694 <loop+0x26>
 698:	00 c0       	rjmp	.+0      	; 0x69a <loop+0x2c>
 69a:	00 00       	nop
 69c:	5c 98       	cbi	0x0b, 4	; 11
 69e:	8f e4       	ldi	r24, 0x4F	; 79
 6a0:	93 ec       	ldi	r25, 0xC3	; 195
 6a2:	01 97       	sbiw	r24, 0x01	; 1
 6a4:	f1 f7       	brne	.-4      	; 0x6a2 <loop+0x34>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <loop+0x3a>
 6a8:	00 00       	nop
			BLINK(LED_PORT,LED_1);
 6aa:	5b 9a       	sbi	0x0b, 3	; 11
 6ac:	8f e4       	ldi	r24, 0x4F	; 79
 6ae:	93 ec       	ldi	r25, 0xC3	; 195
 6b0:	01 97       	sbiw	r24, 0x01	; 1
 6b2:	f1 f7       	brne	.-4      	; 0x6b0 <loop+0x42>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <loop+0x48>
 6b6:	00 00       	nop
 6b8:	5b 98       	cbi	0x0b, 3	; 11
 6ba:	8f e4       	ldi	r24, 0x4F	; 79
 6bc:	93 ec       	ldi	r25, 0xC3	; 195
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <loop+0x50>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <loop+0x56>
 6c4:	00 00       	nop
			char* msg = "aaaa";
			mrf_send16(DEST_ADDRESS, (uint8_t*)msg, 4);
 6c6:	44 e0       	ldi	r20, 0x04	; 4
 6c8:	64 e0       	ldi	r22, 0x04	; 4
 6ca:	71 e0       	ldi	r23, 0x01	; 1
 6cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <DEST_ADDRESS>
 6d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <DEST_ADDRESS+0x1>
 6d4:	56 dd       	rcall	.-1364   	; 0x182 <mrf_send16>
		}
		if( pollButton()) 
 6d6:	c4 df       	rcall	.-120    	; 0x660 <pollButton>
 6d8:	88 23       	and	r24, r24
 6da:	01 f1       	breq	.+64     	; 0x71c <loop+0xae>
		{ 
			
			loop_counter = 0;
 6dc:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <loop_counter+0x1>
 6e0:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <loop_counter>
			BLINK(LED_PORT,LED_2);
 6e4:	5c 9a       	sbi	0x0b, 4	; 11
 6e6:	8f e4       	ldi	r24, 0x4F	; 79
 6e8:	93 ec       	ldi	r25, 0xC3	; 195
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <loop+0x7c>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <loop+0x82>
 6f0:	00 00       	nop
 6f2:	5c 98       	cbi	0x0b, 4	; 11
 6f4:	8f e4       	ldi	r24, 0x4F	; 79
 6f6:	93 ec       	ldi	r25, 0xC3	; 195
 6f8:	01 97       	sbiw	r24, 0x01	; 1
 6fa:	f1 f7       	brne	.-4      	; 0x6f8 <loop+0x8a>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <loop+0x90>
 6fe:	00 00       	nop
			BLINK(LED_PORT,LED_2);
 700:	5c 9a       	sbi	0x0b, 4	; 11
 702:	8f e4       	ldi	r24, 0x4F	; 79
 704:	93 ec       	ldi	r25, 0xC3	; 195
 706:	01 97       	sbiw	r24, 0x01	; 1
 708:	f1 f7       	brne	.-4      	; 0x706 <loop+0x98>
 70a:	00 c0       	rjmp	.+0      	; 0x70c <loop+0x9e>
 70c:	00 00       	nop
 70e:	5c 98       	cbi	0x0b, 4	; 11
 710:	8f e4       	ldi	r24, 0x4F	; 79
 712:	93 ec       	ldi	r25, 0xC3	; 195
 714:	01 97       	sbiw	r24, 0x01	; 1
 716:	f1 f7       	brne	.-4      	; 0x714 <loop+0xa6>
 718:	00 c0       	rjmp	.+0      	; 0x71a <loop+0xac>
 71a:	00 00       	nop
			
		}
		mrf_check_flags(&handle_rx, &handle_tx);
 71c:	6a ea       	ldi	r22, 0xAA	; 170
 71e:	72 e0       	ldi	r23, 0x02	; 2
 720:	8a e6       	ldi	r24, 0x6A	; 106
 722:	92 e0       	ldi	r25, 0x02	; 2
 724:	da dd       	rcall	.-1100   	; 0x2da <mrf_check_flags>
		loop_counter = loop_counter + 1;
 726:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <loop_counter>
 72a:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <loop_counter+0x1>
 72e:	01 96       	adiw	r24, 0x01	; 1
 730:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <loop_counter+0x1>
 734:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <loop_counter>
 738:	08 95       	ret

0000073a <main>:



int main(void)
{
    setup();
 73a:	49 df       	rcall	.-366    	; 0x5ce <setup>
    while(1) loop();
 73c:	98 df       	rcall	.-208    	; 0x66e <loop>
 73e:	fe cf       	rjmp	.-4      	; 0x73c <main+0x2>

00000740 <_exit>:
 740:	f8 94       	cli

00000742 <__stop_program>:
 742:	ff cf       	rjmp	.-2      	; 0x742 <__stop_program>
