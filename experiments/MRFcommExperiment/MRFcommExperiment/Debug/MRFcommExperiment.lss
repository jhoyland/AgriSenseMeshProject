
MRFcommExperiment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000103  00800100  00800100  00000758  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001de1  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a7d  00000000  00000000  0000272d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c78  00000000  00000000  000031aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00003e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000726  00000000  00000000  000041ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001192  00000000  00000000  00004912  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00005aa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	d3 c0       	rjmp	.+422    	; 0x1aa <__vector_1>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
  26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
  34:	22 e0       	ldi	r18, 0x02	; 2
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
  3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
  3e:	a3 30       	cpi	r26, 0x03	; 3
  40:	b2 07       	cpc	r27, r18
  42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
  44:	d9 d0       	rcall	.+434    	; 0x1f8 <main>
  46:	4c c3       	rjmp	.+1688   	; 0x6e0 <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <handle_rx>:
	if(BUTTON_PIN & (1<<BUTTON)) return 0;
	else return 1;
}

void handle_rx(){
	if(mrf_get_bufferPHY()){} //not needed
  4a:	68 d2       	rcall	.+1232   	; 0x51c <mrf_get_bufferPHY>
	
	uint8_t * rx_data = mrf_get_rxdata();
  4c:	ff d2       	rcall	.+1534   	; 0x64c <mrf_get_rxdata>
  4e:	08 95       	ret

00000050 <handle_tx>:
	//look at the rx_data and make a decision
}

void handle_tx(){ //a successful transmission involves sending and receiving a message.
	//This loop never seems to happen??
	if(mrf_tx_ok()){
  50:	00 d3       	rcall	.+1536   	; 0x652 <mrf_tx_ok>
  52:	88 23       	and	r24, r24
  54:	e9 f0       	breq	.+58     	; 0x90 <handle_tx+0x40>
		BLINK(LIGHT_PORT,BLUE_LIGHT);
  56:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  58:	8f e4       	ldi	r24, 0x4F	; 79
  5a:	93 ec       	ldi	r25, 0xC3	; 195
  5c:	01 97       	sbiw	r24, 0x01	; 1
  5e:	f1 f7       	brne	.-4      	; 0x5c <handle_tx+0xc>
  60:	00 c0       	rjmp	.+0      	; 0x62 <handle_tx+0x12>
  62:	00 00       	nop
  64:	5c 98       	cbi	0x0b, 4	; 11
  66:	8f e4       	ldi	r24, 0x4F	; 79
  68:	93 ec       	ldi	r25, 0xC3	; 195
  6a:	01 97       	sbiw	r24, 0x01	; 1
  6c:	f1 f7       	brne	.-4      	; 0x6a <handle_tx+0x1a>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <handle_tx+0x20>
  70:	00 00       	nop
		BLINK(LIGHT_PORT,GREEN_LIGHT);
  72:	5d 9a       	sbi	0x0b, 5	; 11
  74:	8f e4       	ldi	r24, 0x4F	; 79
  76:	93 ec       	ldi	r25, 0xC3	; 195
  78:	01 97       	sbiw	r24, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <handle_tx+0x28>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <handle_tx+0x2e>
  7e:	00 00       	nop
  80:	5d 98       	cbi	0x0b, 5	; 11
  82:	8f e4       	ldi	r24, 0x4F	; 79
  84:	93 ec       	ldi	r25, 0xC3	; 195
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <handle_tx+0x36>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <handle_tx+0x3c>
  8c:	00 00       	nop
  8e:	08 95       	ret
	}
	else{
		//transmitted and not received acknowledgment
		BLINK(LIGHT_PORT,RED_LIGHT);
  90:	5f 9a       	sbi	0x0b, 7	; 11
  92:	8f e4       	ldi	r24, 0x4F	; 79
  94:	93 ec       	ldi	r25, 0xC3	; 195
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <handle_tx+0x46>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <handle_tx+0x4c>
  9c:	00 00       	nop
  9e:	5f 98       	cbi	0x0b, 7	; 11
  a0:	8f e4       	ldi	r24, 0x4F	; 79
  a2:	93 ec       	ldi	r25, 0xC3	; 195
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <handle_tx+0x54>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <handle_tx+0x5a>
  aa:	00 00       	nop
		BLINK(LIGHT_PORT,BLUE_LIGHT);
  ac:	5c 9a       	sbi	0x0b, 4	; 11
  ae:	8f e4       	ldi	r24, 0x4F	; 79
  b0:	93 ec       	ldi	r25, 0xC3	; 195
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <handle_tx+0x62>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <handle_tx+0x68>
  b8:	00 00       	nop
  ba:	5c 98       	cbi	0x0b, 4	; 11
  bc:	8f e4       	ldi	r24, 0x4F	; 79
  be:	93 ec       	ldi	r25, 0xC3	; 195
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <handle_tx+0x70>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <handle_tx+0x76>
  c6:	00 00       	nop
		BLINK(LIGHT_PORT,RED_LIGHT);
  c8:	5f 9a       	sbi	0x0b, 7	; 11
  ca:	8f e4       	ldi	r24, 0x4F	; 79
  cc:	93 ec       	ldi	r25, 0xC3	; 195
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <handle_tx+0x7e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <handle_tx+0x84>
  d4:	00 00       	nop
  d6:	5f 98       	cbi	0x0b, 7	; 11
  d8:	8f e4       	ldi	r24, 0x4F	; 79
  da:	93 ec       	ldi	r25, 0xC3	; 195
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <handle_tx+0x8c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <handle_tx+0x92>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <setup>:

uint16_t message; //this is the message that will be sent

void setup()
{
	DDRD |= (1 << RED_LIGHT); //set PD7 to output for LED
  e6:	57 9a       	sbi	0x0a, 7	; 10
	DDRD |= (1 << GREEN_LIGHT);
  e8:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << BLUE_LIGHT);
  ea:	54 9a       	sbi	0x0a, 4	; 10
	DDRD &= ~(1<<BUTTON); //set PD0 as input for the button
  ec:	50 98       	cbi	0x0a, 0	; 10
	
	PORTB |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<ADC_CS) | (1<<SPI_SS) |(1<<MRF_CS); //set these ports to high (required)
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	8c 6e       	ori	r24, 0xEC	; 236
  f2:	85 b9       	out	0x05, r24	; 5
	DDRB |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<ADC_CS) | (1<<SPI_SS) |(1<<MRF_CS);  //set these to output
  f4:	84 b1       	in	r24, 0x04	; 4
  f6:	8c 6e       	ori	r24, 0xEC	; 236
  f8:	84 b9       	out	0x04, r24	; 4

	DDRB &= ~(1<<SPI_MISO);	//master in slave out, input on attiny
  fa:	24 98       	cbi	0x04, 4	; 4
	
	
	BLINK(LIGHT_PORT,GREEN_LIGHT);
  fc:	5d 9a       	sbi	0x0b, 5	; 11
  fe:	8f e4       	ldi	r24, 0x4F	; 79
 100:	93 ec       	ldi	r25, 0xC3	; 195
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <setup+0x1c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <setup+0x22>
 108:	00 00       	nop
 10a:	5d 98       	cbi	0x0b, 5	; 11
 10c:	8f e4       	ldi	r24, 0x4F	; 79
 10e:	93 ec       	ldi	r25, 0xC3	; 195
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <setup+0x2a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <setup+0x30>
 116:	00 00       	nop
	spi_setup();
 118:	a0 d2       	rcall	.+1344   	; 0x65a <spi_setup>
	BLINK(LIGHT_PORT,GREEN_LIGHT);
 11a:	5d 9a       	sbi	0x0b, 5	; 11
 11c:	8f e4       	ldi	r24, 0x4F	; 79
 11e:	93 ec       	ldi	r25, 0xC3	; 195
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <setup+0x3a>
 124:	00 c0       	rjmp	.+0      	; 0x126 <setup+0x40>
 126:	00 00       	nop
 128:	5d 98       	cbi	0x0b, 5	; 11
 12a:	8f e4       	ldi	r24, 0x4F	; 79
 12c:	93 ec       	ldi	r25, 0xC3	; 195
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <setup+0x48>
 132:	00 c0       	rjmp	.+0      	; 0x134 <setup+0x4e>
 134:	00 00       	nop
	BLINK(LIGHT_PORT,BLUE_LIGHT);
 136:	5c 9a       	sbi	0x0b, 4	; 11
 138:	8f e4       	ldi	r24, 0x4F	; 79
 13a:	93 ec       	ldi	r25, 0xC3	; 195
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <setup+0x56>
 140:	00 c0       	rjmp	.+0      	; 0x142 <setup+0x5c>
 142:	00 00       	nop
 144:	5c 98       	cbi	0x0b, 4	; 11
 146:	8f e4       	ldi	r24, 0x4F	; 79
 148:	93 ec       	ldi	r25, 0xC3	; 195
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <setup+0x64>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <setup+0x6a>
 150:	00 00       	nop
	mrf_reset();
 152:	68 d0       	rcall	.+208    	; 0x224 <mrf_reset>
	BLINK(LIGHT_PORT,RED_LIGHT);
 154:	5f 9a       	sbi	0x0b, 7	; 11
 156:	8f e4       	ldi	r24, 0x4F	; 79
 158:	93 ec       	ldi	r25, 0xC3	; 195
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <setup+0x74>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <setup+0x7a>
 160:	00 00       	nop
 162:	5f 98       	cbi	0x0b, 7	; 11
 164:	8f e4       	ldi	r24, 0x4F	; 79
 166:	93 ec       	ldi	r25, 0xC3	; 195
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <setup+0x82>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <setup+0x88>
 16e:	00 00       	nop
	mrf_init(); //takes a very long time
 170:	5b d1       	rcall	.+694    	; 0x428 <mrf_init>
	BLINK(LIGHT_PORT,RED_LIGHT);
 172:	5f 9a       	sbi	0x0b, 7	; 11
 174:	8f e4       	ldi	r24, 0x4F	; 79
 176:	93 ec       	ldi	r25, 0xC3	; 195
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <setup+0x92>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <setup+0x98>
 17e:	00 00       	nop
 180:	5f 98       	cbi	0x0b, 7	; 11
 182:	8f e4       	ldi	r24, 0x4F	; 79
 184:	93 ec       	ldi	r25, 0xC3	; 195
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <setup+0xa0>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <setup+0xa6>
 18c:	00 00       	nop
	
	mrf_set_pan(ASMP_PANID);
 18e:	8e ef       	ldi	r24, 0xFE	; 254
 190:	9a ec       	ldi	r25, 0xCA	; 202
 192:	b6 d0       	rcall	.+364    	; 0x300 <mrf_set_pan>
	mrf_address16_write(THIS_DEVICE); //do I need this??
 194:	81 e3       	ldi	r24, 0x31	; 49
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	bd d0       	rcall	.+378    	; 0x314 <mrf_address16_write>
	EIMSK |= (1<<INT0);
 19a:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC01);
 19c:	e9 e6       	ldi	r30, 0x69	; 105
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	80 83       	st	Z, r24
	sei(); //starts interrupts, essential to let chip know message is being handled
 1a6:	78 94       	sei
 1a8:	08 95       	ret

000001aa <__vector_1>:
}

ISR(INT0_vect) {
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	2f 93       	push	r18
 1b6:	3f 93       	push	r19
 1b8:	4f 93       	push	r20
 1ba:	5f 93       	push	r21
 1bc:	6f 93       	push	r22
 1be:	7f 93       	push	r23
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	af 93       	push	r26
 1c6:	bf 93       	push	r27
 1c8:	ef 93       	push	r30
 1ca:	ff 93       	push	r31
	//running_status |= (1<<RU_INTERRUPT);
	mrf_interrupt_handler(); // mrf24 object interrupt routine
 1cc:	b3 d1       	rcall	.+870    	; 0x534 <mrf_interrupt_handler>
	//running_status &= ~(1<<RU_INTERRUPT);
}
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <pollButton>:

uint8_t pollButton()
{
	if(BUTTON_PIN & (1<<BUTTON)) return 0;
 1f0:	89 b1       	in	r24, 0x09	; 9
 1f2:	80 95       	com	r24
	else return 1;
}
 1f4:	81 70       	andi	r24, 0x01	; 1
 1f6:	08 95       	ret

000001f8 <main>:
	}
}

int main(void)
{
	setup();
 1f8:	76 df       	rcall	.-276    	; 0xe6 <setup>
    {
		//mrf_check_flags(&handle_rx, &handle_tx);
		if(!pollButton())
		{
			//BLINK(LIGHT_PORT,GREEN_LIGHT);
			message = 31; //might need to typecast message to 8 bit pointer
 1fa:	cf e1       	ldi	r28, 0x1F	; 31
 1fc:	d0 e0       	ldi	r29, 0x00	; 0

    /* Replace with your application code */
    while (1) 
    {
		//mrf_check_flags(&handle_rx, &handle_tx);
		if(!pollButton())
 1fe:	f8 df       	rcall	.-16     	; 0x1f0 <pollButton>
 200:	81 11       	cpse	r24, r1
 202:	fd cf       	rjmp	.-6      	; 0x1fe <main+0x6>
		{
			//BLINK(LIGHT_PORT,GREEN_LIGHT);
			message = 31; //might need to typecast message to 8 bit pointer
 204:	d0 93 fd 01 	sts	0x01FD, r29	; 0x8001fd <message+0x1>
 208:	c0 93 fc 01 	sts	0x01FC, r28	; 0x8001fc <message>
			mrf_send16(DEVICE_13,(uint8_t*)&message,2); //send the message to device 32.
 20c:	42 e0       	ldi	r20, 0x02	; 2
 20e:	6c ef       	ldi	r22, 0xFC	; 252
 210:	71 e0       	ldi	r23, 0x01	; 1
 212:	83 e1       	ldi	r24, 0x13	; 19
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	97 d0       	rcall	.+302    	; 0x346 <mrf_send16>
			//BLINK(LIGHT_PORT,GREEN_LIGHT);
			mrf_check_flags(&handle_rx, &handle_tx); //when should this be inserted?
 218:	68 e2       	ldi	r22, 0x28	; 40
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	85 e2       	ldi	r24, 0x25	; 37
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	47 d1       	rcall	.+654    	; 0x4b0 <mrf_check_flags>
 222:	ed cf       	rjmp	.-38     	; 0x1fe <main+0x6>

00000224 <mrf_reset>:
        mrf_write_long(MRF_TESTMODE, 0x00); // Disable PA/LNA on MRF24J40MB module.
    }
}

void mrf_rx_flush(void) {
    mrf_write_short(MRF_RXFLUSH, 0x01);
 224:	59 98       	cbi	0x0b, 1	; 11
 226:	87 ea       	ldi	r24, 0xA7	; 167
 228:	91 e6       	ldi	r25, 0x61	; 97
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <mrf_reset+0x6>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <mrf_reset+0xc>
 230:	00 00       	nop
 232:	59 9a       	sbi	0x0b, 1	; 11
 234:	83 e2       	ldi	r24, 0x23	; 35
 236:	94 ef       	ldi	r25, 0xF4	; 244
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <mrf_reset+0x14>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <mrf_reset+0x1a>
 23e:	00 00       	nop
 240:	08 95       	ret

00000242 <mrf_read_short>:
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	c0 e0       	ldi	r28, 0x00	; 0
 248:	d1 e0       	ldi	r29, 0x01	; 1
 24a:	88 0f       	add	r24, r24
 24c:	8e 77       	andi	r24, 0x7E	; 126
 24e:	88 83       	st	Y, r24
 250:	19 82       	std	Y+1, r1	; 0x01
 252:	26 e0       	ldi	r18, 0x06	; 6
 254:	42 e0       	ldi	r20, 0x02	; 2
 256:	be 01       	movw	r22, r28
 258:	ce 01       	movw	r24, r28
 25a:	0c d2       	rcall	.+1048   	; 0x674 <spi_transfer_nbytes>
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <mrf_read_long>:
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	c0 e0       	ldi	r28, 0x00	; 0
 26a:	d1 e0       	ldi	r29, 0x01	; 1
 26c:	9c 01       	movw	r18, r24
 26e:	36 95       	lsr	r19
 270:	27 95       	ror	r18
 272:	36 95       	lsr	r19
 274:	27 95       	ror	r18
 276:	36 95       	lsr	r19
 278:	27 95       	ror	r18
 27a:	20 68       	ori	r18, 0x80	; 128
 27c:	28 83       	st	Y, r18
 27e:	82 95       	swap	r24
 280:	88 0f       	add	r24, r24
 282:	80 7e       	andi	r24, 0xE0	; 224
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	1a 82       	std	Y+2, r1	; 0x02
 288:	26 e0       	ldi	r18, 0x06	; 6
 28a:	43 e0       	ldi	r20, 0x03	; 3
 28c:	be 01       	movw	r22, r28
 28e:	ce 01       	movw	r24, r28
 290:	f1 d1       	rcall	.+994    	; 0x674 <spi_transfer_nbytes>
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <mrf_write_short>:
 29a:	e0 e0       	ldi	r30, 0x00	; 0
 29c:	f1 e0       	ldi	r31, 0x01	; 1
 29e:	88 0f       	add	r24, r24
 2a0:	8e 77       	andi	r24, 0x7E	; 126
 2a2:	81 60       	ori	r24, 0x01	; 1
 2a4:	80 83       	st	Z, r24
 2a6:	61 83       	std	Z+1, r22	; 0x01
 2a8:	26 e0       	ldi	r18, 0x06	; 6
 2aa:	42 e0       	ldi	r20, 0x02	; 2
 2ac:	bf 01       	movw	r22, r30
 2ae:	cf 01       	movw	r24, r30
 2b0:	e1 d1       	rcall	.+962    	; 0x674 <spi_transfer_nbytes>
 2b2:	08 95       	ret

000002b4 <mrf_write_long>:
 2b4:	e0 e0       	ldi	r30, 0x00	; 0
 2b6:	f1 e0       	ldi	r31, 0x01	; 1
 2b8:	9c 01       	movw	r18, r24
 2ba:	36 95       	lsr	r19
 2bc:	27 95       	ror	r18
 2be:	36 95       	lsr	r19
 2c0:	27 95       	ror	r18
 2c2:	36 95       	lsr	r19
 2c4:	27 95       	ror	r18
 2c6:	20 68       	ori	r18, 0x80	; 128
 2c8:	20 83       	st	Z, r18
 2ca:	82 95       	swap	r24
 2cc:	88 0f       	add	r24, r24
 2ce:	80 7e       	andi	r24, 0xE0	; 224
 2d0:	80 61       	ori	r24, 0x10	; 16
 2d2:	81 83       	std	Z+1, r24	; 0x01
 2d4:	62 83       	std	Z+2, r22	; 0x02
 2d6:	26 e0       	ldi	r18, 0x06	; 6
 2d8:	43 e0       	ldi	r20, 0x03	; 3
 2da:	bf 01       	movw	r22, r30
 2dc:	cf 01       	movw	r24, r30
 2de:	ca d1       	rcall	.+916    	; 0x674 <spi_transfer_nbytes>
 2e0:	08 95       	ret

000002e2 <mrf_get_pan>:
 2e2:	cf 93       	push	r28
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	ad df       	rcall	.-166    	; 0x242 <mrf_read_short>
 2e8:	c8 2f       	mov	r28, r24
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	aa df       	rcall	.-172    	; 0x242 <mrf_read_short>
 2ee:	2c 2f       	mov	r18, r28
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	32 2f       	mov	r19, r18
 2f4:	22 27       	eor	r18, r18
 2f6:	a9 01       	movw	r20, r18
 2f8:	48 2b       	or	r20, r24
 2fa:	ca 01       	movw	r24, r20
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <mrf_set_pan>:
 300:	cf 93       	push	r28
 302:	c8 2f       	mov	r28, r24
 304:	69 2f       	mov	r22, r25
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	c8 df       	rcall	.-112    	; 0x29a <mrf_write_short>
 30a:	6c 2f       	mov	r22, r28
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	c5 df       	rcall	.-118    	; 0x29a <mrf_write_short>
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <mrf_address16_write>:
 314:	cf 93       	push	r28
 316:	c8 2f       	mov	r28, r24
 318:	69 2f       	mov	r22, r25
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	be df       	rcall	.-132    	; 0x29a <mrf_write_short>
 31e:	6c 2f       	mov	r22, r28
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	bb df       	rcall	.-138    	; 0x29a <mrf_write_short>
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <mrf_address16_read>:
 328:	cf 93       	push	r28
 32a:	84 e0       	ldi	r24, 0x04	; 4
 32c:	8a df       	rcall	.-236    	; 0x242 <mrf_read_short>
 32e:	c8 2f       	mov	r28, r24
 330:	83 e0       	ldi	r24, 0x03	; 3
 332:	87 df       	rcall	.-242    	; 0x242 <mrf_read_short>
 334:	2c 2f       	mov	r18, r28
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	32 2f       	mov	r19, r18
 33a:	22 27       	eor	r18, r18
 33c:	a9 01       	movw	r20, r18
 33e:	48 2b       	or	r20, r24
 340:	ca 01       	movw	r24, r20
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <mrf_send16>:
 346:	df 92       	push	r13
 348:	ef 92       	push	r14
 34a:	ff 92       	push	r15
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	d8 2f       	mov	r29, r24
 356:	c9 2f       	mov	r28, r25
 358:	7b 01       	movw	r14, r22
 35a:	d4 2e       	mov	r13, r20
 35c:	69 e0       	ldi	r22, 0x09	; 9
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	a8 df       	rcall	.-176    	; 0x2b4 <mrf_write_long>
 364:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <ignoreBytes>
 368:	67 5f       	subi	r22, 0xF7	; 247
 36a:	6d 0d       	add	r22, r13
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	a1 df       	rcall	.-190    	; 0x2b4 <mrf_write_long>
 372:	61 e6       	ldi	r22, 0x61	; 97
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	9d df       	rcall	.-198    	; 0x2b4 <mrf_write_long>
 37a:	68 e8       	ldi	r22, 0x88	; 136
 37c:	83 e0       	ldi	r24, 0x03	; 3
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	99 df       	rcall	.-206    	; 0x2b4 <mrf_write_long>
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	84 e0       	ldi	r24, 0x04	; 4
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	95 df       	rcall	.-214    	; 0x2b4 <mrf_write_long>
 38a:	ab df       	rcall	.-170    	; 0x2e2 <mrf_get_pan>
 38c:	19 2f       	mov	r17, r25
 38e:	68 2f       	mov	r22, r24
 390:	85 e0       	ldi	r24, 0x05	; 5
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	8f df       	rcall	.-226    	; 0x2b4 <mrf_write_long>
 396:	61 2f       	mov	r22, r17
 398:	86 e0       	ldi	r24, 0x06	; 6
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	8b df       	rcall	.-234    	; 0x2b4 <mrf_write_long>
 39e:	6d 2f       	mov	r22, r29
 3a0:	87 e0       	ldi	r24, 0x07	; 7
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	87 df       	rcall	.-242    	; 0x2b4 <mrf_write_long>
 3a6:	6c 2f       	mov	r22, r28
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	83 df       	rcall	.-250    	; 0x2b4 <mrf_write_long>
 3ae:	bc df       	rcall	.-136    	; 0x328 <mrf_address16_read>
 3b0:	c9 2f       	mov	r28, r25
 3b2:	68 2f       	mov	r22, r24
 3b4:	89 e0       	ldi	r24, 0x09	; 9
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	7d df       	rcall	.-262    	; 0x2b4 <mrf_write_long>
 3ba:	6c 2f       	mov	r22, r28
 3bc:	8a e0       	ldi	r24, 0x0A	; 10
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	79 df       	rcall	.-270    	; 0x2b4 <mrf_write_long>
 3c2:	c0 91 7b 01 	lds	r28, 0x017B	; 0x80017b <ignoreBytes>
 3c6:	d0 91 7c 01 	lds	r29, 0x017C	; 0x80017c <ignoreBytes+0x1>
 3ca:	2b 96       	adiw	r28, 0x0b	; 11
 3cc:	dd 20       	and	r13, r13
 3ce:	61 f0       	breq	.+24     	; 0x3e8 <mrf_send16+0xa2>
 3d0:	87 01       	movw	r16, r14
 3d2:	ed 0c       	add	r14, r13
 3d4:	f1 1c       	adc	r15, r1
 3d6:	f8 01       	movw	r30, r16
 3d8:	61 91       	ld	r22, Z+
 3da:	8f 01       	movw	r16, r30
 3dc:	ce 01       	movw	r24, r28
 3de:	6a df       	rcall	.-300    	; 0x2b4 <mrf_write_long>
 3e0:	21 96       	adiw	r28, 0x01	; 1
 3e2:	0e 15       	cp	r16, r14
 3e4:	1f 05       	cpc	r17, r15
 3e6:	b9 f7       	brne	.-18     	; 0x3d6 <mrf_send16+0x90>
 3e8:	65 e0       	ldi	r22, 0x05	; 5
 3ea:	8b e1       	ldi	r24, 0x1B	; 27
 3ec:	56 df       	rcall	.-340    	; 0x29a <mrf_write_short>
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	0f 91       	pop	r16
 3f6:	ff 90       	pop	r15
 3f8:	ef 90       	pop	r14
 3fa:	df 90       	pop	r13
 3fc:	08 95       	ret

000003fe <mrf_set_interrupts>:
 3fe:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <isr_lock>
 402:	66 ef       	ldi	r22, 0xF6	; 246
 404:	82 e3       	ldi	r24, 0x32	; 50
 406:	49 df       	rcall	.-366    	; 0x29a <mrf_write_short>
 408:	08 95       	ret

0000040a <mrf_set_channel>:
 40a:	68 2f       	mov	r22, r24
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	6b 50       	subi	r22, 0x0B	; 11
 410:	71 09       	sbc	r23, r1
 412:	62 95       	swap	r22
 414:	72 95       	swap	r23
 416:	70 7f       	andi	r23, 0xF0	; 240
 418:	76 27       	eor	r23, r22
 41a:	60 7f       	andi	r22, 0xF0	; 240
 41c:	76 27       	eor	r23, r22
 41e:	63 60       	ori	r22, 0x03	; 3
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	92 e0       	ldi	r25, 0x02	; 2
 424:	47 df       	rcall	.-370    	; 0x2b4 <mrf_write_long>
 426:	08 95       	ret

00000428 <mrf_init>:
 428:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <mrf_flags>
 42c:	67 e0       	ldi	r22, 0x07	; 7
 42e:	8a e2       	ldi	r24, 0x2A	; 42
 430:	34 df       	rcall	.-408    	; 0x29a <mrf_write_short>
 432:	68 e9       	ldi	r22, 0x98	; 152
 434:	88 e1       	ldi	r24, 0x18	; 24
 436:	31 df       	rcall	.-414    	; 0x29a <mrf_write_short>
 438:	65 e9       	ldi	r22, 0x95	; 149
 43a:	8e e2       	ldi	r24, 0x2E	; 46
 43c:	2e df       	rcall	.-420    	; 0x29a <mrf_write_short>
 43e:	63 e0       	ldi	r22, 0x03	; 3
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	92 e0       	ldi	r25, 0x02	; 2
 444:	37 df       	rcall	.-402    	; 0x2b4 <mrf_write_long>
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	92 e0       	ldi	r25, 0x02	; 2
 44c:	33 df       	rcall	.-410    	; 0x2b4 <mrf_write_long>
 44e:	60 e8       	ldi	r22, 0x80	; 128
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	92 e0       	ldi	r25, 0x02	; 2
 454:	2f df       	rcall	.-418    	; 0x2b4 <mrf_write_long>
 456:	60 e9       	ldi	r22, 0x90	; 144
 458:	86 e0       	ldi	r24, 0x06	; 6
 45a:	92 e0       	ldi	r25, 0x02	; 2
 45c:	2b df       	rcall	.-426    	; 0x2b4 <mrf_write_long>
 45e:	60 e8       	ldi	r22, 0x80	; 128
 460:	87 e0       	ldi	r24, 0x07	; 7
 462:	92 e0       	ldi	r25, 0x02	; 2
 464:	27 df       	rcall	.-434    	; 0x2b4 <mrf_write_long>
 466:	60 e1       	ldi	r22, 0x10	; 16
 468:	88 e0       	ldi	r24, 0x08	; 8
 46a:	92 e0       	ldi	r25, 0x02	; 2
 46c:	23 df       	rcall	.-442    	; 0x2b4 <mrf_write_long>
 46e:	61 e2       	ldi	r22, 0x21	; 33
 470:	80 e2       	ldi	r24, 0x20	; 32
 472:	92 e0       	ldi	r25, 0x02	; 2
 474:	1f df       	rcall	.-450    	; 0x2b4 <mrf_write_long>
 476:	60 e8       	ldi	r22, 0x80	; 128
 478:	8a e3       	ldi	r24, 0x3A	; 58
 47a:	0f df       	rcall	.-482    	; 0x29a <mrf_write_short>
 47c:	60 e6       	ldi	r22, 0x60	; 96
 47e:	8f e3       	ldi	r24, 0x3F	; 63
 480:	0c df       	rcall	.-488    	; 0x29a <mrf_write_short>
 482:	60 e4       	ldi	r22, 0x40	; 64
 484:	8e e3       	ldi	r24, 0x3E	; 62
 486:	09 df       	rcall	.-494    	; 0x29a <mrf_write_short>
 488:	ba df       	rcall	.-140    	; 0x3fe <mrf_set_interrupts>
 48a:	84 e1       	ldi	r24, 0x14	; 20
 48c:	be df       	rcall	.-132    	; 0x40a <mrf_set_channel>
 48e:	64 e0       	ldi	r22, 0x04	; 4
 490:	86 e3       	ldi	r24, 0x36	; 54
 492:	03 df       	rcall	.-506    	; 0x29a <mrf_write_short>
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	86 e3       	ldi	r24, 0x36	; 54
 498:	00 df       	rcall	.-512    	; 0x29a <mrf_write_short>
 49a:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <flag_got_rx>
 49e:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <flag_got_tx>
 4a2:	89 ef       	ldi	r24, 0xF9	; 249
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <mrf_init+0x7e>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <mrf_init+0x84>
 4ac:	00 00       	nop
 4ae:	08 95       	ret

000004b0 <mrf_check_flags>:
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	fc 01       	movw	r30, r24
 4b6:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <isr_lock>
 4ba:	91 11       	cpse	r25, r1
 4bc:	2c c0       	rjmp	.+88     	; 0x516 <mrf_check_flags+0x66>
 4be:	eb 01       	movw	r28, r22
 4c0:	5d 9a       	sbi	0x0b, 5	; 11
 4c2:	8f e4       	ldi	r24, 0x4F	; 79
 4c4:	93 ec       	ldi	r25, 0xC3	; 195
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <mrf_check_flags+0x16>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <mrf_check_flags+0x1c>
 4cc:	00 00       	nop
 4ce:	5d 98       	cbi	0x0b, 5	; 11
 4d0:	8f e4       	ldi	r24, 0x4F	; 79
 4d2:	93 ec       	ldi	r25, 0xC3	; 195
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <mrf_check_flags+0x24>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <mrf_check_flags+0x2a>
 4da:	00 00       	nop
 4dc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <flag_got_rx>
 4e0:	88 23       	and	r24, r24
 4e2:	19 f0       	breq	.+6      	; 0x4ea <mrf_check_flags+0x3a>
 4e4:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <flag_got_rx>
 4e8:	09 95       	icall
 4ea:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <flag_got_tx>
 4ee:	88 23       	and	r24, r24
 4f0:	91 f0       	breq	.+36     	; 0x516 <mrf_check_flags+0x66>
 4f2:	5c 9a       	sbi	0x0b, 4	; 11
 4f4:	ef e4       	ldi	r30, 0x4F	; 79
 4f6:	f3 ec       	ldi	r31, 0xC3	; 195
 4f8:	31 97       	sbiw	r30, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <mrf_check_flags+0x48>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <mrf_check_flags+0x4e>
 4fe:	00 00       	nop
 500:	5c 98       	cbi	0x0b, 4	; 11
 502:	8f e4       	ldi	r24, 0x4F	; 79
 504:	93 ec       	ldi	r25, 0xC3	; 195
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <mrf_check_flags+0x56>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <mrf_check_flags+0x5c>
 50c:	00 00       	nop
 50e:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <flag_got_tx>
 512:	fe 01       	movw	r30, r28
 514:	09 95       	icall
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

0000051c <mrf_get_bufferPHY>:
 51c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <mrf_flags>
 520:	84 60       	ori	r24, 0x04	; 4
 522:	08 95       	ret

00000524 <mrf_rx_disable>:
}

void mrf_rx_disable(void) {
    mrf_write_short(MRF_BBREG1, 0x04);  // RXDECINV - disable receiver
 524:	64 e0       	ldi	r22, 0x04	; 4
 526:	89 e3       	ldi	r24, 0x39	; 57
 528:	b8 de       	rcall	.-656    	; 0x29a <mrf_write_short>
 52a:	08 95       	ret

0000052c <mrf_rx_enable>:
}

void mrf_rx_enable(void) {
    mrf_write_short(MRF_BBREG1, 0x00);  // RXDECINV - enable receiver
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	89 e3       	ldi	r24, 0x39	; 57
 530:	b4 de       	rcall	.-664    	; 0x29a <mrf_write_short>
 532:	08 95       	ret

00000534 <mrf_interrupt_handler>:
 * Call this from within an interrupt handler connected to the MRFs output
 * interrupt pin.  It handles reading in any data from the module, and letting it
 * continue working.
 * Only the most recent data is ever kept.
 */
void mrf_interrupt_handler(void) {
 534:	af 92       	push	r10
 536:	bf 92       	push	r11
 538:	cf 92       	push	r12
 53a:	df 92       	push	r13
 53c:	ef 92       	push	r14
 53e:	ff 92       	push	r15
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
    //GRAB_ISR_MUTEX;
    isr_lock = 1;
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <isr_lock>
    uint8_t last_interrupt = mrf_read_short(MRF_INTSTAT);
 54e:	81 e3       	ldi	r24, 0x31	; 49
 550:	78 de       	rcall	.-784    	; 0x242 <mrf_read_short>
 552:	b8 2e       	mov	r11, r24
    if (last_interrupt & MRF_I_RXIF) {
 554:	83 ff       	sbrs	r24, 3
 556:	4f c0       	rjmp	.+158    	; 0x5f6 <mrf_interrupt_handler+0xc2>
        int i = 0;
        flag_got_rx++;
 558:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <flag_got_rx>
 55c:	8f 5f       	subi	r24, 0xFF	; 255
 55e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <flag_got_rx>
        // read out the packet data...
    //    cli();
        mrf_rx_disable();
 562:	e0 df       	rcall	.-64     	; 0x524 <mrf_rx_disable>
        // read start of rxfifo for, has 2 bytes more added by FCS. frame_length = m + n + 2
        uint8_t frame_length = mrf_read_long(0x300);
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	93 e0       	ldi	r25, 0x03	; 3
 568:	7d de       	rcall	.-774    	; 0x264 <mrf_read_long>
 56a:	a8 2e       	mov	r10, r24

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
 56c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <mrf_flags>
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 570:	ea 2c       	mov	r14, r10
 572:	f1 2c       	mov	r15, r1
 574:	1e 14       	cp	r1, r14
 576:	1f 04       	cpc	r1, r15
 578:	9c f4       	brge	.+38     	; 0x5a0 <mrf_interrupt_handler+0x6c>
 57a:	c7 01       	movw	r24, r14
 57c:	9c 01       	movw	r18, r24
 57e:	23 58       	subi	r18, 0x83	; 131
 580:	3e 4f       	sbci	r19, 0xFE	; 254
 582:	69 01       	movw	r12, r18
 584:	cd e7       	ldi	r28, 0x7D	; 125
 586:	d1 e0       	ldi	r29, 0x01	; 1
                rx_buf[rb_ptr++] = mrf_read_long(0x301 + i);
 588:	01 e0       	ldi	r16, 0x01	; 1
 58a:	13 e0       	ldi	r17, 0x03	; 3
 58c:	0d 57       	subi	r16, 0x7D	; 125
 58e:	11 40       	sbci	r17, 0x01	; 1
 590:	c8 01       	movw	r24, r16
 592:	8c 0f       	add	r24, r28
 594:	9d 1f       	adc	r25, r29
 596:	66 de       	rcall	.-820    	; 0x264 <mrf_read_long>
 598:	89 93       	st	Y+, r24
        uint8_t frame_length = mrf_read_long(0x300);

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 59a:	cc 15       	cp	r28, r12
 59c:	dd 05       	cpc	r29, r13
 59e:	c1 f7       	brne	.-16     	; 0x590 <mrf_interrupt_handler+0x5c>
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 5a0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rx_info>
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	0b 97       	sbiw	r24, 0x0b	; 11
 5a8:	18 16       	cp	r1, r24
 5aa:	19 06       	cpc	r1, r25
 5ac:	ac f4       	brge	.+42     	; 0x5d8 <mrf_interrupt_handler+0xa4>
 5ae:	c5 e0       	ldi	r28, 0x05	; 5
 5b0:	d1 e0       	ldi	r29, 0x01	; 1
 5b2:	c1 2c       	mov	r12, r1
 5b4:	d1 2c       	mov	r13, r1
uint8_t * mrf_get_rxbuf(void) {
    return rx_buf;
}

int mrf_rx_datalength(void) {
    return rx_info.frame_length - bytes_nodata;
 5b6:	04 e0       	ldi	r16, 0x04	; 4
 5b8:	11 e0       	ldi	r17, 0x01	; 1

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
 5ba:	3f ef       	ldi	r19, 0xFF	; 255
 5bc:	c3 1a       	sub	r12, r19
 5be:	d3 0a       	sbc	r13, r19
 5c0:	c6 01       	movw	r24, r12
 5c2:	87 5f       	subi	r24, 0xF7	; 247
 5c4:	9c 4f       	sbci	r25, 0xFC	; 252
 5c6:	4e de       	rcall	.-868    	; 0x264 <mrf_read_long>
 5c8:	89 93       	st	Y+, r24
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 5ca:	f8 01       	movw	r30, r16
 5cc:	80 81       	ld	r24, Z
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	0b 97       	sbiw	r24, 0x0b	; 11
 5d2:	c8 16       	cp	r12, r24
 5d4:	d9 06       	cpc	r13, r25
 5d6:	8c f3       	brlt	.-30     	; 0x5ba <mrf_interrupt_handler+0x86>
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
        }

        rx_info.frame_length = frame_length;
 5d8:	a0 92 04 01 	sts	0x0104, r10	; 0x800104 <rx_info>
        // same as datasheet 0x301 + (m + n + 2) <-- frame_length
        rx_info.lqi = mrf_read_long(0x301 + frame_length);
 5dc:	c7 01       	movw	r24, r14
 5de:	8f 5f       	subi	r24, 0xFF	; 255
 5e0:	9c 4f       	sbci	r25, 0xFC	; 252
 5e2:	40 de       	rcall	.-896    	; 0x264 <mrf_read_long>
 5e4:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <rx_info+0x75>
        // same as datasheet 0x301 + (m + n + 3) <-- frame_length + 1
        rx_info.rssi = mrf_read_long(0x301 + frame_length + 1);
 5e8:	c7 01       	movw	r24, r14
 5ea:	8e 5f       	subi	r24, 0xFE	; 254
 5ec:	9c 4f       	sbci	r25, 0xFC	; 252
 5ee:	3a de       	rcall	.-908    	; 0x264 <mrf_read_long>
 5f0:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rx_info+0x76>

        mrf_rx_enable();
 5f4:	9b df       	rcall	.-202    	; 0x52c <mrf_rx_enable>
    //    sei();
    }
    if (last_interrupt & MRF_I_TXNIF) {
 5f6:	b0 fe       	sbrs	r11, 0
 5f8:	1c c0       	rjmp	.+56     	; 0x632 <mrf_interrupt_handler+0xfe>
        flag_got_tx++;
 5fa:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <flag_got_tx>
 5fe:	8f 5f       	subi	r24, 0xFF	; 255
 600:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <flag_got_tx>
        mrf_reg_TXSTAT = mrf_read_short(MRF_TXSTAT);
 604:	84 e2       	ldi	r24, 0x24	; 36
 606:	1d de       	rcall	.-966    	; 0x242 <mrf_read_short>
 608:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <mrf_reg_TXSTAT>
        // 1 means it failed, we want 1 to mean it worked.
        tx_info.tx_ok = !(mrf_reg_TXSTAT & 0x3F);
 60c:	98 2f       	mov	r25, r24
 60e:	9f 73       	andi	r25, 0x3F	; 63
 610:	21 e0       	ldi	r18, 0x01	; 1
 612:	09 f0       	breq	.+2      	; 0x616 <mrf_interrupt_handler+0xe2>
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <tx_info>
 61a:	20 fb       	bst	r18, 0
 61c:	90 f9       	bld	r25, 0
        tx_info.retries = mrf_reg_TXSTAT >> 6;
 61e:	82 95       	swap	r24
 620:	86 95       	lsr	r24
 622:	86 95       	lsr	r24
 624:	83 70       	andi	r24, 0x03	; 3
 626:	88 0f       	add	r24, r24
 628:	99 7f       	andi	r25, 0xF9	; 249
        tx_info.channel_busy = (mrf_reg_TXSTAT & (1 << CCAFAIL));
 62a:	89 2b       	or	r24, r25
 62c:	87 7f       	andi	r24, 0xF7	; 247
 62e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tx_info>
    }
//DROP_ISR_MUTEX;
    isr_lock = 0;
 632:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <isr_lock>
}
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	1f 91       	pop	r17
 63c:	0f 91       	pop	r16
 63e:	ff 90       	pop	r15
 640:	ef 90       	pop	r14
 642:	df 90       	pop	r13
 644:	cf 90       	pop	r12
 646:	bf 90       	pop	r11
 648:	af 90       	pop	r10
 64a:	08 95       	ret

0000064c <mrf_get_rxdata>:
}

uint8_t* mrf_get_rxdata()
{
	return rx_info.rx_data;
}
 64c:	85 e0       	ldi	r24, 0x05	; 5
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	08 95       	ret

00000652 <mrf_tx_ok>:


uint8_t mrf_tx_ok()
{
	return tx_info.tx_ok;
 652:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tx_info>
}
 656:	81 70       	andi	r24, 0x01	; 1
 658:	08 95       	ret

0000065a <spi_setup>:
	SPCR &= ~3;  // Clear speed bits (sets speed to default = fosc / 4)

	SPCR |= (3 & spbits);  // Set user bits

	if(spbits & 4) SPSR |= 1;
		else SPSR &= (~1);
 65a:	81 e5       	ldi	r24, 0x51	; 81
 65c:	8c bd       	out	0x2c, r24	; 44
 65e:	08 95       	ret

00000660 <spi_transfer_byte>:
/*Transfers a single byte between master and slave*/

void spi_transfer_byte(uint8_t* bout, uint8_t* bin)
{
	/*Outgoing data into data register*/
	DATAREG = *bout;
 660:	fc 01       	movw	r30, r24
 662:	80 81       	ld	r24, Z
 664:	8e bd       	out	0x2e, r24	; 46

	while(! SPI_BYTE_XFER_DONE)
 666:	0d b4       	in	r0, 0x2d	; 45
 668:	07 fe       	sbrs	r0, 7
 66a:	fd cf       	rjmp	.-6      	; 0x666 <spi_transfer_byte+0x6>
		USICR = usi_clk_lo;
		USICR = usi_clk_hi;
		#endif
	} 
	/*Incomming data out of data register*/
	*bin = DATAREG;
 66c:	8e b5       	in	r24, 0x2e	; 46
 66e:	fb 01       	movw	r30, r22
 670:	80 83       	st	Z, r24
 672:	08 95       	ret

00000674 <spi_transfer_nbytes>:
}

/*Selects the slave (cs)  and transfers n bytes. The input and output buffers must be defined and contain at least n bytes each*/

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
 674:	cf 92       	push	r12
 676:	df 92       	push	r13
 678:	ef 92       	push	r14
 67a:	ff 92       	push	r15
 67c:	0f 93       	push	r16
 67e:	1f 93       	push	r17
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	ec 01       	movw	r28, r24
 686:	8b 01       	movw	r16, r22
	SPI_CS_PORT &= ~(1<<cs); /*Select slave chip*/
 688:	85 b1       	in	r24, 0x05	; 5
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	6b 01       	movw	r12, r22
 690:	02 c0       	rjmp	.+4      	; 0x696 <spi_transfer_nbytes+0x22>
 692:	cc 0c       	add	r12, r12
 694:	dd 1c       	adc	r13, r13
 696:	2a 95       	dec	r18
 698:	e2 f7       	brpl	.-8      	; 0x692 <spi_transfer_nbytes+0x1e>
 69a:	9c 2d       	mov	r25, r12
 69c:	90 95       	com	r25
 69e:	89 23       	and	r24, r25
 6a0:	85 b9       	out	0x05, r24	; 5
	while(n)
 6a2:	44 23       	and	r20, r20
 6a4:	89 f0       	breq	.+34     	; 0x6c8 <spi_transfer_nbytes+0x54>
 6a6:	41 50       	subi	r20, 0x01	; 1
 6a8:	e4 2e       	mov	r14, r20
 6aa:	f1 2c       	mov	r15, r1
 6ac:	8f ef       	ldi	r24, 0xFF	; 255
 6ae:	e8 1a       	sub	r14, r24
 6b0:	f8 0a       	sbc	r15, r24
 6b2:	ec 0e       	add	r14, r28
 6b4:	fd 1e       	adc	r15, r29
	{
		spi_transfer_byte(out,in);    /*transfer byte */
 6b6:	b8 01       	movw	r22, r16
 6b8:	ce 01       	movw	r24, r28
 6ba:	d2 df       	rcall	.-92     	; 0x660 <spi_transfer_byte>
		/*advance iterators*/
		out = out + 1;
 6bc:	21 96       	adiw	r28, 0x01	; 1
		in = in + 1;
 6be:	0f 5f       	subi	r16, 0xFF	; 255
 6c0:	1f 4f       	sbci	r17, 0xFF	; 255
/*Selects the slave (cs)  and transfers n bytes. The input and output buffers must be defined and contain at least n bytes each*/

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
	SPI_CS_PORT &= ~(1<<cs); /*Select slave chip*/
	while(n)
 6c2:	ec 16       	cp	r14, r28
 6c4:	fd 06       	cpc	r15, r29
 6c6:	b9 f7       	brne	.-18     	; 0x6b6 <spi_transfer_nbytes+0x42>
		/*advance iterators*/
		out = out + 1;
		in = in + 1;
		n = n - 1;
	}
	SPI_CS_PORT |= 1<<cs;/*Deselect slave chip*/
 6c8:	85 b1       	in	r24, 0x05	; 5
 6ca:	c8 2a       	or	r12, r24
 6cc:	c5 b8       	out	0x05, r12	; 5
}
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	1f 91       	pop	r17
 6d4:	0f 91       	pop	r16
 6d6:	ff 90       	pop	r15
 6d8:	ef 90       	pop	r14
 6da:	df 90       	pop	r13
 6dc:	cf 90       	pop	r12
 6de:	08 95       	ret

000006e0 <_exit>:
 6e0:	f8 94       	cli

000006e2 <__stop_program>:
 6e2:	ff cf       	rjmp	.-2      	; 0x6e2 <__stop_program>
