
3WayRelay-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015d  00800100  00800100  00000824  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000854  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022c4  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c30  00000000  00000000  00002d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ec8  00000000  00000000  0000398c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ec  00000000  00000000  00004854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000089e  00000000  00000000  00004d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001387  00000000  00000000  000055de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00006965  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	82 c0       	rjmp	.+260    	; 0x108 <__vector_1>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
  26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
  34:	22 e0       	ldi	r18, 0x02	; 2
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
  3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
  3e:	ad 35       	cpi	r26, 0x5D	; 93
  40:	b2 07       	cpc	r27, r18
  42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
  44:	51 d1       	rcall	.+674    	; 0x2e8 <main>
  46:	b2 c3       	rjmp	.+1892   	; 0x7ac <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <bytes_to_word>:
uint16_t bytes_to_word(uint8_t* b)
{
    uint16_t hi = (uint16_t) b[0];
    uint16_t lo = (uint16_t) b[1];

    return (hi << 8) | lo;
  4a:	fc 01       	movw	r30, r24
  4c:	20 81       	ld	r18, Z
  4e:	30 e0       	ldi	r19, 0x00	; 0
  50:	32 2f       	mov	r19, r18
  52:	22 27       	eor	r18, r18
  54:	81 81       	ldd	r24, Z+1	; 0x01
}
  56:	a9 01       	movw	r20, r18
  58:	48 2b       	or	r20, r24
  5a:	ca 01       	movw	r24, r20
  5c:	08 95       	ret

0000005e <word_to_bytes>:

void word_to_bytes(uint8_t* b, uint16_t d)
{
    b[0] = (uint8_t)(d >> 8);
  5e:	fc 01       	movw	r30, r24
  60:	70 83       	st	Z, r23
    b[1] = (uint8_t)(255 & d);
  62:	61 83       	std	Z+1, r22	; 0x01
  64:	08 95       	ret

00000066 <handle_tx>:
	running_status &= ~(1<<RU_RX_HANDLE);
}


void loop()
{
  66:	08 95       	ret

00000068 <setup>:
  68:	55 9a       	sbi	0x0a, 5	; 10
  6a:	56 9a       	sbi	0x0a, 6	; 10
  6c:	57 9a       	sbi	0x0a, 7	; 10
  6e:	85 b1       	in	r24, 0x05	; 5
  70:	8c 6e       	ori	r24, 0xEC	; 236
  72:	85 b9       	out	0x05, r24	; 5
  74:	84 b1       	in	r24, 0x04	; 4
  76:	8c 6e       	ori	r24, 0xEC	; 236
  78:	84 b9       	out	0x04, r24	; 4
  7a:	24 98       	cbi	0x04, 4	; 4
  7c:	38 d3       	rcall	.+1648   	; 0x6ee <spi_setup>
  7e:	3b d1       	rcall	.+630    	; 0x2f6 <mrf_reset>
  80:	3c d2       	rcall	.+1144   	; 0x4fa <mrf_init>
  82:	8e ef       	ldi	r24, 0xFE	; 254
  84:	9a ec       	ldi	r25, 0xCA	; 202
  86:	a5 d1       	rcall	.+842    	; 0x3d2 <mrf_set_pan>
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	ac d1       	rcall	.+856    	; 0x3e6 <mrf_address16_write>
  8e:	78 94       	sei
  90:	e8 9a       	sbi	0x1d, 0	; 29
  92:	e9 e6       	ldi	r30, 0x69	; 105
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	80 83       	st	Z, r24
  9c:	81 e3       	ldi	r24, 0x31	; 49
  9e:	92 e0       	ldi	r25, 0x02	; 2
  a0:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <transmit_command_header+0x1>
  a4:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <transmit_command_header>
  a8:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <neighbor_status>
  ac:	8a e0       	ldi	r24, 0x0A	; 10
  ae:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <command_status>
  b2:	5e 9a       	sbi	0x0b, 6	; 11
  b4:	8f e4       	ldi	r24, 0x4F	; 79
  b6:	93 ec       	ldi	r25, 0xC3	; 195
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <setup+0x50>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <setup+0x56>
  be:	00 00       	nop
  c0:	5e 98       	cbi	0x0b, 6	; 11
  c2:	8f e4       	ldi	r24, 0x4F	; 79
  c4:	93 ec       	ldi	r25, 0xC3	; 195
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <setup+0x5e>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <setup+0x64>
  cc:	00 00       	nop
  ce:	5f 9a       	sbi	0x0b, 7	; 11
  d0:	8f e4       	ldi	r24, 0x4F	; 79
  d2:	93 ec       	ldi	r25, 0xC3	; 195
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <setup+0x6c>
  d8:	00 c0       	rjmp	.+0      	; 0xda <setup+0x72>
  da:	00 00       	nop
  dc:	5f 98       	cbi	0x0b, 7	; 11
  de:	8f e4       	ldi	r24, 0x4F	; 79
  e0:	93 ec       	ldi	r25, 0xC3	; 195
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <setup+0x7a>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <setup+0x80>
  e8:	00 00       	nop
  ea:	5d 9a       	sbi	0x0b, 5	; 11
  ec:	8f e4       	ldi	r24, 0x4F	; 79
  ee:	93 ec       	ldi	r25, 0xC3	; 195
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <setup+0x88>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <setup+0x8e>
  f6:	00 00       	nop
  f8:	5d 98       	cbi	0x0b, 5	; 11
  fa:	8f e4       	ldi	r24, 0x4F	; 79
  fc:	93 ec       	ldi	r25, 0xC3	; 195
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <setup+0x96>
 102:	00 c0       	rjmp	.+0      	; 0x104 <setup+0x9c>
 104:	00 00       	nop
 106:	08 95       	ret

00000108 <__vector_1>:
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	2f 93       	push	r18
 114:	3f 93       	push	r19
 116:	4f 93       	push	r20
 118:	5f 93       	push	r21
 11a:	6f 93       	push	r22
 11c:	7f 93       	push	r23
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	af 93       	push	r26
 124:	bf 93       	push	r27
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
 12a:	5f 9a       	sbi	0x0b, 7	; 11
 12c:	8f e4       	ldi	r24, 0x4F	; 79
 12e:	93 ec       	ldi	r25, 0xC3	; 195
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <__vector_1+0x28>
 134:	00 c0       	rjmp	.+0      	; 0x136 <__vector_1+0x2e>
 136:	00 00       	nop
 138:	5f 98       	cbi	0x0b, 7	; 11
 13a:	8f e4       	ldi	r24, 0x4F	; 79
 13c:	93 ec       	ldi	r25, 0xC3	; 195
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <__vector_1+0x36>
 142:	00 c0       	rjmp	.+0      	; 0x144 <__vector_1+0x3c>
 144:	00 00       	nop
 146:	44 d2       	rcall	.+1160   	; 0x5d0 <mrf_interrupt_handler>
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <ping_respond>:
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	ec 01       	movw	r28, r24
 170:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <transmit_command_header>
 174:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <transmit_command_header+0x1>
 178:	62 e5       	ldi	r22, 0x52	; 82
 17a:	75 e4       	ldi	r23, 0x45	; 69
 17c:	02 96       	adiw	r24, 0x02	; 2
 17e:	6f df       	rcall	.-290    	; 0x5e <word_to_bytes>
 180:	40 91 32 02 	lds	r20, 0x0232	; 0x800232 <transmit_data_buffer+0x9>
 184:	69 e2       	ldi	r22, 0x29	; 41
 186:	72 e0       	ldi	r23, 0x02	; 2
 188:	ce 01       	movw	r24, r28
 18a:	46 d1       	rcall	.+652    	; 0x418 <mrf_send16>
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <COMMAND_HANDLER>:
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	8c 01       	movw	r16, r24
 19c:	5d 9a       	sbi	0x0b, 5	; 11
 19e:	8f e4       	ldi	r24, 0x4F	; 79
 1a0:	93 ec       	ldi	r25, 0xC3	; 195
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <COMMAND_HANDLER+0x10>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <COMMAND_HANDLER+0x16>
 1a8:	00 00       	nop
 1aa:	5d 98       	cbi	0x0b, 5	; 11
 1ac:	8f e4       	ldi	r24, 0x4F	; 79
 1ae:	93 ec       	ldi	r25, 0xC3	; 195
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <COMMAND_HANDLER+0x1e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <COMMAND_HANDLER+0x24>
 1b6:	00 00       	nop
 1b8:	c8 01       	movw	r24, r16
 1ba:	0a 96       	adiw	r24, 0x0a	; 10
 1bc:	46 df       	rcall	.-372    	; 0x4a <bytes_to_word>
 1be:	83 34       	cpi	r24, 0x43	; 67
 1c0:	95 44       	sbci	r25, 0x45	; 69
 1c2:	91 f4       	brne	.+36     	; 0x1e8 <COMMAND_HANDLER+0x56>
 1c4:	5d 9a       	sbi	0x0b, 5	; 11
 1c6:	8f e4       	ldi	r24, 0x4F	; 79
 1c8:	93 ec       	ldi	r25, 0xC3	; 195
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <COMMAND_HANDLER+0x38>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <COMMAND_HANDLER+0x3e>
 1d0:	00 00       	nop
 1d2:	5d 98       	cbi	0x0b, 5	; 11
 1d4:	8f e4       	ldi	r24, 0x4F	; 79
 1d6:	93 ec       	ldi	r25, 0xC3	; 195
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <COMMAND_HANDLER+0x46>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <COMMAND_HANDLER+0x4c>
 1de:	00 00       	nop
 1e0:	c8 01       	movw	r24, r16
 1e2:	06 96       	adiw	r24, 0x06	; 6
 1e4:	32 df       	rcall	.-412    	; 0x4a <bytes_to_word>
 1e6:	c1 df       	rcall	.-126    	; 0x16a <ping_respond>
 1e8:	e8 01       	movw	r28, r16
 1ea:	22 96       	adiw	r28, 0x02	; 2
 1ec:	ce 01       	movw	r24, r28
 1ee:	2d df       	rcall	.-422    	; 0x4a <bytes_to_word>
 1f0:	82 35       	cpi	r24, 0x52	; 82
 1f2:	95 44       	sbci	r25, 0x45	; 69
 1f4:	d9 f4       	brne	.+54     	; 0x22c <COMMAND_HANDLER+0x9a>
 1f6:	c8 01       	movw	r24, r16
 1f8:	04 96       	adiw	r24, 0x04	; 4
 1fa:	27 df       	rcall	.-434    	; 0x4a <bytes_to_word>
 1fc:	89 2b       	or	r24, r25
 1fe:	b1 f4       	brne	.+44     	; 0x22c <COMMAND_HANDLER+0x9a>
 200:	5f 9a       	sbi	0x0b, 7	; 11
 202:	8f e4       	ldi	r24, 0x4F	; 79
 204:	93 ec       	ldi	r25, 0xC3	; 195
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <COMMAND_HANDLER+0x74>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <COMMAND_HANDLER+0x7a>
 20c:	00 00       	nop
 20e:	5f 98       	cbi	0x0b, 7	; 11
 210:	8f e4       	ldi	r24, 0x4F	; 79
 212:	93 ec       	ldi	r25, 0xC3	; 195
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <COMMAND_HANDLER+0x82>
 218:	00 c0       	rjmp	.+0      	; 0x21a <COMMAND_HANDLER+0x88>
 21a:	00 00       	nop
 21c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <transmit_command_header>
 220:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <transmit_command_header+0x1>
 224:	6c ea       	ldi	r22, 0xAC	; 172
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	04 96       	adiw	r24, 0x04	; 4
 22a:	19 df       	rcall	.-462    	; 0x5e <word_to_bytes>
 22c:	ce 01       	movw	r24, r28
 22e:	0d df       	rcall	.-486    	; 0x4a <bytes_to_word>
 230:	8d 3e       	cpi	r24, 0xED	; 237
 232:	91 05       	cpc	r25, r1
 234:	79 f4       	brne	.+30     	; 0x254 <COMMAND_HANDLER+0xc2>
 236:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <neighbor_status>
 23a:	81 11       	cpse	r24, r1
 23c:	0b c0       	rjmp	.+22     	; 0x254 <COMMAND_HANDLER+0xc2>
 23e:	8d ee       	ldi	r24, 0xED	; 237
 240:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <command_status>
 244:	c8 01       	movw	r24, r16
 246:	06 96       	adiw	r24, 0x06	; 6
 248:	00 df       	rcall	.-512    	; 0x4a <bytes_to_word>
 24a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <neighbor_status>
 254:	ce 01       	movw	r24, r28
 256:	f9 de       	rcall	.-526    	; 0x4a <bytes_to_word>
 258:	ce 01       	movw	r24, r28
 25a:	f7 de       	rcall	.-530    	; 0x4a <bytes_to_word>
 25c:	ce 01       	movw	r24, r28
 25e:	f5 de       	rcall	.-534    	; 0x4a <bytes_to_word>
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	08 95       	ret

0000026a <handle_rx>:
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	5d 9a       	sbi	0x0b, 5	; 11
 270:	8f e4       	ldi	r24, 0x4F	; 79
 272:	93 ec       	ldi	r25, 0xC3	; 195
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <handle_rx+0xa>
 278:	00 c0       	rjmp	.+0      	; 0x27a <handle_rx+0x10>
 27a:	00 00       	nop
 27c:	5d 98       	cbi	0x0b, 5	; 11
 27e:	8f e4       	ldi	r24, 0x4F	; 79
 280:	93 ec       	ldi	r25, 0xC3	; 195
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <handle_rx+0x18>
 286:	00 c0       	rjmp	.+0      	; 0x288 <handle_rx+0x1e>
 288:	00 00       	nop
 28a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <running_status>
 28e:	88 60       	ori	r24, 0x08	; 8
 290:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <running_status>
 294:	90 d1       	rcall	.+800    	; 0x5b6 <mrf_rx_datalength>
 296:	ec 01       	movw	r28, r24
 298:	27 d2       	rcall	.+1102   	; 0x6e8 <mrf_get_rxdata>
 29a:	ae 01       	movw	r20, r28
 29c:	bc 01       	movw	r22, r24
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	92 e0       	ldi	r25, 0x02	; 2
 2a2:	7b d2       	rcall	.+1270   	; 0x79a <memcpy>
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	92 e0       	ldi	r25, 0x02	; 2
 2a8:	d0 de       	rcall	.-608    	; 0x4a <bytes_to_word>
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	91 f4       	brne	.+36     	; 0x2d2 <handle_rx+0x68>
 2ae:	5d 9a       	sbi	0x0b, 5	; 11
 2b0:	8f e4       	ldi	r24, 0x4F	; 79
 2b2:	93 ec       	ldi	r25, 0xC3	; 195
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <handle_rx+0x4a>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <handle_rx+0x50>
 2ba:	00 00       	nop
 2bc:	5d 98       	cbi	0x0b, 5	; 11
 2be:	8f e4       	ldi	r24, 0x4F	; 79
 2c0:	93 ec       	ldi	r25, 0xC3	; 195
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <handle_rx+0x58>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <handle_rx+0x5e>
 2c8:	00 00       	nop
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	92 e0       	ldi	r25, 0x02	; 2
 2ce:	61 df       	rcall	.-318    	; 0x192 <COMMAND_HANDLER>
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <handle_rx+0x6e>
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	92 e0       	ldi	r25, 0x02	; 2
 2d6:	b9 de       	rcall	.-654    	; 0x4a <bytes_to_word>
 2d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <running_status>
 2dc:	87 7f       	andi	r24, 0xF7	; 247
 2de:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <running_status>
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <main>:
	
}
int main(void)
{
	setup();
 2e8:	bf de       	rcall	.-642    	; 0x68 <setup>
    while (1) 
    {
		mrf_check_flags(&handle_rx,&handle_tx);
 2ea:	63 e3       	ldi	r22, 0x33	; 51
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	85 e3       	ldi	r24, 0x35	; 53
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	47 d1       	rcall	.+654    	; 0x582 <mrf_check_flags>
 2f4:	fa cf       	rjmp	.-12     	; 0x2ea <main+0x2>

000002f6 <mrf_reset>:
        mrf_write_long(MRF_TESTMODE, 0x00); // Disable PA/LNA on MRF24J40MB module.
    }
}

void mrf_rx_flush(void) {
    mrf_write_short(MRF_RXFLUSH, 0x01);
 2f6:	59 98       	cbi	0x0b, 1	; 11
 2f8:	87 ea       	ldi	r24, 0xA7	; 167
 2fa:	91 e6       	ldi	r25, 0x61	; 97
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <mrf_reset+0x6>
 300:	00 c0       	rjmp	.+0      	; 0x302 <__stack+0x3>
 302:	00 00       	nop
 304:	59 9a       	sbi	0x0b, 1	; 11
 306:	83 e2       	ldi	r24, 0x23	; 35
 308:	94 ef       	ldi	r25, 0xF4	; 244
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <__stack+0xb>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <__stack+0x11>
 310:	00 00       	nop
 312:	08 95       	ret

00000314 <mrf_read_short>:
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	c2 e0       	ldi	r28, 0x02	; 2
 31a:	d1 e0       	ldi	r29, 0x01	; 1
 31c:	88 0f       	add	r24, r24
 31e:	8e 77       	andi	r24, 0x7E	; 126
 320:	88 83       	st	Y, r24
 322:	19 82       	std	Y+1, r1	; 0x01
 324:	26 e0       	ldi	r18, 0x06	; 6
 326:	42 e0       	ldi	r20, 0x02	; 2
 328:	be 01       	movw	r22, r28
 32a:	ce 01       	movw	r24, r28
 32c:	f3 d1       	rcall	.+998    	; 0x714 <spi_transfer_nbytes>
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <mrf_read_long>:
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	c2 e0       	ldi	r28, 0x02	; 2
 33c:	d1 e0       	ldi	r29, 0x01	; 1
 33e:	9c 01       	movw	r18, r24
 340:	36 95       	lsr	r19
 342:	27 95       	ror	r18
 344:	36 95       	lsr	r19
 346:	27 95       	ror	r18
 348:	36 95       	lsr	r19
 34a:	27 95       	ror	r18
 34c:	20 68       	ori	r18, 0x80	; 128
 34e:	28 83       	st	Y, r18
 350:	82 95       	swap	r24
 352:	88 0f       	add	r24, r24
 354:	80 7e       	andi	r24, 0xE0	; 224
 356:	89 83       	std	Y+1, r24	; 0x01
 358:	1a 82       	std	Y+2, r1	; 0x02
 35a:	26 e0       	ldi	r18, 0x06	; 6
 35c:	43 e0       	ldi	r20, 0x03	; 3
 35e:	be 01       	movw	r22, r28
 360:	ce 01       	movw	r24, r28
 362:	d8 d1       	rcall	.+944    	; 0x714 <spi_transfer_nbytes>
 364:	8a 81       	ldd	r24, Y+2	; 0x02
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <mrf_write_short>:
 36c:	e2 e0       	ldi	r30, 0x02	; 2
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	88 0f       	add	r24, r24
 372:	8e 77       	andi	r24, 0x7E	; 126
 374:	81 60       	ori	r24, 0x01	; 1
 376:	80 83       	st	Z, r24
 378:	61 83       	std	Z+1, r22	; 0x01
 37a:	26 e0       	ldi	r18, 0x06	; 6
 37c:	42 e0       	ldi	r20, 0x02	; 2
 37e:	bf 01       	movw	r22, r30
 380:	cf 01       	movw	r24, r30
 382:	c8 d1       	rcall	.+912    	; 0x714 <spi_transfer_nbytes>
 384:	08 95       	ret

00000386 <mrf_write_long>:
 386:	e2 e0       	ldi	r30, 0x02	; 2
 388:	f1 e0       	ldi	r31, 0x01	; 1
 38a:	9c 01       	movw	r18, r24
 38c:	36 95       	lsr	r19
 38e:	27 95       	ror	r18
 390:	36 95       	lsr	r19
 392:	27 95       	ror	r18
 394:	36 95       	lsr	r19
 396:	27 95       	ror	r18
 398:	20 68       	ori	r18, 0x80	; 128
 39a:	20 83       	st	Z, r18
 39c:	82 95       	swap	r24
 39e:	88 0f       	add	r24, r24
 3a0:	80 7e       	andi	r24, 0xE0	; 224
 3a2:	80 61       	ori	r24, 0x10	; 16
 3a4:	81 83       	std	Z+1, r24	; 0x01
 3a6:	62 83       	std	Z+2, r22	; 0x02
 3a8:	26 e0       	ldi	r18, 0x06	; 6
 3aa:	43 e0       	ldi	r20, 0x03	; 3
 3ac:	bf 01       	movw	r22, r30
 3ae:	cf 01       	movw	r24, r30
 3b0:	b1 d1       	rcall	.+866    	; 0x714 <spi_transfer_nbytes>
 3b2:	08 95       	ret

000003b4 <mrf_get_pan>:
 3b4:	cf 93       	push	r28
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	ad df       	rcall	.-166    	; 0x314 <mrf_read_short>
 3ba:	c8 2f       	mov	r28, r24
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	aa df       	rcall	.-172    	; 0x314 <mrf_read_short>
 3c0:	2c 2f       	mov	r18, r28
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	32 2f       	mov	r19, r18
 3c6:	22 27       	eor	r18, r18
 3c8:	a9 01       	movw	r20, r18
 3ca:	48 2b       	or	r20, r24
 3cc:	ca 01       	movw	r24, r20
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <mrf_set_pan>:
 3d2:	cf 93       	push	r28
 3d4:	c8 2f       	mov	r28, r24
 3d6:	69 2f       	mov	r22, r25
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	c8 df       	rcall	.-112    	; 0x36c <mrf_write_short>
 3dc:	6c 2f       	mov	r22, r28
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	c5 df       	rcall	.-118    	; 0x36c <mrf_write_short>
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <mrf_address16_write>:
 3e6:	cf 93       	push	r28
 3e8:	c8 2f       	mov	r28, r24
 3ea:	69 2f       	mov	r22, r25
 3ec:	84 e0       	ldi	r24, 0x04	; 4
 3ee:	be df       	rcall	.-132    	; 0x36c <mrf_write_short>
 3f0:	6c 2f       	mov	r22, r28
 3f2:	83 e0       	ldi	r24, 0x03	; 3
 3f4:	bb df       	rcall	.-138    	; 0x36c <mrf_write_short>
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <mrf_address16_read>:
 3fa:	cf 93       	push	r28
 3fc:	84 e0       	ldi	r24, 0x04	; 4
 3fe:	8a df       	rcall	.-236    	; 0x314 <mrf_read_short>
 400:	c8 2f       	mov	r28, r24
 402:	83 e0       	ldi	r24, 0x03	; 3
 404:	87 df       	rcall	.-242    	; 0x314 <mrf_read_short>
 406:	2c 2f       	mov	r18, r28
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	32 2f       	mov	r19, r18
 40c:	22 27       	eor	r18, r18
 40e:	a9 01       	movw	r20, r18
 410:	48 2b       	or	r20, r24
 412:	ca 01       	movw	r24, r20
 414:	cf 91       	pop	r28
 416:	08 95       	ret

00000418 <mrf_send16>:
 418:	df 92       	push	r13
 41a:	ef 92       	push	r14
 41c:	ff 92       	push	r15
 41e:	0f 93       	push	r16
 420:	1f 93       	push	r17
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	d8 2f       	mov	r29, r24
 428:	c9 2f       	mov	r28, r25
 42a:	7b 01       	movw	r14, r22
 42c:	d4 2e       	mov	r13, r20
 42e:	69 e0       	ldi	r22, 0x09	; 9
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	a8 df       	rcall	.-176    	; 0x386 <mrf_write_long>
 436:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <ignoreBytes>
 43a:	67 5f       	subi	r22, 0xF7	; 247
 43c:	6d 0d       	add	r22, r13
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	a1 df       	rcall	.-190    	; 0x386 <mrf_write_long>
 444:	61 e6       	ldi	r22, 0x61	; 97
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	9d df       	rcall	.-198    	; 0x386 <mrf_write_long>
 44c:	68 e8       	ldi	r22, 0x88	; 136
 44e:	83 e0       	ldi	r24, 0x03	; 3
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	99 df       	rcall	.-206    	; 0x386 <mrf_write_long>
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	95 df       	rcall	.-214    	; 0x386 <mrf_write_long>
 45c:	ab df       	rcall	.-170    	; 0x3b4 <mrf_get_pan>
 45e:	19 2f       	mov	r17, r25
 460:	68 2f       	mov	r22, r24
 462:	85 e0       	ldi	r24, 0x05	; 5
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	8f df       	rcall	.-226    	; 0x386 <mrf_write_long>
 468:	61 2f       	mov	r22, r17
 46a:	86 e0       	ldi	r24, 0x06	; 6
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	8b df       	rcall	.-234    	; 0x386 <mrf_write_long>
 470:	6d 2f       	mov	r22, r29
 472:	87 e0       	ldi	r24, 0x07	; 7
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	87 df       	rcall	.-242    	; 0x386 <mrf_write_long>
 478:	6c 2f       	mov	r22, r28
 47a:	88 e0       	ldi	r24, 0x08	; 8
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	83 df       	rcall	.-250    	; 0x386 <mrf_write_long>
 480:	bc df       	rcall	.-136    	; 0x3fa <mrf_address16_read>
 482:	c9 2f       	mov	r28, r25
 484:	68 2f       	mov	r22, r24
 486:	89 e0       	ldi	r24, 0x09	; 9
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	7d df       	rcall	.-262    	; 0x386 <mrf_write_long>
 48c:	6c 2f       	mov	r22, r28
 48e:	8a e0       	ldi	r24, 0x0A	; 10
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	79 df       	rcall	.-270    	; 0x386 <mrf_write_long>
 494:	c0 91 7d 01 	lds	r28, 0x017D	; 0x80017d <ignoreBytes>
 498:	d0 91 7e 01 	lds	r29, 0x017E	; 0x80017e <ignoreBytes+0x1>
 49c:	2b 96       	adiw	r28, 0x0b	; 11
 49e:	dd 20       	and	r13, r13
 4a0:	61 f0       	breq	.+24     	; 0x4ba <mrf_send16+0xa2>
 4a2:	87 01       	movw	r16, r14
 4a4:	ed 0c       	add	r14, r13
 4a6:	f1 1c       	adc	r15, r1
 4a8:	f8 01       	movw	r30, r16
 4aa:	61 91       	ld	r22, Z+
 4ac:	8f 01       	movw	r16, r30
 4ae:	ce 01       	movw	r24, r28
 4b0:	6a df       	rcall	.-300    	; 0x386 <mrf_write_long>
 4b2:	21 96       	adiw	r28, 0x01	; 1
 4b4:	0e 15       	cp	r16, r14
 4b6:	1f 05       	cpc	r17, r15
 4b8:	b9 f7       	brne	.-18     	; 0x4a8 <mrf_send16+0x90>
 4ba:	65 e0       	ldi	r22, 0x05	; 5
 4bc:	8b e1       	ldi	r24, 0x1B	; 27
 4be:	56 df       	rcall	.-340    	; 0x36c <mrf_write_short>
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	df 90       	pop	r13
 4ce:	08 95       	ret

000004d0 <mrf_set_interrupts>:
 4d0:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <isr_lock>
 4d4:	66 ef       	ldi	r22, 0xF6	; 246
 4d6:	82 e3       	ldi	r24, 0x32	; 50
 4d8:	49 df       	rcall	.-366    	; 0x36c <mrf_write_short>
 4da:	08 95       	ret

000004dc <mrf_set_channel>:
 4dc:	68 2f       	mov	r22, r24
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	6b 50       	subi	r22, 0x0B	; 11
 4e2:	71 09       	sbc	r23, r1
 4e4:	62 95       	swap	r22
 4e6:	72 95       	swap	r23
 4e8:	70 7f       	andi	r23, 0xF0	; 240
 4ea:	76 27       	eor	r23, r22
 4ec:	60 7f       	andi	r22, 0xF0	; 240
 4ee:	76 27       	eor	r23, r22
 4f0:	63 60       	ori	r22, 0x03	; 3
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	92 e0       	ldi	r25, 0x02	; 2
 4f6:	47 df       	rcall	.-370    	; 0x386 <mrf_write_long>
 4f8:	08 95       	ret

000004fa <mrf_init>:
 4fa:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <mrf_flags>
 4fe:	67 e0       	ldi	r22, 0x07	; 7
 500:	8a e2       	ldi	r24, 0x2A	; 42
 502:	34 df       	rcall	.-408    	; 0x36c <mrf_write_short>
 504:	68 e9       	ldi	r22, 0x98	; 152
 506:	88 e1       	ldi	r24, 0x18	; 24
 508:	31 df       	rcall	.-414    	; 0x36c <mrf_write_short>
 50a:	65 e9       	ldi	r22, 0x95	; 149
 50c:	8e e2       	ldi	r24, 0x2E	; 46
 50e:	2e df       	rcall	.-420    	; 0x36c <mrf_write_short>
 510:	63 e0       	ldi	r22, 0x03	; 3
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	92 e0       	ldi	r25, 0x02	; 2
 516:	37 df       	rcall	.-402    	; 0x386 <mrf_write_long>
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	92 e0       	ldi	r25, 0x02	; 2
 51e:	33 df       	rcall	.-410    	; 0x386 <mrf_write_long>
 520:	60 e8       	ldi	r22, 0x80	; 128
 522:	82 e0       	ldi	r24, 0x02	; 2
 524:	92 e0       	ldi	r25, 0x02	; 2
 526:	2f df       	rcall	.-418    	; 0x386 <mrf_write_long>
 528:	60 e9       	ldi	r22, 0x90	; 144
 52a:	86 e0       	ldi	r24, 0x06	; 6
 52c:	92 e0       	ldi	r25, 0x02	; 2
 52e:	2b df       	rcall	.-426    	; 0x386 <mrf_write_long>
 530:	60 e8       	ldi	r22, 0x80	; 128
 532:	87 e0       	ldi	r24, 0x07	; 7
 534:	92 e0       	ldi	r25, 0x02	; 2
 536:	27 df       	rcall	.-434    	; 0x386 <mrf_write_long>
 538:	60 e1       	ldi	r22, 0x10	; 16
 53a:	88 e0       	ldi	r24, 0x08	; 8
 53c:	92 e0       	ldi	r25, 0x02	; 2
 53e:	23 df       	rcall	.-442    	; 0x386 <mrf_write_long>
 540:	61 e2       	ldi	r22, 0x21	; 33
 542:	80 e2       	ldi	r24, 0x20	; 32
 544:	92 e0       	ldi	r25, 0x02	; 2
 546:	1f df       	rcall	.-450    	; 0x386 <mrf_write_long>
 548:	60 e8       	ldi	r22, 0x80	; 128
 54a:	8a e3       	ldi	r24, 0x3A	; 58
 54c:	0f df       	rcall	.-482    	; 0x36c <mrf_write_short>
 54e:	60 e6       	ldi	r22, 0x60	; 96
 550:	8f e3       	ldi	r24, 0x3F	; 63
 552:	0c df       	rcall	.-488    	; 0x36c <mrf_write_short>
 554:	60 e4       	ldi	r22, 0x40	; 64
 556:	8e e3       	ldi	r24, 0x3E	; 62
 558:	09 df       	rcall	.-494    	; 0x36c <mrf_write_short>
 55a:	ba df       	rcall	.-140    	; 0x4d0 <mrf_set_interrupts>
 55c:	84 e1       	ldi	r24, 0x14	; 20
 55e:	be df       	rcall	.-132    	; 0x4dc <mrf_set_channel>
 560:	64 e0       	ldi	r22, 0x04	; 4
 562:	86 e3       	ldi	r24, 0x36	; 54
 564:	03 df       	rcall	.-506    	; 0x36c <mrf_write_short>
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	86 e3       	ldi	r24, 0x36	; 54
 56a:	00 df       	rcall	.-512    	; 0x36c <mrf_write_short>
 56c:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <flag_got_rx>
 570:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <flag_got_tx>
 574:	89 ef       	ldi	r24, 0xF9	; 249
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	f1 f7       	brne	.-4      	; 0x578 <mrf_init+0x7e>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <mrf_init+0x84>
 57e:	00 00       	nop
 580:	08 95       	ret

00000582 <mrf_check_flags>:
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <isr_lock>
 58a:	21 11       	cpse	r18, r1
 58c:	11 c0       	rjmp	.+34     	; 0x5b0 <mrf_check_flags+0x2e>
 58e:	eb 01       	movw	r28, r22
 590:	fc 01       	movw	r30, r24
 592:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <flag_got_rx>
 596:	22 23       	and	r18, r18
 598:	19 f0       	breq	.+6      	; 0x5a0 <mrf_check_flags+0x1e>
 59a:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <flag_got_rx>
 59e:	09 95       	icall
 5a0:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <flag_got_tx>
 5a4:	88 23       	and	r24, r24
 5a6:	21 f0       	breq	.+8      	; 0x5b0 <mrf_check_flags+0x2e>
 5a8:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <flag_got_tx>
 5ac:	fe 01       	movw	r30, r28
 5ae:	09 95       	icall
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <mrf_rx_datalength>:
 5b6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rx_info>
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0b 97       	sbiw	r24, 0x0b	; 11
 5be:	08 95       	ret

000005c0 <mrf_rx_disable>:
}

void mrf_rx_disable(void) {
    mrf_write_short(MRF_BBREG1, 0x04);  // RXDECINV - disable receiver
 5c0:	64 e0       	ldi	r22, 0x04	; 4
 5c2:	89 e3       	ldi	r24, 0x39	; 57
 5c4:	d3 de       	rcall	.-602    	; 0x36c <mrf_write_short>
 5c6:	08 95       	ret

000005c8 <mrf_rx_enable>:
}

void mrf_rx_enable(void) {
    mrf_write_short(MRF_BBREG1, 0x00);  // RXDECINV - enable receiver
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	89 e3       	ldi	r24, 0x39	; 57
 5cc:	cf de       	rcall	.-610    	; 0x36c <mrf_write_short>
 5ce:	08 95       	ret

000005d0 <mrf_interrupt_handler>:
 * Call this from within an interrupt handler connected to the MRFs output
 * interrupt pin.  It handles reading in any data from the module, and letting it
 * continue working.
 * Only the most recent data is ever kept.
 */
void mrf_interrupt_handler(void) {
 5d0:	af 92       	push	r10
 5d2:	bf 92       	push	r11
 5d4:	cf 92       	push	r12
 5d6:	df 92       	push	r13
 5d8:	ef 92       	push	r14
 5da:	ff 92       	push	r15
 5dc:	0f 93       	push	r16
 5de:	1f 93       	push	r17
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
    //GRAB_ISR_MUTEX;
    isr_lock = 1;
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <isr_lock>
    uint8_t last_interrupt = mrf_read_short(MRF_INTSTAT);
 5ea:	81 e3       	ldi	r24, 0x31	; 49
 5ec:	93 de       	rcall	.-730    	; 0x314 <mrf_read_short>
 5ee:	b8 2e       	mov	r11, r24
    if (last_interrupt & MRF_I_RXIF) {
 5f0:	83 ff       	sbrs	r24, 3
 5f2:	4f c0       	rjmp	.+158    	; 0x692 <mrf_interrupt_handler+0xc2>
        int i = 0;
        flag_got_rx++;
 5f4:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <flag_got_rx>
 5f8:	8f 5f       	subi	r24, 0xFF	; 255
 5fa:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <flag_got_rx>
        // read out the packet data...
    //    cli();
        mrf_rx_disable();
 5fe:	e0 df       	rcall	.-64     	; 0x5c0 <mrf_rx_disable>
        // read start of rxfifo for, has 2 bytes more added by FCS. frame_length = m + n + 2
        uint8_t frame_length = mrf_read_long(0x300);
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	93 e0       	ldi	r25, 0x03	; 3
 604:	98 de       	rcall	.-720    	; 0x336 <mrf_read_long>
 606:	a8 2e       	mov	r10, r24

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
 608:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <mrf_flags>
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 60c:	ea 2c       	mov	r14, r10
 60e:	f1 2c       	mov	r15, r1
 610:	1e 14       	cp	r1, r14
 612:	1f 04       	cpc	r1, r15
 614:	9c f4       	brge	.+38     	; 0x63c <mrf_interrupt_handler+0x6c>
 616:	c7 01       	movw	r24, r14
 618:	9c 01       	movw	r18, r24
 61a:	21 58       	subi	r18, 0x81	; 129
 61c:	3e 4f       	sbci	r19, 0xFE	; 254
 61e:	69 01       	movw	r12, r18
 620:	cf e7       	ldi	r28, 0x7F	; 127
 622:	d1 e0       	ldi	r29, 0x01	; 1
                rx_buf[rb_ptr++] = mrf_read_long(0x301 + i);
 624:	01 e0       	ldi	r16, 0x01	; 1
 626:	13 e0       	ldi	r17, 0x03	; 3
 628:	0f 57       	subi	r16, 0x7F	; 127
 62a:	11 40       	sbci	r17, 0x01	; 1
 62c:	c8 01       	movw	r24, r16
 62e:	8c 0f       	add	r24, r28
 630:	9d 1f       	adc	r25, r29
 632:	81 de       	rcall	.-766    	; 0x336 <mrf_read_long>
 634:	89 93       	st	Y+, r24
        uint8_t frame_length = mrf_read_long(0x300);

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 636:	cc 15       	cp	r28, r12
 638:	dd 05       	cpc	r29, r13
 63a:	c1 f7       	brne	.-16     	; 0x62c <mrf_interrupt_handler+0x5c>
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 63c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rx_info>
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0b 97       	sbiw	r24, 0x0b	; 11
 644:	18 16       	cp	r1, r24
 646:	19 06       	cpc	r1, r25
 648:	ac f4       	brge	.+42     	; 0x674 <mrf_interrupt_handler+0xa4>
 64a:	c7 e0       	ldi	r28, 0x07	; 7
 64c:	d1 e0       	ldi	r29, 0x01	; 1
 64e:	c1 2c       	mov	r12, r1
 650:	d1 2c       	mov	r13, r1
uint8_t * mrf_get_rxbuf(void) {
    return rx_buf;
}

int mrf_rx_datalength(void) {
    return rx_info.frame_length - bytes_nodata;
 652:	06 e0       	ldi	r16, 0x06	; 6
 654:	11 e0       	ldi	r17, 0x01	; 1

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
 656:	3f ef       	ldi	r19, 0xFF	; 255
 658:	c3 1a       	sub	r12, r19
 65a:	d3 0a       	sbc	r13, r19
 65c:	c6 01       	movw	r24, r12
 65e:	87 5f       	subi	r24, 0xF7	; 247
 660:	9c 4f       	sbci	r25, 0xFC	; 252
 662:	69 de       	rcall	.-814    	; 0x336 <mrf_read_long>
 664:	89 93       	st	Y+, r24
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 666:	f8 01       	movw	r30, r16
 668:	80 81       	ld	r24, Z
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0b 97       	sbiw	r24, 0x0b	; 11
 66e:	c8 16       	cp	r12, r24
 670:	d9 06       	cpc	r13, r25
 672:	8c f3       	brlt	.-30     	; 0x656 <mrf_interrupt_handler+0x86>
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
        }

        rx_info.frame_length = frame_length;
 674:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <rx_info>
        // same as datasheet 0x301 + (m + n + 2) <-- frame_length
        rx_info.lqi = mrf_read_long(0x301 + frame_length);
 678:	c7 01       	movw	r24, r14
 67a:	8f 5f       	subi	r24, 0xFF	; 255
 67c:	9c 4f       	sbci	r25, 0xFC	; 252
 67e:	5b de       	rcall	.-842    	; 0x336 <mrf_read_long>
 680:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <rx_info+0x75>
        // same as datasheet 0x301 + (m + n + 3) <-- frame_length + 1
        rx_info.rssi = mrf_read_long(0x301 + frame_length + 1);
 684:	c7 01       	movw	r24, r14
 686:	8e 5f       	subi	r24, 0xFE	; 254
 688:	9c 4f       	sbci	r25, 0xFC	; 252
 68a:	55 de       	rcall	.-854    	; 0x336 <mrf_read_long>
 68c:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <rx_info+0x76>

        mrf_rx_enable();
 690:	9b df       	rcall	.-202    	; 0x5c8 <mrf_rx_enable>
    //    sei();
    }
    if (last_interrupt & MRF_I_TXNIF) {
 692:	b0 fe       	sbrs	r11, 0
 694:	1c c0       	rjmp	.+56     	; 0x6ce <mrf_interrupt_handler+0xfe>
        flag_got_tx++;
 696:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <flag_got_tx>
 69a:	8f 5f       	subi	r24, 0xFF	; 255
 69c:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <flag_got_tx>
        mrf_reg_TXSTAT = mrf_read_short(MRF_TXSTAT);
 6a0:	84 e2       	ldi	r24, 0x24	; 36
 6a2:	38 de       	rcall	.-912    	; 0x314 <mrf_read_short>
 6a4:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <mrf_reg_TXSTAT>
        // 1 means it failed, we want 1 to mean it worked.
        tx_info.tx_ok = !(mrf_reg_TXSTAT & 0x3F);
 6a8:	98 2f       	mov	r25, r24
 6aa:	9f 73       	andi	r25, 0x3F	; 63
 6ac:	21 e0       	ldi	r18, 0x01	; 1
 6ae:	09 f0       	breq	.+2      	; 0x6b2 <mrf_interrupt_handler+0xe2>
 6b0:	20 e0       	ldi	r18, 0x00	; 0
 6b2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <tx_info>
 6b6:	20 fb       	bst	r18, 0
 6b8:	90 f9       	bld	r25, 0
        tx_info.retries = mrf_reg_TXSTAT >> 6;
 6ba:	82 95       	swap	r24
 6bc:	86 95       	lsr	r24
 6be:	86 95       	lsr	r24
 6c0:	83 70       	andi	r24, 0x03	; 3
 6c2:	88 0f       	add	r24, r24
 6c4:	99 7f       	andi	r25, 0xF9	; 249
        tx_info.channel_busy = (mrf_reg_TXSTAT & (1 << CCAFAIL));
 6c6:	89 2b       	or	r24, r25
 6c8:	87 7f       	andi	r24, 0xF7	; 247
 6ca:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tx_info>
    }
//DROP_ISR_MUTEX;
    isr_lock = 0;
 6ce:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <isr_lock>
}
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	1f 91       	pop	r17
 6d8:	0f 91       	pop	r16
 6da:	ff 90       	pop	r15
 6dc:	ef 90       	pop	r14
 6de:	df 90       	pop	r13
 6e0:	cf 90       	pop	r12
 6e2:	bf 90       	pop	r11
 6e4:	af 90       	pop	r10
 6e6:	08 95       	ret

000006e8 <mrf_get_rxdata>:
}

uint8_t* mrf_get_rxdata()
{
	return rx_info.rx_data;
}
 6e8:	87 e0       	ldi	r24, 0x07	; 7
 6ea:	91 e0       	ldi	r25, 0x01	; 1
 6ec:	08 95       	ret

000006ee <spi_setup>:

void spi_setup()
{

	#ifndef SPI_ON_USI
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0); //enables SPI, sets chip as master, sets clock speed to fosc/16
 6ee:	81 e5       	ldi	r24, 0x51	; 81
 6f0:	8c bd       	out	0x2c, r24	; 44
 6f2:	08 95       	ret

000006f4 <spi_transfer_byte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6f4:	e7 ea       	ldi	r30, 0xA7	; 167
 6f6:	f1 e6       	ldi	r31, 0x61	; 97
 6f8:	31 97       	sbiw	r30, 0x01	; 1
 6fa:	f1 f7       	brne	.-4      	; 0x6f8 <spi_transfer_byte+0x4>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <spi_transfer_byte+0xa>
 6fe:	00 00       	nop
void spi_transfer_byte(uint8_t* bout, uint8_t* bin)
{
	/*Outgoing data into data register*/
	//PORTD |= (1<<GREEN_LIGHT);
	_delay_ms(100);
	DATAREG = *bout;
 700:	fc 01       	movw	r30, r24
 702:	80 81       	ld	r24, Z
 704:	8e bd       	out	0x2e, r24	; 46
	while(! SPI_BYTE_XFER_DONE)
 706:	0d b4       	in	r0, 0x2d	; 45
 708:	07 fe       	sbrs	r0, 7
 70a:	fd cf       	rjmp	.-6      	; 0x706 <spi_transfer_byte+0x12>
		USICR = usi_clk_lo;
		USICR = usi_clk_hi;
		#endif
	} 
	/*Incoming data out of data register*/
	*bin = DATAREG;
 70c:	8e b5       	in	r24, 0x2e	; 46
 70e:	fb 01       	movw	r30, r22
 710:	80 83       	st	Z, r24
 712:	08 95       	ret

00000714 <spi_transfer_nbytes>:
}

/*Selects the slave (cs)  and transfers n bytes. The input and output buffers must be defined and contain at least n bytes each*/

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
 714:	cf 92       	push	r12
 716:	df 92       	push	r13
 718:	ef 92       	push	r14
 71a:	ff 92       	push	r15
 71c:	0f 93       	push	r16
 71e:	1f 93       	push	r17
 720:	cf 93       	push	r28
 722:	df 93       	push	r29
 724:	ec 01       	movw	r28, r24
 726:	8b 01       	movw	r16, r22
 728:	3f e3       	ldi	r19, 0x3F	; 63
 72a:	8d e0       	ldi	r24, 0x0D	; 13
 72c:	93 e0       	ldi	r25, 0x03	; 3
 72e:	31 50       	subi	r19, 0x01	; 1
 730:	80 40       	sbci	r24, 0x00	; 0
 732:	90 40       	sbci	r25, 0x00	; 0
 734:	e1 f7       	brne	.-8      	; 0x72e <spi_transfer_nbytes+0x1a>
 736:	00 c0       	rjmp	.+0      	; 0x738 <spi_transfer_nbytes+0x24>
 738:	00 00       	nop
	DDRD |= (1<<RED_LIGHT);
	DDRD |= (1<<GREEN_LIGHT);
	PORTD |= (1<<BLUE_LIGHT);*/
	_delay_ms(1000);
	//PORTD &= ~(1<<BLUE_LIGHT);
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
 73a:	85 b1       	in	r24, 0x05	; 5
 73c:	61 e0       	ldi	r22, 0x01	; 1
 73e:	70 e0       	ldi	r23, 0x00	; 0
 740:	6b 01       	movw	r12, r22
 742:	02 c0       	rjmp	.+4      	; 0x748 <spi_transfer_nbytes+0x34>
 744:	cc 0c       	add	r12, r12
 746:	dd 1c       	adc	r13, r13
 748:	2a 95       	dec	r18
 74a:	e2 f7       	brpl	.-8      	; 0x744 <spi_transfer_nbytes+0x30>
 74c:	9c 2d       	mov	r25, r12
 74e:	90 95       	com	r25
 750:	89 23       	and	r24, r25
 752:	85 b9       	out	0x05, r24	; 5
	while(n)
 754:	44 23       	and	r20, r20
 756:	a9 f0       	breq	.+42     	; 0x782 <spi_transfer_nbytes+0x6e>
 758:	41 50       	subi	r20, 0x01	; 1
 75a:	e4 2e       	mov	r14, r20
 75c:	f1 2c       	mov	r15, r1
 75e:	3f ef       	ldi	r19, 0xFF	; 255
 760:	e3 1a       	sub	r14, r19
 762:	f3 0a       	sbc	r15, r19
 764:	ec 0e       	add	r14, r28
 766:	fd 1e       	adc	r15, r29
	{
		PORTD |= (1<<RED_LIGHT);
 768:	5f 9a       	sbi	0x0b, 7	; 11
		//_delay_ms(1000);
		PORTD &= ~(1<<RED_LIGHT);
 76a:	5f 98       	cbi	0x0b, 7	; 11
		//_delay_ms(1000);
		spi_transfer_byte(out,in);    /*transfer byte */
 76c:	b8 01       	movw	r22, r16
 76e:	ce 01       	movw	r24, r28
 770:	c1 df       	rcall	.-126    	; 0x6f4 <spi_transfer_byte>
		PORTD |= (1<<RED_LIGHT);
 772:	5f 9a       	sbi	0x0b, 7	; 11
		//_delay_ms(1000);
		PORTD &= ~(1<<RED_LIGHT);
 774:	5f 98       	cbi	0x0b, 7	; 11
		//_delay_ms(1000);
		/*advance iterators*/
		out = out + 1;
 776:	21 96       	adiw	r28, 0x01	; 1
		in = in + 1;
 778:	0f 5f       	subi	r16, 0xFF	; 255
 77a:	1f 4f       	sbci	r17, 0xFF	; 255
	DDRD |= (1<<GREEN_LIGHT);
	PORTD |= (1<<BLUE_LIGHT);*/
	_delay_ms(1000);
	//PORTD &= ~(1<<BLUE_LIGHT);
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
	while(n)
 77c:	ec 16       	cp	r14, r28
 77e:	fd 06       	cpc	r15, r29
 780:	99 f7       	brne	.-26     	; 0x768 <spi_transfer_nbytes+0x54>
		/*advance iterators*/
		out = out + 1;
		in = in + 1;
		n = n - 1;
	}
	CS_PORT |= 1<<cs;/*Deselect slave chip*/
 782:	85 b1       	in	r24, 0x05	; 5
 784:	c8 2a       	or	r12, r24
 786:	c5 b8       	out	0x05, r12	; 5
}
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	1f 91       	pop	r17
 78e:	0f 91       	pop	r16
 790:	ff 90       	pop	r15
 792:	ef 90       	pop	r14
 794:	df 90       	pop	r13
 796:	cf 90       	pop	r12
 798:	08 95       	ret

0000079a <memcpy>:
 79a:	fb 01       	movw	r30, r22
 79c:	dc 01       	movw	r26, r24
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <memcpy+0xa>
 7a0:	01 90       	ld	r0, Z+
 7a2:	0d 92       	st	X+, r0
 7a4:	41 50       	subi	r20, 0x01	; 1
 7a6:	50 40       	sbci	r21, 0x00	; 0
 7a8:	d8 f7       	brcc	.-10     	; 0x7a0 <memcpy+0x6>
 7aa:	08 95       	ret

000007ac <_exit>:
 7ac:	f8 94       	cli

000007ae <__stop_program>:
 7ae:	ff cf       	rjmp	.-2      	; 0x7ae <__stop_program>
