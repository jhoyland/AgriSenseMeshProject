
3WayRelay-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000896  0000092a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000896  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015c  00800102  00800102  0000092c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000095c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025ec  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4d  00000000  00000000  000031b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f46  00000000  00000000  00003e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  00004d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000920  00000000  00000000  000052d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000171a  00000000  00000000  00005bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00007312  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	85 c0       	rjmp	.+266    	; 0x10e <__vector_1>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	e6 e9       	ldi	r30, 0x96	; 150
  3c:	f8 e0       	ldi	r31, 0x08	; 8
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a2 30       	cpi	r26, 0x02	; 2
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	22 e0       	ldi	r18, 0x02	; 2
  4c:	a2 e0       	ldi	r26, 0x02	; 2
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	ae 35       	cpi	r26, 0x5E	; 94
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	9e d1       	rcall	.+828    	; 0x398 <main>
  5c:	1a c4       	rjmp	.+2100   	; 0x892 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <bytes_to_word>:
uint16_t bytes_to_word(uint8_t* b)
{
    uint16_t hi = (uint16_t) b[0];
    uint16_t lo = (uint16_t) b[1];

    return (hi << 8) | lo;
  60:	fc 01       	movw	r30, r24
  62:	20 81       	ld	r18, Z
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	32 2f       	mov	r19, r18
  68:	22 27       	eor	r18, r18
  6a:	81 81       	ldd	r24, Z+1	; 0x01
}
  6c:	a9 01       	movw	r20, r18
  6e:	48 2b       	or	r20, r24
  70:	ca 01       	movw	r24, r20
  72:	08 95       	ret

00000074 <word_to_bytes>:

void word_to_bytes(uint8_t* b, uint16_t d)
{
    b[0] = (uint8_t)(d >> 8);
  74:	fc 01       	movw	r30, r24
  76:	70 83       	st	Z, r23
    b[1] = (uint8_t)(255 & d);
  78:	61 83       	std	Z+1, r22	; 0x01
  7a:	08 95       	ret

0000007c <handle_tx>:
	running_status &= ~(1<<RU_RX_HANDLE);
}


void loop()
{
  7c:	08 95       	ret

0000007e <setup>:
  7e:	55 9a       	sbi	0x0a, 5	; 10
  80:	56 9a       	sbi	0x0a, 6	; 10
  82:	57 9a       	sbi	0x0a, 7	; 10
  84:	85 b1       	in	r24, 0x05	; 5
  86:	8c 6e       	ori	r24, 0xEC	; 236
  88:	85 b9       	out	0x05, r24	; 5
  8a:	84 b1       	in	r24, 0x04	; 4
  8c:	8c 6e       	ori	r24, 0xEC	; 236
  8e:	84 b9       	out	0x04, r24	; 4
  90:	24 98       	cbi	0x04, 4	; 4
  92:	b3 d3       	rcall	.+1894   	; 0x7fa <spi_setup>
  94:	88 d1       	rcall	.+784    	; 0x3a6 <mrf_reset>
  96:	92 d2       	rcall	.+1316   	; 0x5bc <mrf_init>
  98:	8e ef       	ldi	r24, 0xFE	; 254
  9a:	9a ec       	ldi	r25, 0xCA	; 202
  9c:	f2 d1       	rcall	.+996    	; 0x482 <mrf_set_pan>
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	f9 d1       	rcall	.+1010   	; 0x496 <mrf_address16_write>
  a4:	78 94       	sei
  a6:	e8 9a       	sbi	0x1d, 0	; 29
  a8:	e9 e6       	ldi	r30, 0x69	; 105
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
  b2:	82 e3       	ldi	r24, 0x32	; 50
  b4:	92 e0       	ldi	r25, 0x02	; 2
  b6:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <transmit_command_header+0x1>
  ba:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <transmit_command_header>
  be:	8a e0       	ldi	r24, 0x0A	; 10
  c0:	92 e0       	ldi	r25, 0x02	; 2
  c2:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <recieved_command_header+0x1>
  c6:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <recieved_command_header>
  ca:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <neighbor_status>
  ce:	8a e0       	ldi	r24, 0x0A	; 10
  d0:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <command_status>
  d4:	88 e2       	ldi	r24, 0x28	; 40
  d6:	ea e2       	ldi	r30, 0x2A	; 42
  d8:	f2 e0       	ldi	r31, 0x02	; 2
  da:	df 01       	movw	r26, r30
  dc:	98 2f       	mov	r25, r24
  de:	1d 92       	st	X+, r1
  e0:	9a 95       	dec	r25
  e2:	e9 f7       	brne	.-6      	; 0xde <setup+0x60>
  e4:	e2 e0       	ldi	r30, 0x02	; 2
  e6:	f2 e0       	ldi	r31, 0x02	; 2
  e8:	df 01       	movw	r26, r30
  ea:	1d 92       	st	X+, r1
  ec:	8a 95       	dec	r24
  ee:	e9 f7       	brne	.-6      	; 0xea <setup+0x6c>
  f0:	5f 9a       	sbi	0x0b, 7	; 11
  f2:	8f e4       	ldi	r24, 0x4F	; 79
  f4:	93 ec       	ldi	r25, 0xC3	; 195
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <setup+0x78>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <setup+0x7e>
  fc:	00 00       	nop
  fe:	5f 98       	cbi	0x0b, 7	; 11
 100:	af e4       	ldi	r26, 0x4F	; 79
 102:	b3 ec       	ldi	r27, 0xC3	; 195
 104:	11 97       	sbiw	r26, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <setup+0x86>
 108:	00 c0       	rjmp	.+0      	; 0x10a <setup+0x8c>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <__vector_1>:
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
 130:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 134:	80 61       	ori	r24, 0x10	; 16
 136:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 13a:	ab d2       	rcall	.+1366   	; 0x692 <mrf_interrupt_handler>
 13c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 140:	8f 7e       	andi	r24, 0xEF	; 239
 142:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	7f 91       	pop	r23
 154:	6f 91       	pop	r22
 156:	5f 91       	pop	r21
 158:	4f 91       	pop	r20
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <send_message>:
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	8c 01       	movw	r16, r24
 172:	eb 01       	movw	r28, r22
 174:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <PAN_ID>
 178:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <PAN_ID+0x1>
 17c:	ce 01       	movw	r24, r28
 17e:	18 d3       	rcall	.+1584   	; 0x7b0 <Pk_Set_Dest_Panid>
 180:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <PAN_ID>
 184:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <PAN_ID+0x1>
 188:	ce 01       	movw	r24, r28
 18a:	14 d3       	rcall	.+1576   	; 0x7b4 <Pk_Set_Src_Panid>
 18c:	68 e2       	ldi	r22, 0x28	; 40
 18e:	ce 01       	movw	r24, r28
 190:	14 d3       	rcall	.+1576   	; 0x7ba <Pk_Set_Packet_Size>
 192:	b8 01       	movw	r22, r16
 194:	ce 01       	movw	r24, r28
 196:	14 d3       	rcall	.+1576   	; 0x7c0 <Pk_Set_Target_Node>
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	ce 01       	movw	r24, r28
 19c:	27 d3       	rcall	.+1614   	; 0x7ec <Pk_Set_Src_Node>
 19e:	48 e2       	ldi	r20, 0x28	; 40
 1a0:	be 01       	movw	r22, r28
 1a2:	c8 01       	movw	r24, r16
 1a4:	91 d1       	rcall	.+802    	; 0x4c8 <mrf_send16>
 1a6:	ff d0       	rcall	.+510    	; 0x3a6 <mrf_reset>
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <get_data>:
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	7c 01       	movw	r14, r24
 1be:	eb 01       	movw	r28, r22
 1c0:	5e 9a       	sbi	0x0b, 6	; 11
 1c2:	8f e4       	ldi	r24, 0x4F	; 79
 1c4:	93 ec       	ldi	r25, 0xC3	; 195
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <get_data+0x14>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <get_data+0x1a>
 1cc:	00 00       	nop
 1ce:	5e 98       	cbi	0x0b, 6	; 11
 1d0:	8f e4       	ldi	r24, 0x4F	; 79
 1d2:	93 ec       	ldi	r25, 0xC3	; 195
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <get_data+0x22>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <get_data+0x28>
 1da:	00 00       	nop
 1dc:	04 e0       	ldi	r16, 0x04	; 4
 1de:	23 e0       	ldi	r18, 0x03	; 3
 1e0:	42 e0       	ldi	r20, 0x02	; 2
 1e2:	61 e4       	ldi	r22, 0x41	; 65
 1e4:	74 e4       	ldi	r23, 0x44	; 68
 1e6:	ce 01       	movw	r24, r28
 1e8:	ee d2       	rcall	.+1500   	; 0x7c6 <Pk_Set_Command>
 1ea:	be 01       	movw	r22, r28
 1ec:	c7 01       	movw	r24, r14
 1ee:	bc df       	rcall	.-136    	; 0x168 <send_message>
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	0f 91       	pop	r16
 1f6:	ff 90       	pop	r15
 1f8:	ef 90       	pop	r14
 1fa:	08 95       	ret

000001fc <forward_data>:
 1fc:	ef 92       	push	r14
 1fe:	ff 92       	push	r15
 200:	0f 93       	push	r16
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	7c 01       	movw	r14, r24
 208:	eb 01       	movw	r28, r22
 20a:	04 e0       	ldi	r16, 0x04	; 4
 20c:	23 e0       	ldi	r18, 0x03	; 3
 20e:	42 e0       	ldi	r20, 0x02	; 2
 210:	6e ec       	ldi	r22, 0xCE	; 206
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	ce 01       	movw	r24, r28
 216:	d7 d2       	rcall	.+1454   	; 0x7c6 <Pk_Set_Command>
 218:	be 01       	movw	r22, r28
 21a:	c7 01       	movw	r24, r14
 21c:	a5 df       	rcall	.-182    	; 0x168 <send_message>
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	0f 91       	pop	r16
 224:	ff 90       	pop	r15
 226:	ef 90       	pop	r14
 228:	08 95       	ret

0000022a <COMMAND_HANDLER>:
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	8c 01       	movw	r16, r24
 234:	5d 9a       	sbi	0x0b, 5	; 11
 236:	8f e4       	ldi	r24, 0x4F	; 79
 238:	93 ec       	ldi	r25, 0xC3	; 195
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <COMMAND_HANDLER+0x10>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <COMMAND_HANDLER+0x16>
 240:	00 00       	nop
 242:	5d 98       	cbi	0x0b, 5	; 11
 244:	ef e4       	ldi	r30, 0x4F	; 79
 246:	f3 ec       	ldi	r31, 0xC3	; 195
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <COMMAND_HANDLER+0x1e>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <COMMAND_HANDLER+0x24>
 24e:	00 00       	nop
 250:	e8 01       	movw	r28, r16
 252:	2a 96       	adiw	r28, 0x0a	; 10
 254:	ce 01       	movw	r24, r28
 256:	04 df       	rcall	.-504    	; 0x60 <bytes_to_word>
 258:	82 35       	cpi	r24, 0x52	; 82
 25a:	95 44       	sbci	r25, 0x45	; 69
 25c:	f1 f4       	brne	.+60     	; 0x29a <COMMAND_HANDLER+0x70>
 25e:	c8 01       	movw	r24, r16
 260:	06 96       	adiw	r24, 0x06	; 6
 262:	fe de       	rcall	.-516    	; 0x60 <bytes_to_word>
 264:	82 34       	cpi	r24, 0x42	; 66
 266:	91 43       	sbci	r25, 0x31	; 49
 268:	c1 f4       	brne	.+48     	; 0x29a <COMMAND_HANDLER+0x70>
 26a:	5e 9a       	sbi	0x0b, 6	; 11
 26c:	8f e4       	ldi	r24, 0x4F	; 79
 26e:	93 ec       	ldi	r25, 0xC3	; 195
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <COMMAND_HANDLER+0x46>
 274:	00 c0       	rjmp	.+0      	; 0x276 <COMMAND_HANDLER+0x4c>
 276:	00 00       	nop
 278:	5e 98       	cbi	0x0b, 6	; 11
 27a:	ef e4       	ldi	r30, 0x4F	; 79
 27c:	f3 ec       	ldi	r31, 0xC3	; 195
 27e:	31 97       	sbiw	r30, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <COMMAND_HANDLER+0x54>
 282:	00 c0       	rjmp	.+0      	; 0x284 <COMMAND_HANDLER+0x5a>
 284:	00 00       	nop
 286:	6a e2       	ldi	r22, 0x2A	; 42
 288:	72 e0       	ldi	r23, 0x02	; 2
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	91 df       	rcall	.-222    	; 0x1b2 <get_data>
 290:	88 e2       	ldi	r24, 0x28	; 40
 292:	f8 01       	movw	r30, r16
 294:	11 92       	st	Z+, r1
 296:	8a 95       	dec	r24
 298:	e9 f7       	brne	.-6      	; 0x294 <COMMAND_HANDLER+0x6a>
 29a:	ce 01       	movw	r24, r28
 29c:	e1 de       	rcall	.-574    	; 0x60 <bytes_to_word>
 29e:	8e 3c       	cpi	r24, 0xCE	; 206
 2a0:	91 05       	cpc	r25, r1
 2a2:	29 f5       	brne	.+74     	; 0x2ee <COMMAND_HANDLER+0xc4>
 2a4:	5d 9a       	sbi	0x0b, 5	; 11
 2a6:	8f e4       	ldi	r24, 0x4F	; 79
 2a8:	93 ec       	ldi	r25, 0xC3	; 195
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <COMMAND_HANDLER+0x80>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <COMMAND_HANDLER+0x86>
 2b0:	00 00       	nop
 2b2:	5d 98       	cbi	0x0b, 5	; 11
 2b4:	ef e4       	ldi	r30, 0x4F	; 79
 2b6:	f3 ec       	ldi	r31, 0xC3	; 195
 2b8:	31 97       	sbiw	r30, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <COMMAND_HANDLER+0x8e>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <COMMAND_HANDLER+0x94>
 2be:	00 00       	nop
 2c0:	5e 9a       	sbi	0x0b, 6	; 11
 2c2:	8f e4       	ldi	r24, 0x4F	; 79
 2c4:	93 ec       	ldi	r25, 0xC3	; 195
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <COMMAND_HANDLER+0x9c>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <COMMAND_HANDLER+0xa2>
 2cc:	00 00       	nop
 2ce:	5e 98       	cbi	0x0b, 6	; 11
 2d0:	ef e4       	ldi	r30, 0x4F	; 79
 2d2:	f3 ec       	ldi	r31, 0xC3	; 195
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <COMMAND_HANDLER+0xaa>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <COMMAND_HANDLER+0xb0>
 2da:	00 00       	nop
 2dc:	b8 01       	movw	r22, r16
 2de:	82 e4       	ldi	r24, 0x42	; 66
 2e0:	91 e3       	ldi	r25, 0x31	; 49
 2e2:	8c df       	rcall	.-232    	; 0x1fc <forward_data>
 2e4:	88 e2       	ldi	r24, 0x28	; 40
 2e6:	f8 01       	movw	r30, r16
 2e8:	11 92       	st	Z+, r1
 2ea:	8a 95       	dec	r24
 2ec:	e9 f7       	brne	.-6      	; 0x2e8 <COMMAND_HANDLER+0xbe>
 2ee:	ce 01       	movw	r24, r28
 2f0:	b7 de       	rcall	.-658    	; 0x60 <bytes_to_word>
 2f2:	81 34       	cpi	r24, 0x41	; 65
 2f4:	94 44       	sbci	r25, 0x44	; 68
 2f6:	f1 f4       	brne	.+60     	; 0x334 <__stack+0x35>
 2f8:	5e 9a       	sbi	0x0b, 6	; 11
 2fa:	8f e4       	ldi	r24, 0x4F	; 79
 2fc:	93 ec       	ldi	r25, 0xC3	; 195
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <COMMAND_HANDLER+0xd4>
 302:	00 c0       	rjmp	.+0      	; 0x304 <__stack+0x5>
 304:	00 00       	nop
 306:	5e 98       	cbi	0x0b, 6	; 11
 308:	ef e4       	ldi	r30, 0x4F	; 79
 30a:	f3 ec       	ldi	r31, 0xC3	; 195
 30c:	31 97       	sbiw	r30, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <__stack+0xd>
 310:	00 c0       	rjmp	.+0      	; 0x312 <__stack+0x13>
 312:	00 00       	nop
 314:	65 e5       	ldi	r22, 0x55	; 85
 316:	75 e5       	ldi	r23, 0x55	; 85
 318:	8a e2       	ldi	r24, 0x2A	; 42
 31a:	92 e0       	ldi	r25, 0x02	; 2
 31c:	6b d2       	rcall	.+1238   	; 0x7f4 <Pk_Add_Data>
 31e:	c8 01       	movw	r24, r16
 320:	06 96       	adiw	r24, 0x06	; 6
 322:	9e de       	rcall	.-708    	; 0x60 <bytes_to_word>
 324:	6a e2       	ldi	r22, 0x2A	; 42
 326:	72 e0       	ldi	r23, 0x02	; 2
 328:	69 df       	rcall	.-302    	; 0x1fc <forward_data>
 32a:	88 e2       	ldi	r24, 0x28	; 40
 32c:	f8 01       	movw	r30, r16
 32e:	11 92       	st	Z+, r1
 330:	8a 95       	dec	r24
 332:	e9 f7       	brne	.-6      	; 0x32e <__stack+0x2f>
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	08 95       	ret

0000033e <handle_rx>:
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 346:	88 60       	ori	r24, 0x08	; 8
 348:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 34c:	95 d1       	rcall	.+810    	; 0x678 <mrf_rx_datalength>
 34e:	ec 01       	movw	r28, r24
 350:	2c d2       	rcall	.+1112   	; 0x7aa <mrf_get_rxdata>
 352:	ae 01       	movw	r20, r28
 354:	bc 01       	movw	r22, r24
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	92 e0       	ldi	r25, 0x02	; 2
 35a:	92 d2       	rcall	.+1316   	; 0x880 <memcpy>
 35c:	84 e0       	ldi	r24, 0x04	; 4
 35e:	92 e0       	ldi	r25, 0x02	; 2
 360:	7f de       	rcall	.-770    	; 0x60 <bytes_to_word>
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	89 f4       	brne	.+34     	; 0x388 <handle_rx+0x4a>
 366:	5f 9a       	sbi	0x0b, 7	; 11
 368:	8f e4       	ldi	r24, 0x4F	; 79
 36a:	93 ec       	ldi	r25, 0xC3	; 195
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <handle_rx+0x2e>
 370:	00 c0       	rjmp	.+0      	; 0x372 <handle_rx+0x34>
 372:	00 00       	nop
 374:	5f 98       	cbi	0x0b, 7	; 11
 376:	8f e4       	ldi	r24, 0x4F	; 79
 378:	93 ec       	ldi	r25, 0xC3	; 195
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <handle_rx+0x3c>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <handle_rx+0x42>
 380:	00 00       	nop
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	92 e0       	ldi	r25, 0x02	; 2
 386:	51 df       	rcall	.-350    	; 0x22a <COMMAND_HANDLER>
 388:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 38c:	87 7f       	andi	r24, 0xF7	; 247
 38e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <main>:
	
}
int main(void)
{
	setup();
 398:	72 de       	rcall	.-796    	; 0x7e <setup>
    while (1) 
    {
		mrf_check_flags(&handle_rx,&handle_tx);
 39a:	6e e3       	ldi	r22, 0x3E	; 62
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	8f e9       	ldi	r24, 0x9F	; 159
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	50 d1       	rcall	.+672    	; 0x644 <mrf_check_flags>
 3a4:	fa cf       	rjmp	.-12     	; 0x39a <main+0x2>

000003a6 <mrf_reset>:
        mrf_write_long(MRF_TESTMODE, 0x00); // Disable PA/LNA on MRF24J40MB module.
    }
}

void mrf_rx_flush(void) {
    mrf_write_short(MRF_RXFLUSH, 0x01);
 3a6:	59 98       	cbi	0x0b, 1	; 11
 3a8:	87 ea       	ldi	r24, 0xA7	; 167
 3aa:	91 e6       	ldi	r25, 0x61	; 97
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <mrf_reset+0x6>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <mrf_reset+0xc>
 3b2:	00 00       	nop
 3b4:	59 9a       	sbi	0x0b, 1	; 11
 3b6:	83 e2       	ldi	r24, 0x23	; 35
 3b8:	94 ef       	ldi	r25, 0xF4	; 244
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <mrf_reset+0x14>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <mrf_reset+0x1a>
 3c0:	00 00       	nop
 3c2:	08 95       	ret

000003c4 <mrf_read_short>:
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	c3 e0       	ldi	r28, 0x03	; 3
 3ca:	d1 e0       	ldi	r29, 0x01	; 1
 3cc:	88 0f       	add	r24, r24
 3ce:	8e 77       	andi	r24, 0x7E	; 126
 3d0:	88 83       	st	Y, r24
 3d2:	19 82       	std	Y+1, r1	; 0x01
 3d4:	26 e0       	ldi	r18, 0x06	; 6
 3d6:	42 e0       	ldi	r20, 0x02	; 2
 3d8:	be 01       	movw	r22, r28
 3da:	ce 01       	movw	r24, r28
 3dc:	1b d2       	rcall	.+1078   	; 0x814 <spi_transfer_nbytes>
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <mrf_read_long>:
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	c3 e0       	ldi	r28, 0x03	; 3
 3ec:	d1 e0       	ldi	r29, 0x01	; 1
 3ee:	9c 01       	movw	r18, r24
 3f0:	36 95       	lsr	r19
 3f2:	27 95       	ror	r18
 3f4:	36 95       	lsr	r19
 3f6:	27 95       	ror	r18
 3f8:	36 95       	lsr	r19
 3fa:	27 95       	ror	r18
 3fc:	20 68       	ori	r18, 0x80	; 128
 3fe:	28 83       	st	Y, r18
 400:	82 95       	swap	r24
 402:	88 0f       	add	r24, r24
 404:	80 7e       	andi	r24, 0xE0	; 224
 406:	89 83       	std	Y+1, r24	; 0x01
 408:	1a 82       	std	Y+2, r1	; 0x02
 40a:	26 e0       	ldi	r18, 0x06	; 6
 40c:	43 e0       	ldi	r20, 0x03	; 3
 40e:	be 01       	movw	r22, r28
 410:	ce 01       	movw	r24, r28
 412:	00 d2       	rcall	.+1024   	; 0x814 <spi_transfer_nbytes>
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <mrf_write_short>:
 41c:	e3 e0       	ldi	r30, 0x03	; 3
 41e:	f1 e0       	ldi	r31, 0x01	; 1
 420:	88 0f       	add	r24, r24
 422:	8e 77       	andi	r24, 0x7E	; 126
 424:	81 60       	ori	r24, 0x01	; 1
 426:	80 83       	st	Z, r24
 428:	61 83       	std	Z+1, r22	; 0x01
 42a:	26 e0       	ldi	r18, 0x06	; 6
 42c:	42 e0       	ldi	r20, 0x02	; 2
 42e:	bf 01       	movw	r22, r30
 430:	cf 01       	movw	r24, r30
 432:	f0 d1       	rcall	.+992    	; 0x814 <spi_transfer_nbytes>
 434:	08 95       	ret

00000436 <mrf_write_long>:
 436:	e3 e0       	ldi	r30, 0x03	; 3
 438:	f1 e0       	ldi	r31, 0x01	; 1
 43a:	9c 01       	movw	r18, r24
 43c:	36 95       	lsr	r19
 43e:	27 95       	ror	r18
 440:	36 95       	lsr	r19
 442:	27 95       	ror	r18
 444:	36 95       	lsr	r19
 446:	27 95       	ror	r18
 448:	20 68       	ori	r18, 0x80	; 128
 44a:	20 83       	st	Z, r18
 44c:	82 95       	swap	r24
 44e:	88 0f       	add	r24, r24
 450:	80 7e       	andi	r24, 0xE0	; 224
 452:	80 61       	ori	r24, 0x10	; 16
 454:	81 83       	std	Z+1, r24	; 0x01
 456:	62 83       	std	Z+2, r22	; 0x02
 458:	26 e0       	ldi	r18, 0x06	; 6
 45a:	43 e0       	ldi	r20, 0x03	; 3
 45c:	bf 01       	movw	r22, r30
 45e:	cf 01       	movw	r24, r30
 460:	d9 d1       	rcall	.+946    	; 0x814 <spi_transfer_nbytes>
 462:	08 95       	ret

00000464 <mrf_get_pan>:
 464:	cf 93       	push	r28
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	ad df       	rcall	.-166    	; 0x3c4 <mrf_read_short>
 46a:	c8 2f       	mov	r28, r24
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	aa df       	rcall	.-172    	; 0x3c4 <mrf_read_short>
 470:	2c 2f       	mov	r18, r28
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	32 2f       	mov	r19, r18
 476:	22 27       	eor	r18, r18
 478:	a9 01       	movw	r20, r18
 47a:	48 2b       	or	r20, r24
 47c:	ca 01       	movw	r24, r20
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <mrf_set_pan>:
 482:	cf 93       	push	r28
 484:	c8 2f       	mov	r28, r24
 486:	69 2f       	mov	r22, r25
 488:	82 e0       	ldi	r24, 0x02	; 2
 48a:	c8 df       	rcall	.-112    	; 0x41c <mrf_write_short>
 48c:	6c 2f       	mov	r22, r28
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	c5 df       	rcall	.-118    	; 0x41c <mrf_write_short>
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <mrf_address16_write>:
 496:	cf 93       	push	r28
 498:	c8 2f       	mov	r28, r24
 49a:	69 2f       	mov	r22, r25
 49c:	84 e0       	ldi	r24, 0x04	; 4
 49e:	be df       	rcall	.-132    	; 0x41c <mrf_write_short>
 4a0:	6c 2f       	mov	r22, r28
 4a2:	83 e0       	ldi	r24, 0x03	; 3
 4a4:	bb df       	rcall	.-138    	; 0x41c <mrf_write_short>
 4a6:	cf 91       	pop	r28
 4a8:	08 95       	ret

000004aa <mrf_address16_read>:
 4aa:	cf 93       	push	r28
 4ac:	84 e0       	ldi	r24, 0x04	; 4
 4ae:	8a df       	rcall	.-236    	; 0x3c4 <mrf_read_short>
 4b0:	c8 2f       	mov	r28, r24
 4b2:	83 e0       	ldi	r24, 0x03	; 3
 4b4:	87 df       	rcall	.-242    	; 0x3c4 <mrf_read_short>
 4b6:	2c 2f       	mov	r18, r28
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	32 2f       	mov	r19, r18
 4bc:	22 27       	eor	r18, r18
 4be:	a9 01       	movw	r20, r18
 4c0:	48 2b       	or	r20, r24
 4c2:	ca 01       	movw	r24, r20
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <mrf_send16>:
 4c8:	bf 92       	push	r11
 4ca:	cf 92       	push	r12
 4cc:	df 92       	push	r13
 4ce:	ef 92       	push	r14
 4d0:	ff 92       	push	r15
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	d8 2f       	mov	r29, r24
 4dc:	c9 2f       	mov	r28, r25
 4de:	7b 01       	movw	r14, r22
 4e0:	b4 2e       	mov	r11, r20
 4e2:	69 e0       	ldi	r22, 0x09	; 9
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	a6 df       	rcall	.-180    	; 0x436 <mrf_write_long>
 4ea:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <ignoreBytes>
 4ee:	67 5f       	subi	r22, 0xF7	; 247
 4f0:	6b 0d       	add	r22, r11
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	9f df       	rcall	.-194    	; 0x436 <mrf_write_long>
 4f8:	61 e6       	ldi	r22, 0x61	; 97
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	9b df       	rcall	.-202    	; 0x436 <mrf_write_long>
 500:	68 e8       	ldi	r22, 0x88	; 136
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	97 df       	rcall	.-210    	; 0x436 <mrf_write_long>
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	84 e0       	ldi	r24, 0x04	; 4
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	93 df       	rcall	.-218    	; 0x436 <mrf_write_long>
 510:	a9 df       	rcall	.-174    	; 0x464 <mrf_get_pan>
 512:	19 2f       	mov	r17, r25
 514:	68 2f       	mov	r22, r24
 516:	85 e0       	ldi	r24, 0x05	; 5
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	8d df       	rcall	.-230    	; 0x436 <mrf_write_long>
 51c:	61 2f       	mov	r22, r17
 51e:	86 e0       	ldi	r24, 0x06	; 6
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	89 df       	rcall	.-238    	; 0x436 <mrf_write_long>
 524:	6d 2f       	mov	r22, r29
 526:	87 e0       	ldi	r24, 0x07	; 7
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	85 df       	rcall	.-246    	; 0x436 <mrf_write_long>
 52c:	6c 2f       	mov	r22, r28
 52e:	88 e0       	ldi	r24, 0x08	; 8
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	81 df       	rcall	.-254    	; 0x436 <mrf_write_long>
 534:	ba df       	rcall	.-140    	; 0x4aa <mrf_address16_read>
 536:	c9 2f       	mov	r28, r25
 538:	68 2f       	mov	r22, r24
 53a:	89 e0       	ldi	r24, 0x09	; 9
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	7b df       	rcall	.-266    	; 0x436 <mrf_write_long>
 540:	6c 2f       	mov	r22, r28
 542:	8a e0       	ldi	r24, 0x0A	; 10
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	77 df       	rcall	.-274    	; 0x436 <mrf_write_long>
 548:	c0 90 7e 01 	lds	r12, 0x017E	; 0x80017e <ignoreBytes>
 54c:	d0 90 7f 01 	lds	r13, 0x017F	; 0x80017f <ignoreBytes+0x1>
 550:	8b e0       	ldi	r24, 0x0B	; 11
 552:	c8 0e       	add	r12, r24
 554:	d1 1c       	adc	r13, r1
 556:	bb 20       	and	r11, r11
 558:	61 f0       	breq	.+24     	; 0x572 <mrf_send16+0xaa>
 55a:	86 01       	movw	r16, r12
 55c:	e7 01       	movw	r28, r14
 55e:	eb 0c       	add	r14, r11
 560:	f1 1c       	adc	r15, r1
 562:	69 91       	ld	r22, Y+
 564:	c8 01       	movw	r24, r16
 566:	67 df       	rcall	.-306    	; 0x436 <mrf_write_long>
 568:	0f 5f       	subi	r16, 0xFF	; 255
 56a:	1f 4f       	sbci	r17, 0xFF	; 255
 56c:	ce 15       	cp	r28, r14
 56e:	df 05       	cpc	r29, r15
 570:	c1 f7       	brne	.-16     	; 0x562 <mrf_send16+0x9a>
 572:	6b 2d       	mov	r22, r11
 574:	c6 01       	movw	r24, r12
 576:	5f df       	rcall	.-322    	; 0x436 <mrf_write_long>
 578:	65 e0       	ldi	r22, 0x05	; 5
 57a:	8b e1       	ldi	r24, 0x1B	; 27
 57c:	4f df       	rcall	.-354    	; 0x41c <mrf_write_short>
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	1f 91       	pop	r17
 584:	0f 91       	pop	r16
 586:	ff 90       	pop	r15
 588:	ef 90       	pop	r14
 58a:	df 90       	pop	r13
 58c:	cf 90       	pop	r12
 58e:	bf 90       	pop	r11
 590:	08 95       	ret

00000592 <mrf_set_interrupts>:
 592:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <isr_lock>
 596:	66 ef       	ldi	r22, 0xF6	; 246
 598:	82 e3       	ldi	r24, 0x32	; 50
 59a:	40 df       	rcall	.-384    	; 0x41c <mrf_write_short>
 59c:	08 95       	ret

0000059e <mrf_set_channel>:
 59e:	68 2f       	mov	r22, r24
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	6b 50       	subi	r22, 0x0B	; 11
 5a4:	71 09       	sbc	r23, r1
 5a6:	62 95       	swap	r22
 5a8:	72 95       	swap	r23
 5aa:	70 7f       	andi	r23, 0xF0	; 240
 5ac:	76 27       	eor	r23, r22
 5ae:	60 7f       	andi	r22, 0xF0	; 240
 5b0:	76 27       	eor	r23, r22
 5b2:	63 60       	ori	r22, 0x03	; 3
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	92 e0       	ldi	r25, 0x02	; 2
 5b8:	3e df       	rcall	.-388    	; 0x436 <mrf_write_long>
 5ba:	08 95       	ret

000005bc <mrf_init>:
 5bc:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <mrf_flags>
 5c0:	67 e0       	ldi	r22, 0x07	; 7
 5c2:	8a e2       	ldi	r24, 0x2A	; 42
 5c4:	2b df       	rcall	.-426    	; 0x41c <mrf_write_short>
 5c6:	68 e9       	ldi	r22, 0x98	; 152
 5c8:	88 e1       	ldi	r24, 0x18	; 24
 5ca:	28 df       	rcall	.-432    	; 0x41c <mrf_write_short>
 5cc:	65 e9       	ldi	r22, 0x95	; 149
 5ce:	8e e2       	ldi	r24, 0x2E	; 46
 5d0:	25 df       	rcall	.-438    	; 0x41c <mrf_write_short>
 5d2:	63 e0       	ldi	r22, 0x03	; 3
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	92 e0       	ldi	r25, 0x02	; 2
 5d8:	2e df       	rcall	.-420    	; 0x436 <mrf_write_long>
 5da:	61 e0       	ldi	r22, 0x01	; 1
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	92 e0       	ldi	r25, 0x02	; 2
 5e0:	2a df       	rcall	.-428    	; 0x436 <mrf_write_long>
 5e2:	60 e8       	ldi	r22, 0x80	; 128
 5e4:	82 e0       	ldi	r24, 0x02	; 2
 5e6:	92 e0       	ldi	r25, 0x02	; 2
 5e8:	26 df       	rcall	.-436    	; 0x436 <mrf_write_long>
 5ea:	60 e9       	ldi	r22, 0x90	; 144
 5ec:	86 e0       	ldi	r24, 0x06	; 6
 5ee:	92 e0       	ldi	r25, 0x02	; 2
 5f0:	22 df       	rcall	.-444    	; 0x436 <mrf_write_long>
 5f2:	60 e8       	ldi	r22, 0x80	; 128
 5f4:	87 e0       	ldi	r24, 0x07	; 7
 5f6:	92 e0       	ldi	r25, 0x02	; 2
 5f8:	1e df       	rcall	.-452    	; 0x436 <mrf_write_long>
 5fa:	60 e1       	ldi	r22, 0x10	; 16
 5fc:	88 e0       	ldi	r24, 0x08	; 8
 5fe:	92 e0       	ldi	r25, 0x02	; 2
 600:	1a df       	rcall	.-460    	; 0x436 <mrf_write_long>
 602:	61 e2       	ldi	r22, 0x21	; 33
 604:	80 e2       	ldi	r24, 0x20	; 32
 606:	92 e0       	ldi	r25, 0x02	; 2
 608:	16 df       	rcall	.-468    	; 0x436 <mrf_write_long>
 60a:	60 e8       	ldi	r22, 0x80	; 128
 60c:	8a e3       	ldi	r24, 0x3A	; 58
 60e:	06 df       	rcall	.-500    	; 0x41c <mrf_write_short>
 610:	60 e6       	ldi	r22, 0x60	; 96
 612:	8f e3       	ldi	r24, 0x3F	; 63
 614:	03 df       	rcall	.-506    	; 0x41c <mrf_write_short>
 616:	60 e4       	ldi	r22, 0x40	; 64
 618:	8e e3       	ldi	r24, 0x3E	; 62
 61a:	00 df       	rcall	.-512    	; 0x41c <mrf_write_short>
 61c:	ba df       	rcall	.-140    	; 0x592 <mrf_set_interrupts>
 61e:	84 e1       	ldi	r24, 0x14	; 20
 620:	be df       	rcall	.-132    	; 0x59e <mrf_set_channel>
 622:	64 e0       	ldi	r22, 0x04	; 4
 624:	86 e3       	ldi	r24, 0x36	; 54
 626:	fa de       	rcall	.-524    	; 0x41c <mrf_write_short>
 628:	60 e0       	ldi	r22, 0x00	; 0
 62a:	86 e3       	ldi	r24, 0x36	; 54
 62c:	f7 de       	rcall	.-530    	; 0x41c <mrf_write_short>
 62e:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <flag_got_rx>
 632:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <flag_got_tx>
 636:	89 ef       	ldi	r24, 0xF9	; 249
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	f1 f7       	brne	.-4      	; 0x63a <mrf_init+0x7e>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <mrf_init+0x84>
 640:	00 00       	nop
 642:	08 95       	ret

00000644 <mrf_check_flags>:
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <isr_lock>
 64c:	21 11       	cpse	r18, r1
 64e:	11 c0       	rjmp	.+34     	; 0x672 <mrf_check_flags+0x2e>
 650:	eb 01       	movw	r28, r22
 652:	fc 01       	movw	r30, r24
 654:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <flag_got_rx>
 658:	22 23       	and	r18, r18
 65a:	19 f0       	breq	.+6      	; 0x662 <mrf_check_flags+0x1e>
 65c:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <flag_got_rx>
 660:	09 95       	icall
 662:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <flag_got_tx>
 666:	88 23       	and	r24, r24
 668:	21 f0       	breq	.+8      	; 0x672 <mrf_check_flags+0x2e>
 66a:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <flag_got_tx>
 66e:	fe 01       	movw	r30, r28
 670:	09 95       	icall
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	08 95       	ret

00000678 <mrf_rx_datalength>:
 678:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rx_info>
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0b 97       	sbiw	r24, 0x0b	; 11
 680:	08 95       	ret

00000682 <mrf_rx_disable>:
}

void mrf_rx_disable(void) {
    mrf_write_short(MRF_BBREG1, 0x04);  // RXDECINV - disable receiver
 682:	64 e0       	ldi	r22, 0x04	; 4
 684:	89 e3       	ldi	r24, 0x39	; 57
 686:	ca de       	rcall	.-620    	; 0x41c <mrf_write_short>
 688:	08 95       	ret

0000068a <mrf_rx_enable>:
}

void mrf_rx_enable(void) {
    mrf_write_short(MRF_BBREG1, 0x00);  // RXDECINV - enable receiver
 68a:	60 e0       	ldi	r22, 0x00	; 0
 68c:	89 e3       	ldi	r24, 0x39	; 57
 68e:	c6 de       	rcall	.-628    	; 0x41c <mrf_write_short>
 690:	08 95       	ret

00000692 <mrf_interrupt_handler>:
 * Call this from within an interrupt handler connected to the MRFs output
 * interrupt pin.  It handles reading in any data from the module, and letting it
 * continue working.
 * Only the most recent data is ever kept.
 */
void mrf_interrupt_handler(void) {
 692:	af 92       	push	r10
 694:	bf 92       	push	r11
 696:	cf 92       	push	r12
 698:	df 92       	push	r13
 69a:	ef 92       	push	r14
 69c:	ff 92       	push	r15
 69e:	0f 93       	push	r16
 6a0:	1f 93       	push	r17
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
    //GRAB_ISR_MUTEX;
    isr_lock = 1;
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <isr_lock>
    uint8_t last_interrupt = mrf_read_short(MRF_INTSTAT);
 6ac:	81 e3       	ldi	r24, 0x31	; 49
 6ae:	8a de       	rcall	.-748    	; 0x3c4 <mrf_read_short>
 6b0:	b8 2e       	mov	r11, r24
    if (last_interrupt & MRF_I_RXIF) {
 6b2:	83 ff       	sbrs	r24, 3
 6b4:	4f c0       	rjmp	.+158    	; 0x754 <mrf_interrupt_handler+0xc2>
		//ERROR: This doesn't enter upon reboot until a second message is sent
		//BLINK(LIGHT_PORT,GREEN_LIGHT);
        int i = 0;
        flag_got_rx++;
 6b6:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <flag_got_rx>
 6ba:	8f 5f       	subi	r24, 0xFF	; 255
 6bc:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <flag_got_rx>
        // read out the packet data...
    //    cli();
        mrf_rx_disable();
 6c0:	e0 df       	rcall	.-64     	; 0x682 <mrf_rx_disable>
        // read start of rxfifo for, has 2 bytes more added by FCS. frame_length = m + n + 2
        uint8_t frame_length = mrf_read_long(0x300);
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	93 e0       	ldi	r25, 0x03	; 3
 6c6:	8f de       	rcall	.-738    	; 0x3e6 <mrf_read_long>
 6c8:	a8 2e       	mov	r10, r24

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
 6ca:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <mrf_flags>
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 6ce:	ea 2c       	mov	r14, r10
 6d0:	f1 2c       	mov	r15, r1
 6d2:	1e 14       	cp	r1, r14
 6d4:	1f 04       	cpc	r1, r15
 6d6:	9c f4       	brge	.+38     	; 0x6fe <mrf_interrupt_handler+0x6c>
 6d8:	c7 01       	movw	r24, r14
 6da:	9c 01       	movw	r18, r24
 6dc:	20 58       	subi	r18, 0x80	; 128
 6de:	3e 4f       	sbci	r19, 0xFE	; 254
 6e0:	69 01       	movw	r12, r18
 6e2:	c0 e8       	ldi	r28, 0x80	; 128
 6e4:	d1 e0       	ldi	r29, 0x01	; 1
                rx_buf[rb_ptr++] = mrf_read_long(0x301 + i);
 6e6:	01 e0       	ldi	r16, 0x01	; 1
 6e8:	13 e0       	ldi	r17, 0x03	; 3
 6ea:	00 58       	subi	r16, 0x80	; 128
 6ec:	11 40       	sbci	r17, 0x01	; 1
 6ee:	c8 01       	movw	r24, r16
 6f0:	8c 0f       	add	r24, r28
 6f2:	9d 1f       	adc	r25, r29
 6f4:	78 de       	rcall	.-784    	; 0x3e6 <mrf_read_long>
 6f6:	89 93       	st	Y+, r24
        uint8_t frame_length = mrf_read_long(0x300);

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 6f8:	cc 15       	cp	r28, r12
 6fa:	dd 05       	cpc	r29, r13
 6fc:	c1 f7       	brne	.-16     	; 0x6ee <mrf_interrupt_handler+0x5c>
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 6fe:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rx_info>
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0b 97       	sbiw	r24, 0x0b	; 11
 706:	18 16       	cp	r1, r24
 708:	19 06       	cpc	r1, r25
 70a:	ac f4       	brge	.+42     	; 0x736 <mrf_interrupt_handler+0xa4>
 70c:	c8 e0       	ldi	r28, 0x08	; 8
 70e:	d1 e0       	ldi	r29, 0x01	; 1
 710:	c1 2c       	mov	r12, r1
 712:	d1 2c       	mov	r13, r1
uint8_t * mrf_get_rxbuf(void) {
    return rx_buf;
}

int mrf_rx_datalength(void) {
    return rx_info.frame_length - bytes_nodata;
 714:	07 e0       	ldi	r16, 0x07	; 7
 716:	11 e0       	ldi	r17, 0x01	; 1

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
 718:	3f ef       	ldi	r19, 0xFF	; 255
 71a:	c3 1a       	sub	r12, r19
 71c:	d3 0a       	sbc	r13, r19
 71e:	c6 01       	movw	r24, r12
 720:	87 5f       	subi	r24, 0xF7	; 247
 722:	9c 4f       	sbci	r25, 0xFC	; 252
 724:	60 de       	rcall	.-832    	; 0x3e6 <mrf_read_long>
 726:	89 93       	st	Y+, r24
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 728:	f8 01       	movw	r30, r16
 72a:	80 81       	ld	r24, Z
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	0b 97       	sbiw	r24, 0x0b	; 11
 730:	c8 16       	cp	r12, r24
 732:	d9 06       	cpc	r13, r25
 734:	8c f3       	brlt	.-30     	; 0x718 <mrf_interrupt_handler+0x86>
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
        }

        rx_info.frame_length = frame_length;
 736:	a0 92 07 01 	sts	0x0107, r10	; 0x800107 <rx_info>
        // same as datasheet 0x301 + (m + n + 2) <-- frame_length
        rx_info.lqi = mrf_read_long(0x301 + frame_length);
 73a:	c7 01       	movw	r24, r14
 73c:	8f 5f       	subi	r24, 0xFF	; 255
 73e:	9c 4f       	sbci	r25, 0xFC	; 252
 740:	52 de       	rcall	.-860    	; 0x3e6 <mrf_read_long>
 742:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <rx_info+0x75>
        // same as datasheet 0x301 + (m + n + 3) <-- frame_length + 1
        rx_info.rssi = mrf_read_long(0x301 + frame_length + 1);
 746:	c7 01       	movw	r24, r14
 748:	8e 5f       	subi	r24, 0xFE	; 254
 74a:	9c 4f       	sbci	r25, 0xFC	; 252
 74c:	4c de       	rcall	.-872    	; 0x3e6 <mrf_read_long>
 74e:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <rx_info+0x76>

        mrf_rx_enable();
 752:	9b df       	rcall	.-202    	; 0x68a <mrf_rx_enable>
    //    sei();
    }
    if (last_interrupt & MRF_I_TXNIF) {
 754:	b0 fe       	sbrs	r11, 0
 756:	1c c0       	rjmp	.+56     	; 0x790 <mrf_interrupt_handler+0xfe>
        flag_got_tx++;
 758:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <flag_got_tx>
 75c:	8f 5f       	subi	r24, 0xFF	; 255
 75e:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <flag_got_tx>
        mrf_reg_TXSTAT = mrf_read_short(MRF_TXSTAT);
 762:	84 e2       	ldi	r24, 0x24	; 36
 764:	2f de       	rcall	.-930    	; 0x3c4 <mrf_read_short>
 766:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <mrf_reg_TXSTAT>
        // 1 means it failed, we want 1 to mean it worked.
        tx_info.tx_ok = !(mrf_reg_TXSTAT & 0x3F);
 76a:	98 2f       	mov	r25, r24
 76c:	9f 73       	andi	r25, 0x3F	; 63
 76e:	21 e0       	ldi	r18, 0x01	; 1
 770:	09 f0       	breq	.+2      	; 0x774 <mrf_interrupt_handler+0xe2>
 772:	20 e0       	ldi	r18, 0x00	; 0
 774:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <tx_info>
 778:	20 fb       	bst	r18, 0
 77a:	90 f9       	bld	r25, 0
        tx_info.retries = mrf_reg_TXSTAT >> 6;
 77c:	82 95       	swap	r24
 77e:	86 95       	lsr	r24
 780:	86 95       	lsr	r24
 782:	83 70       	andi	r24, 0x03	; 3
 784:	88 0f       	add	r24, r24
 786:	99 7f       	andi	r25, 0xF9	; 249
        tx_info.channel_busy = (mrf_reg_TXSTAT & (1 << CCAFAIL));
 788:	89 2b       	or	r24, r25
 78a:	87 7f       	andi	r24, 0xF7	; 247
 78c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tx_info>
    }
//DROP_ISR_MUTEX;
    isr_lock = 0;
 790:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <isr_lock>
}
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	1f 91       	pop	r17
 79a:	0f 91       	pop	r16
 79c:	ff 90       	pop	r15
 79e:	ef 90       	pop	r14
 7a0:	df 90       	pop	r13
 7a2:	cf 90       	pop	r12
 7a4:	bf 90       	pop	r11
 7a6:	af 90       	pop	r10
 7a8:	08 95       	ret

000007aa <mrf_get_rxdata>:
}

uint8_t* mrf_get_rxdata()
{
	return rx_info.rx_data;
}
 7aa:	88 e0       	ldi	r24, 0x08	; 8
 7ac:	91 e0       	ldi	r25, 0x01	; 1
 7ae:	08 95       	ret

000007b0 <Pk_Set_Dest_Panid>:
#include "bitmanip.h"
#include "packet_specs.h"

void Pk_Set_Dest_Panid(uint8_t* buff, uint16_t panid)
{
	word_to_bytes(&buff[PK_DEST_PANID_HI],panid);
 7b0:	61 dc       	rcall	.-1854   	; 0x74 <word_to_bytes>
 7b2:	08 95       	ret

000007b4 <Pk_Set_Src_Panid>:
}

void Pk_Set_Src_Panid(uint8_t* buff, uint16_t panid)
{
	word_to_bytes(&buff[PK_SRC_PANID_HI],panid);
 7b4:	04 96       	adiw	r24, 0x04	; 4
 7b6:	5e dc       	rcall	.-1860   	; 0x74 <word_to_bytes>
 7b8:	08 95       	ret

000007ba <Pk_Set_Packet_Size>:
}

void Pk_Set_Packet_Size(uint8_t* buff, uint8_t sz)
{
	buff[PK_COMMAND_HEADER + PK_SZ_PACKET] = sz;
 7ba:	fc 01       	movw	r30, r24
 7bc:	61 87       	std	Z+9, r22	; 0x09
 7be:	08 95       	ret

000007c0 <Pk_Set_Target_Node>:
}

void Pk_Set_Target_Node(uint8_t* buff, uint16_t target_node)
{
	word_to_bytes(&buff[PK_DEST_ADDR_HI],target_node);
 7c0:	02 96       	adiw	r24, 0x02	; 2
 7c2:	58 dc       	rcall	.-1872   	; 0x74 <word_to_bytes>
 7c4:	08 95       	ret

000007c6 <Pk_Set_Command>:
}

void Pk_Set_Command(uint8_t* buff, uint16_t cmd_id, /*uint8_t cmd2,*/ uint8_t cmd3, uint8_t cmd4, uint8_t cmd5)
{
 7c6:	ff 92       	push	r15
 7c8:	0f 93       	push	r16
 7ca:	1f 93       	push	r17
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
 7d0:	ec 01       	movw	r28, r24
 7d2:	f4 2e       	mov	r15, r20
 7d4:	12 2f       	mov	r17, r18
	word_to_bytes(&buff[PK_COMMAND_HEADER+PK_CMD_HI],cmd_id);
 7d6:	0a 96       	adiw	r24, 0x0a	; 10
 7d8:	4d dc       	rcall	.-1894   	; 0x74 <word_to_bytes>
	//buff[PK_COMMAND_HEADER+PK_CMD_DATA_0] = cmd2;
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_1] = cmd3;
 7da:	fd 86       	std	Y+13, r15	; 0x0d
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_2] = cmd4;
 7dc:	1e 87       	std	Y+14, r17	; 0x0e
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_3] = cmd5;
 7de:	0f 87       	std	Y+15, r16	; 0x0f
}
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	1f 91       	pop	r17
 7e6:	0f 91       	pop	r16
 7e8:	ff 90       	pop	r15
 7ea:	08 95       	ret

000007ec <Pk_Set_Src_Node>:

void Pk_Set_Src_Node(uint8_t* buff, uint8_t origin)
{
	//used for setting where this particular packet is coming from: the source of "data" would be held
	//later in the packet, in the data bytes.
	word_to_bytes(&buff[PK_SRC_ADDR_HI],origin);
 7ec:	70 e0       	ldi	r23, 0x00	; 0
 7ee:	06 96       	adiw	r24, 0x06	; 6
 7f0:	41 dc       	rcall	.-1918   	; 0x74 <word_to_bytes>
 7f2:	08 95       	ret

000007f4 <Pk_Add_Data>:
}

void Pk_Add_Data(uint8_t* buff, uint16_t data)
{
	word_to_bytes(&buff[PK_DATA_START],data);
 7f4:	40 96       	adiw	r24, 0x10	; 16
 7f6:	3e dc       	rcall	.-1924   	; 0x74 <word_to_bytes>
 7f8:	08 95       	ret

000007fa <spi_setup>:

void spi_setup()
{

	#ifndef SPI_ON_USI
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0); //enables SPI, sets chip as master, sets clock speed to fosc/16
 7fa:	81 e5       	ldi	r24, 0x51	; 81
 7fc:	8c bd       	out	0x2c, r24	; 44
 7fe:	08 95       	ret

00000800 <spi_transfer_byte>:

/*Transfers a single byte between master and slave*/

void spi_transfer_byte(uint8_t* bout, uint8_t* bin)
{
	DATAREG = *bout;
 800:	fc 01       	movw	r30, r24
 802:	80 81       	ld	r24, Z
 804:	8e bd       	out	0x2e, r24	; 46
	while(! SPI_BYTE_XFER_DONE)
 806:	0d b4       	in	r0, 0x2d	; 45
 808:	07 fe       	sbrs	r0, 7
 80a:	fd cf       	rjmp	.-6      	; 0x806 <spi_transfer_byte+0x6>
		USICR = usi_clk_lo;
		USICR = usi_clk_hi;
		#endif
	} 
	/*Incoming data out of data register*/
	*bin = DATAREG;
 80c:	8e b5       	in	r24, 0x2e	; 46
 80e:	fb 01       	movw	r30, r22
 810:	80 83       	st	Z, r24
 812:	08 95       	ret

00000814 <spi_transfer_nbytes>:
}

/*Selects the slave (cs)  and transfers n bytes. The input and output buffers must be defined and contain at least n bytes each*/

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
 814:	cf 92       	push	r12
 816:	df 92       	push	r13
 818:	ef 92       	push	r14
 81a:	ff 92       	push	r15
 81c:	0f 93       	push	r16
 81e:	1f 93       	push	r17
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	ec 01       	movw	r28, r24
 826:	8b 01       	movw	r16, r22
	
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
 828:	85 b1       	in	r24, 0x05	; 5
 82a:	61 e0       	ldi	r22, 0x01	; 1
 82c:	70 e0       	ldi	r23, 0x00	; 0
 82e:	6b 01       	movw	r12, r22
 830:	02 c0       	rjmp	.+4      	; 0x836 <spi_transfer_nbytes+0x22>
 832:	cc 0c       	add	r12, r12
 834:	dd 1c       	adc	r13, r13
 836:	2a 95       	dec	r18
 838:	e2 f7       	brpl	.-8      	; 0x832 <spi_transfer_nbytes+0x1e>
 83a:	9c 2d       	mov	r25, r12
 83c:	90 95       	com	r25
 83e:	89 23       	and	r24, r25
 840:	85 b9       	out	0x05, r24	; 5
	while(n)
 842:	44 23       	and	r20, r20
 844:	89 f0       	breq	.+34     	; 0x868 <spi_transfer_nbytes+0x54>
 846:	41 50       	subi	r20, 0x01	; 1
 848:	e4 2e       	mov	r14, r20
 84a:	f1 2c       	mov	r15, r1
 84c:	8f ef       	ldi	r24, 0xFF	; 255
 84e:	e8 1a       	sub	r14, r24
 850:	f8 0a       	sbc	r15, r24
 852:	ec 0e       	add	r14, r28
 854:	fd 1e       	adc	r15, r29
	{
		
		spi_transfer_byte(out,in);    /*transfer byte */
 856:	b8 01       	movw	r22, r16
 858:	ce 01       	movw	r24, r28
 85a:	d2 df       	rcall	.-92     	; 0x800 <spi_transfer_byte>

		/*advance iterators*/
		out = out + 1;
 85c:	21 96       	adiw	r28, 0x01	; 1
		in = in + 1;
 85e:	0f 5f       	subi	r16, 0xFF	; 255
 860:	1f 4f       	sbci	r17, 0xFF	; 255

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
	
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
	while(n)
 862:	ec 16       	cp	r14, r28
 864:	fd 06       	cpc	r15, r29
 866:	b9 f7       	brne	.-18     	; 0x856 <spi_transfer_nbytes+0x42>
		/*advance iterators*/
		out = out + 1;
		in = in + 1;
		n = n - 1;
	}
	CS_PORT |= 1<<cs;/*Deselect slave chip*/
 868:	85 b1       	in	r24, 0x05	; 5
 86a:	c8 2a       	or	r12, r24
 86c:	c5 b8       	out	0x05, r12	; 5
}
 86e:	df 91       	pop	r29
 870:	cf 91       	pop	r28
 872:	1f 91       	pop	r17
 874:	0f 91       	pop	r16
 876:	ff 90       	pop	r15
 878:	ef 90       	pop	r14
 87a:	df 90       	pop	r13
 87c:	cf 90       	pop	r12
 87e:	08 95       	ret

00000880 <memcpy>:
 880:	fb 01       	movw	r30, r22
 882:	dc 01       	movw	r26, r24
 884:	02 c0       	rjmp	.+4      	; 0x88a <memcpy+0xa>
 886:	01 90       	ld	r0, Z+
 888:	0d 92       	st	X+, r0
 88a:	41 50       	subi	r20, 0x01	; 1
 88c:	50 40       	sbci	r21, 0x00	; 0
 88e:	d8 f7       	brcc	.-10     	; 0x886 <memcpy+0x6>
 890:	08 95       	ret

00000892 <_exit>:
 892:	f8 94       	cli

00000894 <__stop_program>:
 894:	ff cf       	rjmp	.-2      	; 0x894 <__stop_program>
