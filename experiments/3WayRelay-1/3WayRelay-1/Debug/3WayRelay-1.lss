
3WayRelay-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000894  00000928  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000894  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015c  00800102  00800102  0000092a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000092a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000095c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025df  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4d  00000000  00000000  000031a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f40  00000000  00000000  00003df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  00004d34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000920  00000000  00000000  000052c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000171a  00000000  00000000  00005be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  000072fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	85 c0       	rjmp	.+266    	; 0x10e <__vector_1>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	e4 e9       	ldi	r30, 0x94	; 148
  3c:	f8 e0       	ldi	r31, 0x08	; 8
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a2 30       	cpi	r26, 0x02	; 2
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	22 e0       	ldi	r18, 0x02	; 2
  4c:	a2 e0       	ldi	r26, 0x02	; 2
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	ae 35       	cpi	r26, 0x5E	; 94
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	9d d1       	rcall	.+826    	; 0x396 <main>
  5c:	19 c4       	rjmp	.+2098   	; 0x890 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <bytes_to_word>:
uint16_t bytes_to_word(uint8_t* b)
{
    uint16_t hi = (uint16_t) b[0];
    uint16_t lo = (uint16_t) b[1];

    return (hi << 8) | lo;
  60:	fc 01       	movw	r30, r24
  62:	20 81       	ld	r18, Z
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	32 2f       	mov	r19, r18
  68:	22 27       	eor	r18, r18
  6a:	81 81       	ldd	r24, Z+1	; 0x01
}
  6c:	a9 01       	movw	r20, r18
  6e:	48 2b       	or	r20, r24
  70:	ca 01       	movw	r24, r20
  72:	08 95       	ret

00000074 <word_to_bytes>:

void word_to_bytes(uint8_t* b, uint16_t d)
{
    b[0] = (uint8_t)(d >> 8);
  74:	fc 01       	movw	r30, r24
  76:	70 83       	st	Z, r23
    b[1] = (uint8_t)(255 & d);
  78:	61 83       	std	Z+1, r22	; 0x01
  7a:	08 95       	ret

0000007c <handle_tx>:
	running_status &= ~(1<<RU_RX_HANDLE);
}


void loop()
{
  7c:	08 95       	ret

0000007e <setup>:
  7e:	55 9a       	sbi	0x0a, 5	; 10
  80:	56 9a       	sbi	0x0a, 6	; 10
  82:	57 9a       	sbi	0x0a, 7	; 10
  84:	85 b1       	in	r24, 0x05	; 5
  86:	8c 6e       	ori	r24, 0xEC	; 236
  88:	85 b9       	out	0x05, r24	; 5
  8a:	84 b1       	in	r24, 0x04	; 4
  8c:	8c 6e       	ori	r24, 0xEC	; 236
  8e:	84 b9       	out	0x04, r24	; 4
  90:	24 98       	cbi	0x04, 4	; 4
  92:	b2 d3       	rcall	.+1892   	; 0x7f8 <spi_setup>
  94:	87 d1       	rcall	.+782    	; 0x3a4 <mrf_reset>
  96:	91 d2       	rcall	.+1314   	; 0x5ba <mrf_init>
  98:	8e ef       	ldi	r24, 0xFE	; 254
  9a:	9a ec       	ldi	r25, 0xCA	; 202
  9c:	f1 d1       	rcall	.+994    	; 0x480 <mrf_set_pan>
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	f8 d1       	rcall	.+1008   	; 0x494 <mrf_address16_write>
  a4:	78 94       	sei
  a6:	e8 9a       	sbi	0x1d, 0	; 29
  a8:	e9 e6       	ldi	r30, 0x69	; 105
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
  b2:	82 e3       	ldi	r24, 0x32	; 50
  b4:	92 e0       	ldi	r25, 0x02	; 2
  b6:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <transmit_command_header+0x1>
  ba:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <transmit_command_header>
  be:	8a e0       	ldi	r24, 0x0A	; 10
  c0:	92 e0       	ldi	r25, 0x02	; 2
  c2:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <recieved_command_header+0x1>
  c6:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <recieved_command_header>
  ca:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <neighbor_status>
  ce:	8a e0       	ldi	r24, 0x0A	; 10
  d0:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <command_status>
  d4:	88 e2       	ldi	r24, 0x28	; 40
  d6:	ea e2       	ldi	r30, 0x2A	; 42
  d8:	f2 e0       	ldi	r31, 0x02	; 2
  da:	df 01       	movw	r26, r30
  dc:	98 2f       	mov	r25, r24
  de:	1d 92       	st	X+, r1
  e0:	9a 95       	dec	r25
  e2:	e9 f7       	brne	.-6      	; 0xde <setup+0x60>
  e4:	e2 e0       	ldi	r30, 0x02	; 2
  e6:	f2 e0       	ldi	r31, 0x02	; 2
  e8:	df 01       	movw	r26, r30
  ea:	1d 92       	st	X+, r1
  ec:	8a 95       	dec	r24
  ee:	e9 f7       	brne	.-6      	; 0xea <setup+0x6c>
  f0:	5f 9a       	sbi	0x0b, 7	; 11
  f2:	8f e4       	ldi	r24, 0x4F	; 79
  f4:	93 ec       	ldi	r25, 0xC3	; 195
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <setup+0x78>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <setup+0x7e>
  fc:	00 00       	nop
  fe:	5f 98       	cbi	0x0b, 7	; 11
 100:	af e4       	ldi	r26, 0x4F	; 79
 102:	b3 ec       	ldi	r27, 0xC3	; 195
 104:	11 97       	sbiw	r26, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <setup+0x86>
 108:	00 c0       	rjmp	.+0      	; 0x10a <setup+0x8c>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <__vector_1>:
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
 130:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 134:	80 61       	ori	r24, 0x10	; 16
 136:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 13a:	aa d2       	rcall	.+1364   	; 0x690 <mrf_interrupt_handler>
 13c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 140:	8f 7e       	andi	r24, 0xEF	; 239
 142:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	7f 91       	pop	r23
 154:	6f 91       	pop	r22
 156:	5f 91       	pop	r21
 158:	4f 91       	pop	r20
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <send_message>:
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	8c 01       	movw	r16, r24
 172:	eb 01       	movw	r28, r22
 174:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <PAN_ID>
 178:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <PAN_ID+0x1>
 17c:	ce 01       	movw	r24, r28
 17e:	17 d3       	rcall	.+1582   	; 0x7ae <Pk_Set_Dest_Panid>
 180:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <PAN_ID>
 184:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <PAN_ID+0x1>
 188:	ce 01       	movw	r24, r28
 18a:	13 d3       	rcall	.+1574   	; 0x7b2 <Pk_Set_Src_Panid>
 18c:	68 e2       	ldi	r22, 0x28	; 40
 18e:	ce 01       	movw	r24, r28
 190:	13 d3       	rcall	.+1574   	; 0x7b8 <Pk_Set_Packet_Size>
 192:	b8 01       	movw	r22, r16
 194:	ce 01       	movw	r24, r28
 196:	13 d3       	rcall	.+1574   	; 0x7be <Pk_Set_Target_Node>
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	ce 01       	movw	r24, r28
 19c:	26 d3       	rcall	.+1612   	; 0x7ea <Pk_Set_Src_Node>
 19e:	48 e2       	ldi	r20, 0x28	; 40
 1a0:	be 01       	movw	r22, r28
 1a2:	c8 01       	movw	r24, r16
 1a4:	90 d1       	rcall	.+800    	; 0x4c6 <mrf_send16>
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	08 95       	ret

000001b0 <get_data>:
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	7c 01       	movw	r14, r24
 1bc:	eb 01       	movw	r28, r22
 1be:	5e 9a       	sbi	0x0b, 6	; 11
 1c0:	8f e4       	ldi	r24, 0x4F	; 79
 1c2:	93 ec       	ldi	r25, 0xC3	; 195
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <get_data+0x14>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <get_data+0x1a>
 1ca:	00 00       	nop
 1cc:	5e 98       	cbi	0x0b, 6	; 11
 1ce:	8f e4       	ldi	r24, 0x4F	; 79
 1d0:	93 ec       	ldi	r25, 0xC3	; 195
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <get_data+0x22>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <get_data+0x28>
 1d8:	00 00       	nop
 1da:	04 e0       	ldi	r16, 0x04	; 4
 1dc:	23 e0       	ldi	r18, 0x03	; 3
 1de:	42 e0       	ldi	r20, 0x02	; 2
 1e0:	61 e4       	ldi	r22, 0x41	; 65
 1e2:	74 e4       	ldi	r23, 0x44	; 68
 1e4:	ce 01       	movw	r24, r28
 1e6:	ee d2       	rcall	.+1500   	; 0x7c4 <Pk_Set_Command>
 1e8:	be 01       	movw	r22, r28
 1ea:	c7 01       	movw	r24, r14
 1ec:	bd df       	rcall	.-134    	; 0x168 <send_message>
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	0f 91       	pop	r16
 1f4:	ff 90       	pop	r15
 1f6:	ef 90       	pop	r14
 1f8:	08 95       	ret

000001fa <forward_data>:
 1fa:	ef 92       	push	r14
 1fc:	ff 92       	push	r15
 1fe:	0f 93       	push	r16
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	7c 01       	movw	r14, r24
 206:	eb 01       	movw	r28, r22
 208:	04 e0       	ldi	r16, 0x04	; 4
 20a:	23 e0       	ldi	r18, 0x03	; 3
 20c:	42 e0       	ldi	r20, 0x02	; 2
 20e:	6e ec       	ldi	r22, 0xCE	; 206
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	ce 01       	movw	r24, r28
 214:	d7 d2       	rcall	.+1454   	; 0x7c4 <Pk_Set_Command>
 216:	be 01       	movw	r22, r28
 218:	c7 01       	movw	r24, r14
 21a:	a6 df       	rcall	.-180    	; 0x168 <send_message>
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	08 95       	ret

00000228 <COMMAND_HANDLER>:
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	8c 01       	movw	r16, r24
 232:	5d 9a       	sbi	0x0b, 5	; 11
 234:	8f e4       	ldi	r24, 0x4F	; 79
 236:	93 ec       	ldi	r25, 0xC3	; 195
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <COMMAND_HANDLER+0x10>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <COMMAND_HANDLER+0x16>
 23e:	00 00       	nop
 240:	5d 98       	cbi	0x0b, 5	; 11
 242:	ef e4       	ldi	r30, 0x4F	; 79
 244:	f3 ec       	ldi	r31, 0xC3	; 195
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <COMMAND_HANDLER+0x1e>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <COMMAND_HANDLER+0x24>
 24c:	00 00       	nop
 24e:	e8 01       	movw	r28, r16
 250:	2a 96       	adiw	r28, 0x0a	; 10
 252:	ce 01       	movw	r24, r28
 254:	05 df       	rcall	.-502    	; 0x60 <bytes_to_word>
 256:	82 35       	cpi	r24, 0x52	; 82
 258:	95 44       	sbci	r25, 0x45	; 69
 25a:	f1 f4       	brne	.+60     	; 0x298 <COMMAND_HANDLER+0x70>
 25c:	c8 01       	movw	r24, r16
 25e:	06 96       	adiw	r24, 0x06	; 6
 260:	ff de       	rcall	.-514    	; 0x60 <bytes_to_word>
 262:	82 34       	cpi	r24, 0x42	; 66
 264:	91 43       	sbci	r25, 0x31	; 49
 266:	c1 f4       	brne	.+48     	; 0x298 <COMMAND_HANDLER+0x70>
 268:	5e 9a       	sbi	0x0b, 6	; 11
 26a:	8f e4       	ldi	r24, 0x4F	; 79
 26c:	93 ec       	ldi	r25, 0xC3	; 195
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <COMMAND_HANDLER+0x46>
 272:	00 c0       	rjmp	.+0      	; 0x274 <COMMAND_HANDLER+0x4c>
 274:	00 00       	nop
 276:	5e 98       	cbi	0x0b, 6	; 11
 278:	ef e4       	ldi	r30, 0x4F	; 79
 27a:	f3 ec       	ldi	r31, 0xC3	; 195
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <COMMAND_HANDLER+0x54>
 280:	00 c0       	rjmp	.+0      	; 0x282 <COMMAND_HANDLER+0x5a>
 282:	00 00       	nop
 284:	6a e2       	ldi	r22, 0x2A	; 42
 286:	72 e0       	ldi	r23, 0x02	; 2
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	91 df       	rcall	.-222    	; 0x1b0 <get_data>
 28e:	88 e2       	ldi	r24, 0x28	; 40
 290:	f8 01       	movw	r30, r16
 292:	11 92       	st	Z+, r1
 294:	8a 95       	dec	r24
 296:	e9 f7       	brne	.-6      	; 0x292 <COMMAND_HANDLER+0x6a>
 298:	ce 01       	movw	r24, r28
 29a:	e2 de       	rcall	.-572    	; 0x60 <bytes_to_word>
 29c:	8e 3c       	cpi	r24, 0xCE	; 206
 29e:	91 05       	cpc	r25, r1
 2a0:	29 f5       	brne	.+74     	; 0x2ec <COMMAND_HANDLER+0xc4>
 2a2:	5d 9a       	sbi	0x0b, 5	; 11
 2a4:	8f e4       	ldi	r24, 0x4F	; 79
 2a6:	93 ec       	ldi	r25, 0xC3	; 195
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <COMMAND_HANDLER+0x80>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <COMMAND_HANDLER+0x86>
 2ae:	00 00       	nop
 2b0:	5d 98       	cbi	0x0b, 5	; 11
 2b2:	ef e4       	ldi	r30, 0x4F	; 79
 2b4:	f3 ec       	ldi	r31, 0xC3	; 195
 2b6:	31 97       	sbiw	r30, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <COMMAND_HANDLER+0x8e>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <COMMAND_HANDLER+0x94>
 2bc:	00 00       	nop
 2be:	5e 9a       	sbi	0x0b, 6	; 11
 2c0:	8f e4       	ldi	r24, 0x4F	; 79
 2c2:	93 ec       	ldi	r25, 0xC3	; 195
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <COMMAND_HANDLER+0x9c>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <COMMAND_HANDLER+0xa2>
 2ca:	00 00       	nop
 2cc:	5e 98       	cbi	0x0b, 6	; 11
 2ce:	ef e4       	ldi	r30, 0x4F	; 79
 2d0:	f3 ec       	ldi	r31, 0xC3	; 195
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <COMMAND_HANDLER+0xaa>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <COMMAND_HANDLER+0xb0>
 2d8:	00 00       	nop
 2da:	b8 01       	movw	r22, r16
 2dc:	82 e4       	ldi	r24, 0x42	; 66
 2de:	91 e3       	ldi	r25, 0x31	; 49
 2e0:	8c df       	rcall	.-232    	; 0x1fa <forward_data>
 2e2:	88 e2       	ldi	r24, 0x28	; 40
 2e4:	f8 01       	movw	r30, r16
 2e6:	11 92       	st	Z+, r1
 2e8:	8a 95       	dec	r24
 2ea:	e9 f7       	brne	.-6      	; 0x2e6 <COMMAND_HANDLER+0xbe>
 2ec:	ce 01       	movw	r24, r28
 2ee:	b8 de       	rcall	.-656    	; 0x60 <bytes_to_word>
 2f0:	81 34       	cpi	r24, 0x41	; 65
 2f2:	94 44       	sbci	r25, 0x44	; 68
 2f4:	f1 f4       	brne	.+60     	; 0x332 <__stack+0x33>
 2f6:	5e 9a       	sbi	0x0b, 6	; 11
 2f8:	8f e4       	ldi	r24, 0x4F	; 79
 2fa:	93 ec       	ldi	r25, 0xC3	; 195
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <COMMAND_HANDLER+0xd4>
 300:	00 c0       	rjmp	.+0      	; 0x302 <__stack+0x3>
 302:	00 00       	nop
 304:	5e 98       	cbi	0x0b, 6	; 11
 306:	ef e4       	ldi	r30, 0x4F	; 79
 308:	f3 ec       	ldi	r31, 0xC3	; 195
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <__stack+0xb>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <__stack+0x11>
 310:	00 00       	nop
 312:	65 e5       	ldi	r22, 0x55	; 85
 314:	75 e5       	ldi	r23, 0x55	; 85
 316:	8a e2       	ldi	r24, 0x2A	; 42
 318:	92 e0       	ldi	r25, 0x02	; 2
 31a:	6b d2       	rcall	.+1238   	; 0x7f2 <Pk_Add_Data>
 31c:	c8 01       	movw	r24, r16
 31e:	06 96       	adiw	r24, 0x06	; 6
 320:	9f de       	rcall	.-706    	; 0x60 <bytes_to_word>
 322:	6a e2       	ldi	r22, 0x2A	; 42
 324:	72 e0       	ldi	r23, 0x02	; 2
 326:	69 df       	rcall	.-302    	; 0x1fa <forward_data>
 328:	88 e2       	ldi	r24, 0x28	; 40
 32a:	f8 01       	movw	r30, r16
 32c:	11 92       	st	Z+, r1
 32e:	8a 95       	dec	r24
 330:	e9 f7       	brne	.-6      	; 0x32c <__stack+0x2d>
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	08 95       	ret

0000033c <handle_rx>:
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 344:	88 60       	ori	r24, 0x08	; 8
 346:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 34a:	95 d1       	rcall	.+810    	; 0x676 <mrf_rx_datalength>
 34c:	ec 01       	movw	r28, r24
 34e:	2c d2       	rcall	.+1112   	; 0x7a8 <mrf_get_rxdata>
 350:	ae 01       	movw	r20, r28
 352:	bc 01       	movw	r22, r24
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	92 e0       	ldi	r25, 0x02	; 2
 358:	92 d2       	rcall	.+1316   	; 0x87e <memcpy>
 35a:	84 e0       	ldi	r24, 0x04	; 4
 35c:	92 e0       	ldi	r25, 0x02	; 2
 35e:	80 de       	rcall	.-768    	; 0x60 <bytes_to_word>
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	89 f4       	brne	.+34     	; 0x386 <handle_rx+0x4a>
 364:	5f 9a       	sbi	0x0b, 7	; 11
 366:	8f e4       	ldi	r24, 0x4F	; 79
 368:	93 ec       	ldi	r25, 0xC3	; 195
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <handle_rx+0x2e>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <handle_rx+0x34>
 370:	00 00       	nop
 372:	5f 98       	cbi	0x0b, 7	; 11
 374:	8f e4       	ldi	r24, 0x4F	; 79
 376:	93 ec       	ldi	r25, 0xC3	; 195
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <handle_rx+0x3c>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <handle_rx+0x42>
 37e:	00 00       	nop
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	92 e0       	ldi	r25, 0x02	; 2
 384:	51 df       	rcall	.-350    	; 0x228 <COMMAND_HANDLER>
 386:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 38a:	87 7f       	andi	r24, 0xF7	; 247
 38c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <main>:
	
}
int main(void)
{
	setup();
 396:	73 de       	rcall	.-794    	; 0x7e <setup>
    while (1) 
    {
		mrf_check_flags(&handle_rx,&handle_tx);
 398:	6e e3       	ldi	r22, 0x3E	; 62
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	8e e9       	ldi	r24, 0x9E	; 158
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	50 d1       	rcall	.+672    	; 0x642 <mrf_check_flags>
 3a2:	fa cf       	rjmp	.-12     	; 0x398 <main+0x2>

000003a4 <mrf_reset>:
        mrf_write_long(MRF_TESTMODE, 0x00); // Disable PA/LNA on MRF24J40MB module.
    }
}

void mrf_rx_flush(void) {
    mrf_write_short(MRF_RXFLUSH, 0x01);
 3a4:	59 98       	cbi	0x0b, 1	; 11
 3a6:	87 ea       	ldi	r24, 0xA7	; 167
 3a8:	91 e6       	ldi	r25, 0x61	; 97
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <mrf_reset+0x6>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <mrf_reset+0xc>
 3b0:	00 00       	nop
 3b2:	59 9a       	sbi	0x0b, 1	; 11
 3b4:	83 e2       	ldi	r24, 0x23	; 35
 3b6:	94 ef       	ldi	r25, 0xF4	; 244
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <mrf_reset+0x14>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <mrf_reset+0x1a>
 3be:	00 00       	nop
 3c0:	08 95       	ret

000003c2 <mrf_read_short>:
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	c3 e0       	ldi	r28, 0x03	; 3
 3c8:	d1 e0       	ldi	r29, 0x01	; 1
 3ca:	88 0f       	add	r24, r24
 3cc:	8e 77       	andi	r24, 0x7E	; 126
 3ce:	88 83       	st	Y, r24
 3d0:	19 82       	std	Y+1, r1	; 0x01
 3d2:	26 e0       	ldi	r18, 0x06	; 6
 3d4:	42 e0       	ldi	r20, 0x02	; 2
 3d6:	be 01       	movw	r22, r28
 3d8:	ce 01       	movw	r24, r28
 3da:	1b d2       	rcall	.+1078   	; 0x812 <spi_transfer_nbytes>
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <mrf_read_long>:
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	c3 e0       	ldi	r28, 0x03	; 3
 3ea:	d1 e0       	ldi	r29, 0x01	; 1
 3ec:	9c 01       	movw	r18, r24
 3ee:	36 95       	lsr	r19
 3f0:	27 95       	ror	r18
 3f2:	36 95       	lsr	r19
 3f4:	27 95       	ror	r18
 3f6:	36 95       	lsr	r19
 3f8:	27 95       	ror	r18
 3fa:	20 68       	ori	r18, 0x80	; 128
 3fc:	28 83       	st	Y, r18
 3fe:	82 95       	swap	r24
 400:	88 0f       	add	r24, r24
 402:	80 7e       	andi	r24, 0xE0	; 224
 404:	89 83       	std	Y+1, r24	; 0x01
 406:	1a 82       	std	Y+2, r1	; 0x02
 408:	26 e0       	ldi	r18, 0x06	; 6
 40a:	43 e0       	ldi	r20, 0x03	; 3
 40c:	be 01       	movw	r22, r28
 40e:	ce 01       	movw	r24, r28
 410:	00 d2       	rcall	.+1024   	; 0x812 <spi_transfer_nbytes>
 412:	8a 81       	ldd	r24, Y+2	; 0x02
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <mrf_write_short>:
 41a:	e3 e0       	ldi	r30, 0x03	; 3
 41c:	f1 e0       	ldi	r31, 0x01	; 1
 41e:	88 0f       	add	r24, r24
 420:	8e 77       	andi	r24, 0x7E	; 126
 422:	81 60       	ori	r24, 0x01	; 1
 424:	80 83       	st	Z, r24
 426:	61 83       	std	Z+1, r22	; 0x01
 428:	26 e0       	ldi	r18, 0x06	; 6
 42a:	42 e0       	ldi	r20, 0x02	; 2
 42c:	bf 01       	movw	r22, r30
 42e:	cf 01       	movw	r24, r30
 430:	f0 d1       	rcall	.+992    	; 0x812 <spi_transfer_nbytes>
 432:	08 95       	ret

00000434 <mrf_write_long>:
 434:	e3 e0       	ldi	r30, 0x03	; 3
 436:	f1 e0       	ldi	r31, 0x01	; 1
 438:	9c 01       	movw	r18, r24
 43a:	36 95       	lsr	r19
 43c:	27 95       	ror	r18
 43e:	36 95       	lsr	r19
 440:	27 95       	ror	r18
 442:	36 95       	lsr	r19
 444:	27 95       	ror	r18
 446:	20 68       	ori	r18, 0x80	; 128
 448:	20 83       	st	Z, r18
 44a:	82 95       	swap	r24
 44c:	88 0f       	add	r24, r24
 44e:	80 7e       	andi	r24, 0xE0	; 224
 450:	80 61       	ori	r24, 0x10	; 16
 452:	81 83       	std	Z+1, r24	; 0x01
 454:	62 83       	std	Z+2, r22	; 0x02
 456:	26 e0       	ldi	r18, 0x06	; 6
 458:	43 e0       	ldi	r20, 0x03	; 3
 45a:	bf 01       	movw	r22, r30
 45c:	cf 01       	movw	r24, r30
 45e:	d9 d1       	rcall	.+946    	; 0x812 <spi_transfer_nbytes>
 460:	08 95       	ret

00000462 <mrf_get_pan>:
 462:	cf 93       	push	r28
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	ad df       	rcall	.-166    	; 0x3c2 <mrf_read_short>
 468:	c8 2f       	mov	r28, r24
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	aa df       	rcall	.-172    	; 0x3c2 <mrf_read_short>
 46e:	2c 2f       	mov	r18, r28
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	32 2f       	mov	r19, r18
 474:	22 27       	eor	r18, r18
 476:	a9 01       	movw	r20, r18
 478:	48 2b       	or	r20, r24
 47a:	ca 01       	movw	r24, r20
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <mrf_set_pan>:
 480:	cf 93       	push	r28
 482:	c8 2f       	mov	r28, r24
 484:	69 2f       	mov	r22, r25
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	c8 df       	rcall	.-112    	; 0x41a <mrf_write_short>
 48a:	6c 2f       	mov	r22, r28
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	c5 df       	rcall	.-118    	; 0x41a <mrf_write_short>
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <mrf_address16_write>:
 494:	cf 93       	push	r28
 496:	c8 2f       	mov	r28, r24
 498:	69 2f       	mov	r22, r25
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	be df       	rcall	.-132    	; 0x41a <mrf_write_short>
 49e:	6c 2f       	mov	r22, r28
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	bb df       	rcall	.-138    	; 0x41a <mrf_write_short>
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <mrf_address16_read>:
 4a8:	cf 93       	push	r28
 4aa:	84 e0       	ldi	r24, 0x04	; 4
 4ac:	8a df       	rcall	.-236    	; 0x3c2 <mrf_read_short>
 4ae:	c8 2f       	mov	r28, r24
 4b0:	83 e0       	ldi	r24, 0x03	; 3
 4b2:	87 df       	rcall	.-242    	; 0x3c2 <mrf_read_short>
 4b4:	2c 2f       	mov	r18, r28
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	32 2f       	mov	r19, r18
 4ba:	22 27       	eor	r18, r18
 4bc:	a9 01       	movw	r20, r18
 4be:	48 2b       	or	r20, r24
 4c0:	ca 01       	movw	r24, r20
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <mrf_send16>:
 4c6:	bf 92       	push	r11
 4c8:	cf 92       	push	r12
 4ca:	df 92       	push	r13
 4cc:	ef 92       	push	r14
 4ce:	ff 92       	push	r15
 4d0:	0f 93       	push	r16
 4d2:	1f 93       	push	r17
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	d8 2f       	mov	r29, r24
 4da:	c9 2f       	mov	r28, r25
 4dc:	7b 01       	movw	r14, r22
 4de:	b4 2e       	mov	r11, r20
 4e0:	69 e0       	ldi	r22, 0x09	; 9
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	a6 df       	rcall	.-180    	; 0x434 <mrf_write_long>
 4e8:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <ignoreBytes>
 4ec:	67 5f       	subi	r22, 0xF7	; 247
 4ee:	6b 0d       	add	r22, r11
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	9f df       	rcall	.-194    	; 0x434 <mrf_write_long>
 4f6:	61 e6       	ldi	r22, 0x61	; 97
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	9b df       	rcall	.-202    	; 0x434 <mrf_write_long>
 4fe:	68 e8       	ldi	r22, 0x88	; 136
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	97 df       	rcall	.-210    	; 0x434 <mrf_write_long>
 506:	61 e0       	ldi	r22, 0x01	; 1
 508:	84 e0       	ldi	r24, 0x04	; 4
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	93 df       	rcall	.-218    	; 0x434 <mrf_write_long>
 50e:	a9 df       	rcall	.-174    	; 0x462 <mrf_get_pan>
 510:	19 2f       	mov	r17, r25
 512:	68 2f       	mov	r22, r24
 514:	85 e0       	ldi	r24, 0x05	; 5
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	8d df       	rcall	.-230    	; 0x434 <mrf_write_long>
 51a:	61 2f       	mov	r22, r17
 51c:	86 e0       	ldi	r24, 0x06	; 6
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	89 df       	rcall	.-238    	; 0x434 <mrf_write_long>
 522:	6d 2f       	mov	r22, r29
 524:	87 e0       	ldi	r24, 0x07	; 7
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	85 df       	rcall	.-246    	; 0x434 <mrf_write_long>
 52a:	6c 2f       	mov	r22, r28
 52c:	88 e0       	ldi	r24, 0x08	; 8
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	81 df       	rcall	.-254    	; 0x434 <mrf_write_long>
 532:	ba df       	rcall	.-140    	; 0x4a8 <mrf_address16_read>
 534:	c9 2f       	mov	r28, r25
 536:	68 2f       	mov	r22, r24
 538:	89 e0       	ldi	r24, 0x09	; 9
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	7b df       	rcall	.-266    	; 0x434 <mrf_write_long>
 53e:	6c 2f       	mov	r22, r28
 540:	8a e0       	ldi	r24, 0x0A	; 10
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	77 df       	rcall	.-274    	; 0x434 <mrf_write_long>
 546:	c0 90 7e 01 	lds	r12, 0x017E	; 0x80017e <ignoreBytes>
 54a:	d0 90 7f 01 	lds	r13, 0x017F	; 0x80017f <ignoreBytes+0x1>
 54e:	8b e0       	ldi	r24, 0x0B	; 11
 550:	c8 0e       	add	r12, r24
 552:	d1 1c       	adc	r13, r1
 554:	bb 20       	and	r11, r11
 556:	61 f0       	breq	.+24     	; 0x570 <mrf_send16+0xaa>
 558:	86 01       	movw	r16, r12
 55a:	e7 01       	movw	r28, r14
 55c:	eb 0c       	add	r14, r11
 55e:	f1 1c       	adc	r15, r1
 560:	69 91       	ld	r22, Y+
 562:	c8 01       	movw	r24, r16
 564:	67 df       	rcall	.-306    	; 0x434 <mrf_write_long>
 566:	0f 5f       	subi	r16, 0xFF	; 255
 568:	1f 4f       	sbci	r17, 0xFF	; 255
 56a:	ce 15       	cp	r28, r14
 56c:	df 05       	cpc	r29, r15
 56e:	c1 f7       	brne	.-16     	; 0x560 <mrf_send16+0x9a>
 570:	6b 2d       	mov	r22, r11
 572:	c6 01       	movw	r24, r12
 574:	5f df       	rcall	.-322    	; 0x434 <mrf_write_long>
 576:	65 e0       	ldi	r22, 0x05	; 5
 578:	8b e1       	ldi	r24, 0x1B	; 27
 57a:	4f df       	rcall	.-354    	; 0x41a <mrf_write_short>
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	1f 91       	pop	r17
 582:	0f 91       	pop	r16
 584:	ff 90       	pop	r15
 586:	ef 90       	pop	r14
 588:	df 90       	pop	r13
 58a:	cf 90       	pop	r12
 58c:	bf 90       	pop	r11
 58e:	08 95       	ret

00000590 <mrf_set_interrupts>:
 590:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <isr_lock>
 594:	66 ef       	ldi	r22, 0xF6	; 246
 596:	82 e3       	ldi	r24, 0x32	; 50
 598:	40 df       	rcall	.-384    	; 0x41a <mrf_write_short>
 59a:	08 95       	ret

0000059c <mrf_set_channel>:
 59c:	68 2f       	mov	r22, r24
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	6b 50       	subi	r22, 0x0B	; 11
 5a2:	71 09       	sbc	r23, r1
 5a4:	62 95       	swap	r22
 5a6:	72 95       	swap	r23
 5a8:	70 7f       	andi	r23, 0xF0	; 240
 5aa:	76 27       	eor	r23, r22
 5ac:	60 7f       	andi	r22, 0xF0	; 240
 5ae:	76 27       	eor	r23, r22
 5b0:	63 60       	ori	r22, 0x03	; 3
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	92 e0       	ldi	r25, 0x02	; 2
 5b6:	3e df       	rcall	.-388    	; 0x434 <mrf_write_long>
 5b8:	08 95       	ret

000005ba <mrf_init>:
 5ba:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <mrf_flags>
 5be:	67 e0       	ldi	r22, 0x07	; 7
 5c0:	8a e2       	ldi	r24, 0x2A	; 42
 5c2:	2b df       	rcall	.-426    	; 0x41a <mrf_write_short>
 5c4:	68 e9       	ldi	r22, 0x98	; 152
 5c6:	88 e1       	ldi	r24, 0x18	; 24
 5c8:	28 df       	rcall	.-432    	; 0x41a <mrf_write_short>
 5ca:	65 e9       	ldi	r22, 0x95	; 149
 5cc:	8e e2       	ldi	r24, 0x2E	; 46
 5ce:	25 df       	rcall	.-438    	; 0x41a <mrf_write_short>
 5d0:	63 e0       	ldi	r22, 0x03	; 3
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	92 e0       	ldi	r25, 0x02	; 2
 5d6:	2e df       	rcall	.-420    	; 0x434 <mrf_write_long>
 5d8:	61 e0       	ldi	r22, 0x01	; 1
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	92 e0       	ldi	r25, 0x02	; 2
 5de:	2a df       	rcall	.-428    	; 0x434 <mrf_write_long>
 5e0:	60 e8       	ldi	r22, 0x80	; 128
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	92 e0       	ldi	r25, 0x02	; 2
 5e6:	26 df       	rcall	.-436    	; 0x434 <mrf_write_long>
 5e8:	60 e9       	ldi	r22, 0x90	; 144
 5ea:	86 e0       	ldi	r24, 0x06	; 6
 5ec:	92 e0       	ldi	r25, 0x02	; 2
 5ee:	22 df       	rcall	.-444    	; 0x434 <mrf_write_long>
 5f0:	60 e8       	ldi	r22, 0x80	; 128
 5f2:	87 e0       	ldi	r24, 0x07	; 7
 5f4:	92 e0       	ldi	r25, 0x02	; 2
 5f6:	1e df       	rcall	.-452    	; 0x434 <mrf_write_long>
 5f8:	60 e1       	ldi	r22, 0x10	; 16
 5fa:	88 e0       	ldi	r24, 0x08	; 8
 5fc:	92 e0       	ldi	r25, 0x02	; 2
 5fe:	1a df       	rcall	.-460    	; 0x434 <mrf_write_long>
 600:	61 e2       	ldi	r22, 0x21	; 33
 602:	80 e2       	ldi	r24, 0x20	; 32
 604:	92 e0       	ldi	r25, 0x02	; 2
 606:	16 df       	rcall	.-468    	; 0x434 <mrf_write_long>
 608:	60 e8       	ldi	r22, 0x80	; 128
 60a:	8a e3       	ldi	r24, 0x3A	; 58
 60c:	06 df       	rcall	.-500    	; 0x41a <mrf_write_short>
 60e:	60 e6       	ldi	r22, 0x60	; 96
 610:	8f e3       	ldi	r24, 0x3F	; 63
 612:	03 df       	rcall	.-506    	; 0x41a <mrf_write_short>
 614:	60 e4       	ldi	r22, 0x40	; 64
 616:	8e e3       	ldi	r24, 0x3E	; 62
 618:	00 df       	rcall	.-512    	; 0x41a <mrf_write_short>
 61a:	ba df       	rcall	.-140    	; 0x590 <mrf_set_interrupts>
 61c:	84 e1       	ldi	r24, 0x14	; 20
 61e:	be df       	rcall	.-132    	; 0x59c <mrf_set_channel>
 620:	64 e0       	ldi	r22, 0x04	; 4
 622:	86 e3       	ldi	r24, 0x36	; 54
 624:	fa de       	rcall	.-524    	; 0x41a <mrf_write_short>
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	86 e3       	ldi	r24, 0x36	; 54
 62a:	f7 de       	rcall	.-530    	; 0x41a <mrf_write_short>
 62c:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <flag_got_rx>
 630:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <flag_got_tx>
 634:	89 ef       	ldi	r24, 0xF9	; 249
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <mrf_init+0x7e>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <mrf_init+0x84>
 63e:	00 00       	nop
 640:	08 95       	ret

00000642 <mrf_check_flags>:
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <isr_lock>
 64a:	21 11       	cpse	r18, r1
 64c:	11 c0       	rjmp	.+34     	; 0x670 <mrf_check_flags+0x2e>
 64e:	eb 01       	movw	r28, r22
 650:	fc 01       	movw	r30, r24
 652:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <flag_got_rx>
 656:	22 23       	and	r18, r18
 658:	19 f0       	breq	.+6      	; 0x660 <mrf_check_flags+0x1e>
 65a:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <flag_got_rx>
 65e:	09 95       	icall
 660:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <flag_got_tx>
 664:	88 23       	and	r24, r24
 666:	21 f0       	breq	.+8      	; 0x670 <mrf_check_flags+0x2e>
 668:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <flag_got_tx>
 66c:	fe 01       	movw	r30, r28
 66e:	09 95       	icall
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	08 95       	ret

00000676 <mrf_rx_datalength>:
 676:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rx_info>
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0b 97       	sbiw	r24, 0x0b	; 11
 67e:	08 95       	ret

00000680 <mrf_rx_disable>:
}

void mrf_rx_disable(void) {
    mrf_write_short(MRF_BBREG1, 0x04);  // RXDECINV - disable receiver
 680:	64 e0       	ldi	r22, 0x04	; 4
 682:	89 e3       	ldi	r24, 0x39	; 57
 684:	ca de       	rcall	.-620    	; 0x41a <mrf_write_short>
 686:	08 95       	ret

00000688 <mrf_rx_enable>:
}

void mrf_rx_enable(void) {
    mrf_write_short(MRF_BBREG1, 0x00);  // RXDECINV - enable receiver
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	89 e3       	ldi	r24, 0x39	; 57
 68c:	c6 de       	rcall	.-628    	; 0x41a <mrf_write_short>
 68e:	08 95       	ret

00000690 <mrf_interrupt_handler>:
 * Call this from within an interrupt handler connected to the MRFs output
 * interrupt pin.  It handles reading in any data from the module, and letting it
 * continue working.
 * Only the most recent data is ever kept.
 */
void mrf_interrupt_handler(void) {
 690:	af 92       	push	r10
 692:	bf 92       	push	r11
 694:	cf 92       	push	r12
 696:	df 92       	push	r13
 698:	ef 92       	push	r14
 69a:	ff 92       	push	r15
 69c:	0f 93       	push	r16
 69e:	1f 93       	push	r17
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
    //GRAB_ISR_MUTEX;
    isr_lock = 1;
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <isr_lock>
    uint8_t last_interrupt = mrf_read_short(MRF_INTSTAT);
 6aa:	81 e3       	ldi	r24, 0x31	; 49
 6ac:	8a de       	rcall	.-748    	; 0x3c2 <mrf_read_short>
 6ae:	b8 2e       	mov	r11, r24
    if (last_interrupt & MRF_I_RXIF) {
 6b0:	83 ff       	sbrs	r24, 3
 6b2:	4f c0       	rjmp	.+158    	; 0x752 <mrf_interrupt_handler+0xc2>
		//ERROR: This doesn't enter upon reboot until a second message is sent
		//BLINK(LIGHT_PORT,GREEN_LIGHT);
        int i = 0;
        flag_got_rx++;
 6b4:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <flag_got_rx>
 6b8:	8f 5f       	subi	r24, 0xFF	; 255
 6ba:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <flag_got_rx>
        // read out the packet data...
    //    cli();
        mrf_rx_disable();
 6be:	e0 df       	rcall	.-64     	; 0x680 <mrf_rx_disable>
        // read start of rxfifo for, has 2 bytes more added by FCS. frame_length = m + n + 2
        uint8_t frame_length = mrf_read_long(0x300);
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	93 e0       	ldi	r25, 0x03	; 3
 6c4:	8f de       	rcall	.-738    	; 0x3e4 <mrf_read_long>
 6c6:	a8 2e       	mov	r10, r24

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
 6c8:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <mrf_flags>
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 6cc:	ea 2c       	mov	r14, r10
 6ce:	f1 2c       	mov	r15, r1
 6d0:	1e 14       	cp	r1, r14
 6d2:	1f 04       	cpc	r1, r15
 6d4:	9c f4       	brge	.+38     	; 0x6fc <mrf_interrupt_handler+0x6c>
 6d6:	c7 01       	movw	r24, r14
 6d8:	9c 01       	movw	r18, r24
 6da:	20 58       	subi	r18, 0x80	; 128
 6dc:	3e 4f       	sbci	r19, 0xFE	; 254
 6de:	69 01       	movw	r12, r18
 6e0:	c0 e8       	ldi	r28, 0x80	; 128
 6e2:	d1 e0       	ldi	r29, 0x01	; 1
                rx_buf[rb_ptr++] = mrf_read_long(0x301 + i);
 6e4:	01 e0       	ldi	r16, 0x01	; 1
 6e6:	13 e0       	ldi	r17, 0x03	; 3
 6e8:	00 58       	subi	r16, 0x80	; 128
 6ea:	11 40       	sbci	r17, 0x01	; 1
 6ec:	c8 01       	movw	r24, r16
 6ee:	8c 0f       	add	r24, r28
 6f0:	9d 1f       	adc	r25, r29
 6f2:	78 de       	rcall	.-784    	; 0x3e4 <mrf_read_long>
 6f4:	89 93       	st	Y+, r24
        uint8_t frame_length = mrf_read_long(0x300);

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 6f6:	cc 15       	cp	r28, r12
 6f8:	dd 05       	cpc	r29, r13
 6fa:	c1 f7       	brne	.-16     	; 0x6ec <mrf_interrupt_handler+0x5c>
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 6fc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rx_info>
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0b 97       	sbiw	r24, 0x0b	; 11
 704:	18 16       	cp	r1, r24
 706:	19 06       	cpc	r1, r25
 708:	ac f4       	brge	.+42     	; 0x734 <mrf_interrupt_handler+0xa4>
 70a:	c8 e0       	ldi	r28, 0x08	; 8
 70c:	d1 e0       	ldi	r29, 0x01	; 1
 70e:	c1 2c       	mov	r12, r1
 710:	d1 2c       	mov	r13, r1
uint8_t * mrf_get_rxbuf(void) {
    return rx_buf;
}

int mrf_rx_datalength(void) {
    return rx_info.frame_length - bytes_nodata;
 712:	07 e0       	ldi	r16, 0x07	; 7
 714:	11 e0       	ldi	r17, 0x01	; 1

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
 716:	3f ef       	ldi	r19, 0xFF	; 255
 718:	c3 1a       	sub	r12, r19
 71a:	d3 0a       	sbc	r13, r19
 71c:	c6 01       	movw	r24, r12
 71e:	87 5f       	subi	r24, 0xF7	; 247
 720:	9c 4f       	sbci	r25, 0xFC	; 252
 722:	60 de       	rcall	.-832    	; 0x3e4 <mrf_read_long>
 724:	89 93       	st	Y+, r24
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 726:	f8 01       	movw	r30, r16
 728:	80 81       	ld	r24, Z
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0b 97       	sbiw	r24, 0x0b	; 11
 72e:	c8 16       	cp	r12, r24
 730:	d9 06       	cpc	r13, r25
 732:	8c f3       	brlt	.-30     	; 0x716 <mrf_interrupt_handler+0x86>
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
        }

        rx_info.frame_length = frame_length;
 734:	a0 92 07 01 	sts	0x0107, r10	; 0x800107 <rx_info>
        // same as datasheet 0x301 + (m + n + 2) <-- frame_length
        rx_info.lqi = mrf_read_long(0x301 + frame_length);
 738:	c7 01       	movw	r24, r14
 73a:	8f 5f       	subi	r24, 0xFF	; 255
 73c:	9c 4f       	sbci	r25, 0xFC	; 252
 73e:	52 de       	rcall	.-860    	; 0x3e4 <mrf_read_long>
 740:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <rx_info+0x75>
        // same as datasheet 0x301 + (m + n + 3) <-- frame_length + 1
        rx_info.rssi = mrf_read_long(0x301 + frame_length + 1);
 744:	c7 01       	movw	r24, r14
 746:	8e 5f       	subi	r24, 0xFE	; 254
 748:	9c 4f       	sbci	r25, 0xFC	; 252
 74a:	4c de       	rcall	.-872    	; 0x3e4 <mrf_read_long>
 74c:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <rx_info+0x76>

        mrf_rx_enable();
 750:	9b df       	rcall	.-202    	; 0x688 <mrf_rx_enable>
    //    sei();
    }
    if (last_interrupt & MRF_I_TXNIF) {
 752:	b0 fe       	sbrs	r11, 0
 754:	1c c0       	rjmp	.+56     	; 0x78e <mrf_interrupt_handler+0xfe>
        flag_got_tx++;
 756:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <flag_got_tx>
 75a:	8f 5f       	subi	r24, 0xFF	; 255
 75c:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <flag_got_tx>
        mrf_reg_TXSTAT = mrf_read_short(MRF_TXSTAT);
 760:	84 e2       	ldi	r24, 0x24	; 36
 762:	2f de       	rcall	.-930    	; 0x3c2 <mrf_read_short>
 764:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <mrf_reg_TXSTAT>
        // 1 means it failed, we want 1 to mean it worked.
        tx_info.tx_ok = !(mrf_reg_TXSTAT & 0x3F);
 768:	98 2f       	mov	r25, r24
 76a:	9f 73       	andi	r25, 0x3F	; 63
 76c:	21 e0       	ldi	r18, 0x01	; 1
 76e:	09 f0       	breq	.+2      	; 0x772 <mrf_interrupt_handler+0xe2>
 770:	20 e0       	ldi	r18, 0x00	; 0
 772:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <tx_info>
 776:	20 fb       	bst	r18, 0
 778:	90 f9       	bld	r25, 0
        tx_info.retries = mrf_reg_TXSTAT >> 6;
 77a:	82 95       	swap	r24
 77c:	86 95       	lsr	r24
 77e:	86 95       	lsr	r24
 780:	83 70       	andi	r24, 0x03	; 3
 782:	88 0f       	add	r24, r24
 784:	99 7f       	andi	r25, 0xF9	; 249
        tx_info.channel_busy = (mrf_reg_TXSTAT & (1 << CCAFAIL));
 786:	89 2b       	or	r24, r25
 788:	87 7f       	andi	r24, 0xF7	; 247
 78a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tx_info>
    }
//DROP_ISR_MUTEX;
    isr_lock = 0;
 78e:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <isr_lock>
}
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	1f 91       	pop	r17
 798:	0f 91       	pop	r16
 79a:	ff 90       	pop	r15
 79c:	ef 90       	pop	r14
 79e:	df 90       	pop	r13
 7a0:	cf 90       	pop	r12
 7a2:	bf 90       	pop	r11
 7a4:	af 90       	pop	r10
 7a6:	08 95       	ret

000007a8 <mrf_get_rxdata>:
}

uint8_t* mrf_get_rxdata()
{
	return rx_info.rx_data;
}
 7a8:	88 e0       	ldi	r24, 0x08	; 8
 7aa:	91 e0       	ldi	r25, 0x01	; 1
 7ac:	08 95       	ret

000007ae <Pk_Set_Dest_Panid>:
#include "bitmanip.h"
#include "packet_specs.h"

void Pk_Set_Dest_Panid(uint8_t* buff, uint16_t panid)
{
	word_to_bytes(&buff[PK_DEST_PANID_HI],panid);
 7ae:	62 dc       	rcall	.-1852   	; 0x74 <word_to_bytes>
 7b0:	08 95       	ret

000007b2 <Pk_Set_Src_Panid>:
}

void Pk_Set_Src_Panid(uint8_t* buff, uint16_t panid)
{
	word_to_bytes(&buff[PK_SRC_PANID_HI],panid);
 7b2:	04 96       	adiw	r24, 0x04	; 4
 7b4:	5f dc       	rcall	.-1858   	; 0x74 <word_to_bytes>
 7b6:	08 95       	ret

000007b8 <Pk_Set_Packet_Size>:
}

void Pk_Set_Packet_Size(uint8_t* buff, uint8_t sz)
{
	buff[PK_COMMAND_HEADER + PK_SZ_PACKET] = sz;
 7b8:	fc 01       	movw	r30, r24
 7ba:	61 87       	std	Z+9, r22	; 0x09
 7bc:	08 95       	ret

000007be <Pk_Set_Target_Node>:
}

void Pk_Set_Target_Node(uint8_t* buff, uint16_t target_node)
{
	word_to_bytes(&buff[PK_DEST_ADDR_HI],target_node);
 7be:	02 96       	adiw	r24, 0x02	; 2
 7c0:	59 dc       	rcall	.-1870   	; 0x74 <word_to_bytes>
 7c2:	08 95       	ret

000007c4 <Pk_Set_Command>:
}

void Pk_Set_Command(uint8_t* buff, uint16_t cmd_id, /*uint8_t cmd2,*/ uint8_t cmd3, uint8_t cmd4, uint8_t cmd5)
{
 7c4:	ff 92       	push	r15
 7c6:	0f 93       	push	r16
 7c8:	1f 93       	push	r17
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	ec 01       	movw	r28, r24
 7d0:	f4 2e       	mov	r15, r20
 7d2:	12 2f       	mov	r17, r18
	word_to_bytes(&buff[PK_COMMAND_HEADER+PK_CMD_HI],cmd_id);
 7d4:	0a 96       	adiw	r24, 0x0a	; 10
 7d6:	4e dc       	rcall	.-1892   	; 0x74 <word_to_bytes>
	//buff[PK_COMMAND_HEADER+PK_CMD_DATA_0] = cmd2;
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_1] = cmd3;
 7d8:	fd 86       	std	Y+13, r15	; 0x0d
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_2] = cmd4;
 7da:	1e 87       	std	Y+14, r17	; 0x0e
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_3] = cmd5;
 7dc:	0f 87       	std	Y+15, r16	; 0x0f
}
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	1f 91       	pop	r17
 7e4:	0f 91       	pop	r16
 7e6:	ff 90       	pop	r15
 7e8:	08 95       	ret

000007ea <Pk_Set_Src_Node>:

void Pk_Set_Src_Node(uint8_t* buff, uint8_t origin)
{
	//used for setting where this particular packet is coming from: the source of "data" would be held
	//later in the packet, in the data bytes.
	word_to_bytes(&buff[PK_SRC_ADDR_HI],origin);
 7ea:	70 e0       	ldi	r23, 0x00	; 0
 7ec:	06 96       	adiw	r24, 0x06	; 6
 7ee:	42 dc       	rcall	.-1916   	; 0x74 <word_to_bytes>
 7f0:	08 95       	ret

000007f2 <Pk_Add_Data>:
}

void Pk_Add_Data(uint8_t* buff, uint16_t data)
{
	word_to_bytes(&buff[PK_DATA_START],data);
 7f2:	40 96       	adiw	r24, 0x10	; 16
 7f4:	3f dc       	rcall	.-1922   	; 0x74 <word_to_bytes>
 7f6:	08 95       	ret

000007f8 <spi_setup>:

void spi_setup()
{

	#ifndef SPI_ON_USI
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0); //enables SPI, sets chip as master, sets clock speed to fosc/16
 7f8:	81 e5       	ldi	r24, 0x51	; 81
 7fa:	8c bd       	out	0x2c, r24	; 44
 7fc:	08 95       	ret

000007fe <spi_transfer_byte>:

/*Transfers a single byte between master and slave*/

void spi_transfer_byte(uint8_t* bout, uint8_t* bin)
{
	DATAREG = *bout;
 7fe:	fc 01       	movw	r30, r24
 800:	80 81       	ld	r24, Z
 802:	8e bd       	out	0x2e, r24	; 46
	while(! SPI_BYTE_XFER_DONE)
 804:	0d b4       	in	r0, 0x2d	; 45
 806:	07 fe       	sbrs	r0, 7
 808:	fd cf       	rjmp	.-6      	; 0x804 <spi_transfer_byte+0x6>
		USICR = usi_clk_lo;
		USICR = usi_clk_hi;
		#endif
	} 
	/*Incoming data out of data register*/
	*bin = DATAREG;
 80a:	8e b5       	in	r24, 0x2e	; 46
 80c:	fb 01       	movw	r30, r22
 80e:	80 83       	st	Z, r24
 810:	08 95       	ret

00000812 <spi_transfer_nbytes>:
}

/*Selects the slave (cs)  and transfers n bytes. The input and output buffers must be defined and contain at least n bytes each*/

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
 812:	cf 92       	push	r12
 814:	df 92       	push	r13
 816:	ef 92       	push	r14
 818:	ff 92       	push	r15
 81a:	0f 93       	push	r16
 81c:	1f 93       	push	r17
 81e:	cf 93       	push	r28
 820:	df 93       	push	r29
 822:	ec 01       	movw	r28, r24
 824:	8b 01       	movw	r16, r22
	
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
 826:	85 b1       	in	r24, 0x05	; 5
 828:	61 e0       	ldi	r22, 0x01	; 1
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	6b 01       	movw	r12, r22
 82e:	02 c0       	rjmp	.+4      	; 0x834 <spi_transfer_nbytes+0x22>
 830:	cc 0c       	add	r12, r12
 832:	dd 1c       	adc	r13, r13
 834:	2a 95       	dec	r18
 836:	e2 f7       	brpl	.-8      	; 0x830 <spi_transfer_nbytes+0x1e>
 838:	9c 2d       	mov	r25, r12
 83a:	90 95       	com	r25
 83c:	89 23       	and	r24, r25
 83e:	85 b9       	out	0x05, r24	; 5
	while(n)
 840:	44 23       	and	r20, r20
 842:	89 f0       	breq	.+34     	; 0x866 <spi_transfer_nbytes+0x54>
 844:	41 50       	subi	r20, 0x01	; 1
 846:	e4 2e       	mov	r14, r20
 848:	f1 2c       	mov	r15, r1
 84a:	8f ef       	ldi	r24, 0xFF	; 255
 84c:	e8 1a       	sub	r14, r24
 84e:	f8 0a       	sbc	r15, r24
 850:	ec 0e       	add	r14, r28
 852:	fd 1e       	adc	r15, r29
	{
		
		spi_transfer_byte(out,in);    /*transfer byte */
 854:	b8 01       	movw	r22, r16
 856:	ce 01       	movw	r24, r28
 858:	d2 df       	rcall	.-92     	; 0x7fe <spi_transfer_byte>

		/*advance iterators*/
		out = out + 1;
 85a:	21 96       	adiw	r28, 0x01	; 1
		in = in + 1;
 85c:	0f 5f       	subi	r16, 0xFF	; 255
 85e:	1f 4f       	sbci	r17, 0xFF	; 255

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
	
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
	while(n)
 860:	ec 16       	cp	r14, r28
 862:	fd 06       	cpc	r15, r29
 864:	b9 f7       	brne	.-18     	; 0x854 <spi_transfer_nbytes+0x42>
		/*advance iterators*/
		out = out + 1;
		in = in + 1;
		n = n - 1;
	}
	CS_PORT |= 1<<cs;/*Deselect slave chip*/
 866:	85 b1       	in	r24, 0x05	; 5
 868:	c8 2a       	or	r12, r24
 86a:	c5 b8       	out	0x05, r12	; 5
}
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	1f 91       	pop	r17
 872:	0f 91       	pop	r16
 874:	ff 90       	pop	r15
 876:	ef 90       	pop	r14
 878:	df 90       	pop	r13
 87a:	cf 90       	pop	r12
 87c:	08 95       	ret

0000087e <memcpy>:
 87e:	fb 01       	movw	r30, r22
 880:	dc 01       	movw	r26, r24
 882:	02 c0       	rjmp	.+4      	; 0x888 <memcpy+0xa>
 884:	01 90       	ld	r0, Z+
 886:	0d 92       	st	X+, r0
 888:	41 50       	subi	r20, 0x01	; 1
 88a:	50 40       	sbci	r21, 0x00	; 0
 88c:	d8 f7       	brcc	.-10     	; 0x884 <memcpy+0x6>
 88e:	08 95       	ret

00000890 <_exit>:
 890:	f8 94       	cli

00000892 <__stop_program>:
 892:	ff cf       	rjmp	.-2      	; 0x892 <__stop_program>
