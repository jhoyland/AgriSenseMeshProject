
3WayRelay-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015d  00800100  00800100  00000768  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fbf  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c30  00000000  00000000  0000299b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de4  00000000  00000000  000035cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ec  00000000  00000000  000043b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000089e  00000000  00000000  0000489c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f97  00000000  00000000  0000513a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  000060d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	66 c0       	rjmp	.+204    	; 0xd0 <__vector_1>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
  26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
  34:	22 e0       	ldi	r18, 0x02	; 2
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
  3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
  3e:	ad 35       	cpi	r26, 0x5D	; 93
  40:	b2 07       	cpc	r27, r18
  42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
  44:	f3 d0       	rcall	.+486    	; 0x22c <main>
  46:	54 c3       	rjmp	.+1704   	; 0x6f0 <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <bytes_to_word>:
uint16_t bytes_to_word(uint8_t* b)
{
    uint16_t hi = (uint16_t) b[0];
    uint16_t lo = (uint16_t) b[1];

    return (hi << 8) | lo;
  4a:	fc 01       	movw	r30, r24
  4c:	20 81       	ld	r18, Z
  4e:	30 e0       	ldi	r19, 0x00	; 0
  50:	32 2f       	mov	r19, r18
  52:	22 27       	eor	r18, r18
  54:	81 81       	ldd	r24, Z+1	; 0x01
}
  56:	a9 01       	movw	r20, r18
  58:	48 2b       	or	r20, r24
  5a:	ca 01       	movw	r24, r20
  5c:	08 95       	ret

0000005e <word_to_bytes>:

void word_to_bytes(uint8_t* b, uint16_t d)
{
    b[0] = (uint8_t)(d >> 8);
  5e:	fc 01       	movw	r30, r24
  60:	70 83       	st	Z, r23
    b[1] = (uint8_t)(255 & d);
  62:	61 83       	std	Z+1, r22	; 0x01
  64:	08 95       	ret

00000066 <handle_tx>:
	running_status &= ~(1<<RU_RX_HANDLE);
}


void loop()
{
  66:	08 95       	ret

00000068 <setup>:
  68:	55 9a       	sbi	0x0a, 5	; 10
  6a:	56 9a       	sbi	0x0a, 6	; 10
  6c:	57 9a       	sbi	0x0a, 7	; 10
  6e:	85 b1       	in	r24, 0x05	; 5
  70:	8c 6a       	ori	r24, 0xAC	; 172
  72:	85 b9       	out	0x05, r24	; 5
  74:	84 b1       	in	r24, 0x04	; 4
  76:	8c 6a       	ori	r24, 0xAC	; 172
  78:	84 b9       	out	0x04, r24	; 4
  7a:	24 98       	cbi	0x04, 4	; 4
  7c:	da d2       	rcall	.+1460   	; 0x632 <spi_setup>
  7e:	dd d0       	rcall	.+442    	; 0x23a <mrf_reset>
  80:	de d1       	rcall	.+956    	; 0x43e <mrf_init>
  82:	8e ef       	ldi	r24, 0xFE	; 254
  84:	9a ec       	ldi	r25, 0xCA	; 202
  86:	47 d1       	rcall	.+654    	; 0x316 <mrf_set_pan>
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	4e d1       	rcall	.+668    	; 0x32a <mrf_address16_write>
  8e:	78 94       	sei
  90:	e8 9a       	sbi	0x1d, 0	; 29
  92:	e9 e6       	ldi	r30, 0x69	; 105
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	80 83       	st	Z, r24
  9c:	81 e3       	ldi	r24, 0x31	; 49
  9e:	92 e0       	ldi	r25, 0x02	; 2
  a0:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <transmit_command_header+0x1>
  a4:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <transmit_command_header>
  a8:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <neighbor_status>
  ac:	8a e0       	ldi	r24, 0x0A	; 10
  ae:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <command_status>
  b2:	5e 9a       	sbi	0x0b, 6	; 11
  b4:	8f e4       	ldi	r24, 0x4F	; 79
  b6:	93 ec       	ldi	r25, 0xC3	; 195
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <setup+0x50>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <setup+0x56>
  be:	00 00       	nop
  c0:	5e 98       	cbi	0x0b, 6	; 11
  c2:	8f e4       	ldi	r24, 0x4F	; 79
  c4:	93 ec       	ldi	r25, 0xC3	; 195
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <setup+0x5e>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <setup+0x64>
  cc:	00 00       	nop
  ce:	08 95       	ret

000000d0 <__vector_1>:
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	4f 93       	push	r20
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
  f2:	10 d2       	rcall	.+1056   	; 0x514 <mrf_interrupt_handler>
  f4:	ff 91       	pop	r31
  f6:	ef 91       	pop	r30
  f8:	bf 91       	pop	r27
  fa:	af 91       	pop	r26
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	7f 91       	pop	r23
 102:	6f 91       	pop	r22
 104:	5f 91       	pop	r21
 106:	4f 91       	pop	r20
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <ping_respond>:
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	ec 01       	movw	r28, r24
 11c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <transmit_command_header>
 120:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <transmit_command_header+0x1>
 124:	62 e5       	ldi	r22, 0x52	; 82
 126:	75 e4       	ldi	r23, 0x45	; 69
 128:	02 96       	adiw	r24, 0x02	; 2
 12a:	99 df       	rcall	.-206    	; 0x5e <word_to_bytes>
 12c:	40 91 32 02 	lds	r20, 0x0232	; 0x800232 <transmit_data_buffer+0x9>
 130:	69 e2       	ldi	r22, 0x29	; 41
 132:	72 e0       	ldi	r23, 0x02	; 2
 134:	ce 01       	movw	r24, r28
 136:	12 d1       	rcall	.+548    	; 0x35c <mrf_send16>
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <COMMAND_HANDLER>:
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	8c 01       	movw	r16, r24
 148:	ec 01       	movw	r28, r24
 14a:	22 96       	adiw	r28, 0x02	; 2
 14c:	ce 01       	movw	r24, r28
 14e:	7d df       	rcall	.-262    	; 0x4a <bytes_to_word>
 150:	83 34       	cpi	r24, 0x43	; 67
 152:	95 44       	sbci	r25, 0x45	; 69
 154:	b9 f4       	brne	.+46     	; 0x184 <COMMAND_HANDLER+0x46>
 156:	c8 01       	movw	r24, r16
 158:	04 96       	adiw	r24, 0x04	; 4
 15a:	77 df       	rcall	.-274    	; 0x4a <bytes_to_word>
 15c:	89 2b       	or	r24, r25
 15e:	91 f4       	brne	.+36     	; 0x184 <COMMAND_HANDLER+0x46>
 160:	5d 9a       	sbi	0x0b, 5	; 11
 162:	8f e4       	ldi	r24, 0x4F	; 79
 164:	93 ec       	ldi	r25, 0xC3	; 195
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <COMMAND_HANDLER+0x28>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <COMMAND_HANDLER+0x2e>
 16c:	00 00       	nop
 16e:	5d 98       	cbi	0x0b, 5	; 11
 170:	8f e4       	ldi	r24, 0x4F	; 79
 172:	93 ec       	ldi	r25, 0xC3	; 195
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <COMMAND_HANDLER+0x36>
 178:	00 c0       	rjmp	.+0      	; 0x17a <COMMAND_HANDLER+0x3c>
 17a:	00 00       	nop
 17c:	c8 01       	movw	r24, r16
 17e:	06 96       	adiw	r24, 0x06	; 6
 180:	64 df       	rcall	.-312    	; 0x4a <bytes_to_word>
 182:	c9 df       	rcall	.-110    	; 0x116 <ping_respond>
 184:	ce 01       	movw	r24, r28
 186:	61 df       	rcall	.-318    	; 0x4a <bytes_to_word>
 188:	82 35       	cpi	r24, 0x52	; 82
 18a:	95 44       	sbci	r25, 0x45	; 69
 18c:	69 f4       	brne	.+26     	; 0x1a8 <COMMAND_HANDLER+0x6a>
 18e:	c8 01       	movw	r24, r16
 190:	04 96       	adiw	r24, 0x04	; 4
 192:	5b df       	rcall	.-330    	; 0x4a <bytes_to_word>
 194:	89 2b       	or	r24, r25
 196:	41 f4       	brne	.+16     	; 0x1a8 <COMMAND_HANDLER+0x6a>
 198:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <transmit_command_header>
 19c:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <transmit_command_header+0x1>
 1a0:	6c ea       	ldi	r22, 0xAC	; 172
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	04 96       	adiw	r24, 0x04	; 4
 1a6:	5b df       	rcall	.-330    	; 0x5e <word_to_bytes>
 1a8:	ce 01       	movw	r24, r28
 1aa:	4f df       	rcall	.-354    	; 0x4a <bytes_to_word>
 1ac:	8d 3e       	cpi	r24, 0xED	; 237
 1ae:	91 05       	cpc	r25, r1
 1b0:	79 f4       	brne	.+30     	; 0x1d0 <COMMAND_HANDLER+0x92>
 1b2:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <neighbor_status>
 1b6:	81 11       	cpse	r24, r1
 1b8:	0b c0       	rjmp	.+22     	; 0x1d0 <COMMAND_HANDLER+0x92>
 1ba:	8d ee       	ldi	r24, 0xED	; 237
 1bc:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <command_status>
 1c0:	c8 01       	movw	r24, r16
 1c2:	06 96       	adiw	r24, 0x06	; 6
 1c4:	42 df       	rcall	.-380    	; 0x4a <bytes_to_word>
 1c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <neighbor_status>
 1d0:	ce 01       	movw	r24, r28
 1d2:	3b df       	rcall	.-394    	; 0x4a <bytes_to_word>
 1d4:	ce 01       	movw	r24, r28
 1d6:	39 df       	rcall	.-398    	; 0x4a <bytes_to_word>
 1d8:	ce 01       	movw	r24, r28
 1da:	37 df       	rcall	.-402    	; 0x4a <bytes_to_word>
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	08 95       	ret

000001e6 <handle_rx>:
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <running_status>
 1ee:	88 60       	ori	r24, 0x08	; 8
 1f0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <running_status>
 1f4:	82 d1       	rcall	.+772    	; 0x4fa <mrf_rx_datalength>
 1f6:	ec 01       	movw	r28, r24
 1f8:	19 d2       	rcall	.+1074   	; 0x62c <mrf_get_rxdata>
 1fa:	ae 01       	movw	r20, r28
 1fc:	bc 01       	movw	r22, r24
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	92 e0       	ldi	r25, 0x02	; 2
 202:	6d d2       	rcall	.+1242   	; 0x6de <memcpy>
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	92 e0       	ldi	r25, 0x02	; 2
 208:	20 df       	rcall	.-448    	; 0x4a <bytes_to_word>
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	21 f4       	brne	.+8      	; 0x216 <handle_rx+0x30>
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	92 e0       	ldi	r25, 0x02	; 2
 212:	95 df       	rcall	.-214    	; 0x13e <COMMAND_HANDLER>
 214:	03 c0       	rjmp	.+6      	; 0x21c <handle_rx+0x36>
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	92 e0       	ldi	r25, 0x02	; 2
 21a:	17 df       	rcall	.-466    	; 0x4a <bytes_to_word>
 21c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <running_status>
 220:	87 7f       	andi	r24, 0xF7	; 247
 222:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <running_status>
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <main>:
	
}
int main(void)
{
	setup();
 22c:	1d df       	rcall	.-454    	; 0x68 <setup>
    while (1) 
    {
		mrf_check_flags(&handle_rx,&handle_tx);
 22e:	63 e3       	ldi	r22, 0x33	; 51
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	83 ef       	ldi	r24, 0xF3	; 243
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	47 d1       	rcall	.+654    	; 0x4c6 <mrf_check_flags>
 238:	fa cf       	rjmp	.-12     	; 0x22e <main+0x2>

0000023a <mrf_reset>:
        mrf_write_long(MRF_TESTMODE, 0x00); // Disable PA/LNA on MRF24J40MB module.
    }
}

void mrf_rx_flush(void) {
    mrf_write_short(MRF_RXFLUSH, 0x01);
 23a:	59 98       	cbi	0x0b, 1	; 11
 23c:	87 ea       	ldi	r24, 0xA7	; 167
 23e:	91 e6       	ldi	r25, 0x61	; 97
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <mrf_reset+0x6>
 244:	00 c0       	rjmp	.+0      	; 0x246 <mrf_reset+0xc>
 246:	00 00       	nop
 248:	59 9a       	sbi	0x0b, 1	; 11
 24a:	83 e2       	ldi	r24, 0x23	; 35
 24c:	94 ef       	ldi	r25, 0xF4	; 244
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <mrf_reset+0x14>
 252:	00 c0       	rjmp	.+0      	; 0x254 <mrf_reset+0x1a>
 254:	00 00       	nop
 256:	08 95       	ret

00000258 <mrf_read_short>:
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	c2 e0       	ldi	r28, 0x02	; 2
 25e:	d1 e0       	ldi	r29, 0x01	; 1
 260:	88 0f       	add	r24, r24
 262:	8e 77       	andi	r24, 0x7E	; 126
 264:	88 83       	st	Y, r24
 266:	19 82       	std	Y+1, r1	; 0x01
 268:	26 e0       	ldi	r18, 0x06	; 6
 26a:	42 e0       	ldi	r20, 0x02	; 2
 26c:	be 01       	movw	r22, r28
 26e:	ce 01       	movw	r24, r28
 270:	f3 d1       	rcall	.+998    	; 0x658 <spi_transfer_nbytes>
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <mrf_read_long>:
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	c2 e0       	ldi	r28, 0x02	; 2
 280:	d1 e0       	ldi	r29, 0x01	; 1
 282:	9c 01       	movw	r18, r24
 284:	36 95       	lsr	r19
 286:	27 95       	ror	r18
 288:	36 95       	lsr	r19
 28a:	27 95       	ror	r18
 28c:	36 95       	lsr	r19
 28e:	27 95       	ror	r18
 290:	20 68       	ori	r18, 0x80	; 128
 292:	28 83       	st	Y, r18
 294:	82 95       	swap	r24
 296:	88 0f       	add	r24, r24
 298:	80 7e       	andi	r24, 0xE0	; 224
 29a:	89 83       	std	Y+1, r24	; 0x01
 29c:	1a 82       	std	Y+2, r1	; 0x02
 29e:	26 e0       	ldi	r18, 0x06	; 6
 2a0:	43 e0       	ldi	r20, 0x03	; 3
 2a2:	be 01       	movw	r22, r28
 2a4:	ce 01       	movw	r24, r28
 2a6:	d8 d1       	rcall	.+944    	; 0x658 <spi_transfer_nbytes>
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <mrf_write_short>:
 2b0:	e2 e0       	ldi	r30, 0x02	; 2
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	88 0f       	add	r24, r24
 2b6:	8e 77       	andi	r24, 0x7E	; 126
 2b8:	81 60       	ori	r24, 0x01	; 1
 2ba:	80 83       	st	Z, r24
 2bc:	61 83       	std	Z+1, r22	; 0x01
 2be:	26 e0       	ldi	r18, 0x06	; 6
 2c0:	42 e0       	ldi	r20, 0x02	; 2
 2c2:	bf 01       	movw	r22, r30
 2c4:	cf 01       	movw	r24, r30
 2c6:	c8 d1       	rcall	.+912    	; 0x658 <spi_transfer_nbytes>
 2c8:	08 95       	ret

000002ca <mrf_write_long>:
 2ca:	e2 e0       	ldi	r30, 0x02	; 2
 2cc:	f1 e0       	ldi	r31, 0x01	; 1
 2ce:	9c 01       	movw	r18, r24
 2d0:	36 95       	lsr	r19
 2d2:	27 95       	ror	r18
 2d4:	36 95       	lsr	r19
 2d6:	27 95       	ror	r18
 2d8:	36 95       	lsr	r19
 2da:	27 95       	ror	r18
 2dc:	20 68       	ori	r18, 0x80	; 128
 2de:	20 83       	st	Z, r18
 2e0:	82 95       	swap	r24
 2e2:	88 0f       	add	r24, r24
 2e4:	80 7e       	andi	r24, 0xE0	; 224
 2e6:	80 61       	ori	r24, 0x10	; 16
 2e8:	81 83       	std	Z+1, r24	; 0x01
 2ea:	62 83       	std	Z+2, r22	; 0x02
 2ec:	26 e0       	ldi	r18, 0x06	; 6
 2ee:	43 e0       	ldi	r20, 0x03	; 3
 2f0:	bf 01       	movw	r22, r30
 2f2:	cf 01       	movw	r24, r30
 2f4:	b1 d1       	rcall	.+866    	; 0x658 <spi_transfer_nbytes>
 2f6:	08 95       	ret

000002f8 <mrf_get_pan>:
 2f8:	cf 93       	push	r28
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	ad df       	rcall	.-166    	; 0x258 <mrf_read_short>
 2fe:	c8 2f       	mov	r28, r24
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	aa df       	rcall	.-172    	; 0x258 <mrf_read_short>
 304:	2c 2f       	mov	r18, r28
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	32 2f       	mov	r19, r18
 30a:	22 27       	eor	r18, r18
 30c:	a9 01       	movw	r20, r18
 30e:	48 2b       	or	r20, r24
 310:	ca 01       	movw	r24, r20
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <mrf_set_pan>:
 316:	cf 93       	push	r28
 318:	c8 2f       	mov	r28, r24
 31a:	69 2f       	mov	r22, r25
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	c8 df       	rcall	.-112    	; 0x2b0 <mrf_write_short>
 320:	6c 2f       	mov	r22, r28
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	c5 df       	rcall	.-118    	; 0x2b0 <mrf_write_short>
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <mrf_address16_write>:
 32a:	cf 93       	push	r28
 32c:	c8 2f       	mov	r28, r24
 32e:	69 2f       	mov	r22, r25
 330:	84 e0       	ldi	r24, 0x04	; 4
 332:	be df       	rcall	.-132    	; 0x2b0 <mrf_write_short>
 334:	6c 2f       	mov	r22, r28
 336:	83 e0       	ldi	r24, 0x03	; 3
 338:	bb df       	rcall	.-138    	; 0x2b0 <mrf_write_short>
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <mrf_address16_read>:
 33e:	cf 93       	push	r28
 340:	84 e0       	ldi	r24, 0x04	; 4
 342:	8a df       	rcall	.-236    	; 0x258 <mrf_read_short>
 344:	c8 2f       	mov	r28, r24
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	87 df       	rcall	.-242    	; 0x258 <mrf_read_short>
 34a:	2c 2f       	mov	r18, r28
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	32 2f       	mov	r19, r18
 350:	22 27       	eor	r18, r18
 352:	a9 01       	movw	r20, r18
 354:	48 2b       	or	r20, r24
 356:	ca 01       	movw	r24, r20
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <mrf_send16>:
 35c:	df 92       	push	r13
 35e:	ef 92       	push	r14
 360:	ff 92       	push	r15
 362:	0f 93       	push	r16
 364:	1f 93       	push	r17
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	d8 2f       	mov	r29, r24
 36c:	c9 2f       	mov	r28, r25
 36e:	7b 01       	movw	r14, r22
 370:	d4 2e       	mov	r13, r20
 372:	69 e0       	ldi	r22, 0x09	; 9
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	a8 df       	rcall	.-176    	; 0x2ca <mrf_write_long>
 37a:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <ignoreBytes>
 37e:	67 5f       	subi	r22, 0xF7	; 247
 380:	6d 0d       	add	r22, r13
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	a1 df       	rcall	.-190    	; 0x2ca <mrf_write_long>
 388:	61 e6       	ldi	r22, 0x61	; 97
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	9d df       	rcall	.-198    	; 0x2ca <mrf_write_long>
 390:	68 e8       	ldi	r22, 0x88	; 136
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	99 df       	rcall	.-206    	; 0x2ca <mrf_write_long>
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	84 e0       	ldi	r24, 0x04	; 4
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	95 df       	rcall	.-214    	; 0x2ca <mrf_write_long>
 3a0:	ab df       	rcall	.-170    	; 0x2f8 <mrf_get_pan>
 3a2:	19 2f       	mov	r17, r25
 3a4:	68 2f       	mov	r22, r24
 3a6:	85 e0       	ldi	r24, 0x05	; 5
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	8f df       	rcall	.-226    	; 0x2ca <mrf_write_long>
 3ac:	61 2f       	mov	r22, r17
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	8b df       	rcall	.-234    	; 0x2ca <mrf_write_long>
 3b4:	6d 2f       	mov	r22, r29
 3b6:	87 e0       	ldi	r24, 0x07	; 7
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	87 df       	rcall	.-242    	; 0x2ca <mrf_write_long>
 3bc:	6c 2f       	mov	r22, r28
 3be:	88 e0       	ldi	r24, 0x08	; 8
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	83 df       	rcall	.-250    	; 0x2ca <mrf_write_long>
 3c4:	bc df       	rcall	.-136    	; 0x33e <mrf_address16_read>
 3c6:	c9 2f       	mov	r28, r25
 3c8:	68 2f       	mov	r22, r24
 3ca:	89 e0       	ldi	r24, 0x09	; 9
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	7d df       	rcall	.-262    	; 0x2ca <mrf_write_long>
 3d0:	6c 2f       	mov	r22, r28
 3d2:	8a e0       	ldi	r24, 0x0A	; 10
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	79 df       	rcall	.-270    	; 0x2ca <mrf_write_long>
 3d8:	c0 91 7d 01 	lds	r28, 0x017D	; 0x80017d <ignoreBytes>
 3dc:	d0 91 7e 01 	lds	r29, 0x017E	; 0x80017e <ignoreBytes+0x1>
 3e0:	2b 96       	adiw	r28, 0x0b	; 11
 3e2:	dd 20       	and	r13, r13
 3e4:	61 f0       	breq	.+24     	; 0x3fe <mrf_send16+0xa2>
 3e6:	87 01       	movw	r16, r14
 3e8:	ed 0c       	add	r14, r13
 3ea:	f1 1c       	adc	r15, r1
 3ec:	f8 01       	movw	r30, r16
 3ee:	61 91       	ld	r22, Z+
 3f0:	8f 01       	movw	r16, r30
 3f2:	ce 01       	movw	r24, r28
 3f4:	6a df       	rcall	.-300    	; 0x2ca <mrf_write_long>
 3f6:	21 96       	adiw	r28, 0x01	; 1
 3f8:	0e 15       	cp	r16, r14
 3fa:	1f 05       	cpc	r17, r15
 3fc:	b9 f7       	brne	.-18     	; 0x3ec <mrf_send16+0x90>
 3fe:	65 e0       	ldi	r22, 0x05	; 5
 400:	8b e1       	ldi	r24, 0x1B	; 27
 402:	56 df       	rcall	.-340    	; 0x2b0 <mrf_write_short>
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	08 95       	ret

00000414 <mrf_set_interrupts>:
 414:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <isr_lock>
 418:	66 ef       	ldi	r22, 0xF6	; 246
 41a:	82 e3       	ldi	r24, 0x32	; 50
 41c:	49 df       	rcall	.-366    	; 0x2b0 <mrf_write_short>
 41e:	08 95       	ret

00000420 <mrf_set_channel>:
 420:	68 2f       	mov	r22, r24
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	6b 50       	subi	r22, 0x0B	; 11
 426:	71 09       	sbc	r23, r1
 428:	62 95       	swap	r22
 42a:	72 95       	swap	r23
 42c:	70 7f       	andi	r23, 0xF0	; 240
 42e:	76 27       	eor	r23, r22
 430:	60 7f       	andi	r22, 0xF0	; 240
 432:	76 27       	eor	r23, r22
 434:	63 60       	ori	r22, 0x03	; 3
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	92 e0       	ldi	r25, 0x02	; 2
 43a:	47 df       	rcall	.-370    	; 0x2ca <mrf_write_long>
 43c:	08 95       	ret

0000043e <mrf_init>:
 43e:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <mrf_flags>
 442:	67 e0       	ldi	r22, 0x07	; 7
 444:	8a e2       	ldi	r24, 0x2A	; 42
 446:	34 df       	rcall	.-408    	; 0x2b0 <mrf_write_short>
 448:	68 e9       	ldi	r22, 0x98	; 152
 44a:	88 e1       	ldi	r24, 0x18	; 24
 44c:	31 df       	rcall	.-414    	; 0x2b0 <mrf_write_short>
 44e:	65 e9       	ldi	r22, 0x95	; 149
 450:	8e e2       	ldi	r24, 0x2E	; 46
 452:	2e df       	rcall	.-420    	; 0x2b0 <mrf_write_short>
 454:	63 e0       	ldi	r22, 0x03	; 3
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	92 e0       	ldi	r25, 0x02	; 2
 45a:	37 df       	rcall	.-402    	; 0x2ca <mrf_write_long>
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	92 e0       	ldi	r25, 0x02	; 2
 462:	33 df       	rcall	.-410    	; 0x2ca <mrf_write_long>
 464:	60 e8       	ldi	r22, 0x80	; 128
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	92 e0       	ldi	r25, 0x02	; 2
 46a:	2f df       	rcall	.-418    	; 0x2ca <mrf_write_long>
 46c:	60 e9       	ldi	r22, 0x90	; 144
 46e:	86 e0       	ldi	r24, 0x06	; 6
 470:	92 e0       	ldi	r25, 0x02	; 2
 472:	2b df       	rcall	.-426    	; 0x2ca <mrf_write_long>
 474:	60 e8       	ldi	r22, 0x80	; 128
 476:	87 e0       	ldi	r24, 0x07	; 7
 478:	92 e0       	ldi	r25, 0x02	; 2
 47a:	27 df       	rcall	.-434    	; 0x2ca <mrf_write_long>
 47c:	60 e1       	ldi	r22, 0x10	; 16
 47e:	88 e0       	ldi	r24, 0x08	; 8
 480:	92 e0       	ldi	r25, 0x02	; 2
 482:	23 df       	rcall	.-442    	; 0x2ca <mrf_write_long>
 484:	61 e2       	ldi	r22, 0x21	; 33
 486:	80 e2       	ldi	r24, 0x20	; 32
 488:	92 e0       	ldi	r25, 0x02	; 2
 48a:	1f df       	rcall	.-450    	; 0x2ca <mrf_write_long>
 48c:	60 e8       	ldi	r22, 0x80	; 128
 48e:	8a e3       	ldi	r24, 0x3A	; 58
 490:	0f df       	rcall	.-482    	; 0x2b0 <mrf_write_short>
 492:	60 e6       	ldi	r22, 0x60	; 96
 494:	8f e3       	ldi	r24, 0x3F	; 63
 496:	0c df       	rcall	.-488    	; 0x2b0 <mrf_write_short>
 498:	60 e4       	ldi	r22, 0x40	; 64
 49a:	8e e3       	ldi	r24, 0x3E	; 62
 49c:	09 df       	rcall	.-494    	; 0x2b0 <mrf_write_short>
 49e:	ba df       	rcall	.-140    	; 0x414 <mrf_set_interrupts>
 4a0:	84 e1       	ldi	r24, 0x14	; 20
 4a2:	be df       	rcall	.-132    	; 0x420 <mrf_set_channel>
 4a4:	64 e0       	ldi	r22, 0x04	; 4
 4a6:	86 e3       	ldi	r24, 0x36	; 54
 4a8:	03 df       	rcall	.-506    	; 0x2b0 <mrf_write_short>
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	86 e3       	ldi	r24, 0x36	; 54
 4ae:	00 df       	rcall	.-512    	; 0x2b0 <mrf_write_short>
 4b0:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <flag_got_rx>
 4b4:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <flag_got_tx>
 4b8:	89 ef       	ldi	r24, 0xF9	; 249
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	01 97       	sbiw	r24, 0x01	; 1
 4be:	f1 f7       	brne	.-4      	; 0x4bc <mrf_init+0x7e>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <mrf_init+0x84>
 4c2:	00 00       	nop
 4c4:	08 95       	ret

000004c6 <mrf_check_flags>:
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <isr_lock>
 4ce:	21 11       	cpse	r18, r1
 4d0:	11 c0       	rjmp	.+34     	; 0x4f4 <mrf_check_flags+0x2e>
 4d2:	eb 01       	movw	r28, r22
 4d4:	fc 01       	movw	r30, r24
 4d6:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <flag_got_rx>
 4da:	22 23       	and	r18, r18
 4dc:	19 f0       	breq	.+6      	; 0x4e4 <mrf_check_flags+0x1e>
 4de:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <flag_got_rx>
 4e2:	09 95       	icall
 4e4:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <flag_got_tx>
 4e8:	88 23       	and	r24, r24
 4ea:	21 f0       	breq	.+8      	; 0x4f4 <mrf_check_flags+0x2e>
 4ec:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <flag_got_tx>
 4f0:	fe 01       	movw	r30, r28
 4f2:	09 95       	icall
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <mrf_rx_datalength>:
 4fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rx_info>
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0b 97       	sbiw	r24, 0x0b	; 11
 502:	08 95       	ret

00000504 <mrf_rx_disable>:
}

void mrf_rx_disable(void) {
    mrf_write_short(MRF_BBREG1, 0x04);  // RXDECINV - disable receiver
 504:	64 e0       	ldi	r22, 0x04	; 4
 506:	89 e3       	ldi	r24, 0x39	; 57
 508:	d3 de       	rcall	.-602    	; 0x2b0 <mrf_write_short>
 50a:	08 95       	ret

0000050c <mrf_rx_enable>:
}

void mrf_rx_enable(void) {
    mrf_write_short(MRF_BBREG1, 0x00);  // RXDECINV - enable receiver
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	89 e3       	ldi	r24, 0x39	; 57
 510:	cf de       	rcall	.-610    	; 0x2b0 <mrf_write_short>
 512:	08 95       	ret

00000514 <mrf_interrupt_handler>:
 * Call this from within an interrupt handler connected to the MRFs output
 * interrupt pin.  It handles reading in any data from the module, and letting it
 * continue working.
 * Only the most recent data is ever kept.
 */
void mrf_interrupt_handler(void) {
 514:	af 92       	push	r10
 516:	bf 92       	push	r11
 518:	cf 92       	push	r12
 51a:	df 92       	push	r13
 51c:	ef 92       	push	r14
 51e:	ff 92       	push	r15
 520:	0f 93       	push	r16
 522:	1f 93       	push	r17
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
    //GRAB_ISR_MUTEX;
    isr_lock = 1;
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <isr_lock>
    uint8_t last_interrupt = mrf_read_short(MRF_INTSTAT);
 52e:	81 e3       	ldi	r24, 0x31	; 49
 530:	93 de       	rcall	.-730    	; 0x258 <mrf_read_short>
 532:	b8 2e       	mov	r11, r24
    if (last_interrupt & MRF_I_RXIF) {
 534:	83 ff       	sbrs	r24, 3
 536:	4f c0       	rjmp	.+158    	; 0x5d6 <mrf_interrupt_handler+0xc2>
        int i = 0;
        flag_got_rx++;
 538:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <flag_got_rx>
 53c:	8f 5f       	subi	r24, 0xFF	; 255
 53e:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <flag_got_rx>
        // read out the packet data...
    //    cli();
        mrf_rx_disable();
 542:	e0 df       	rcall	.-64     	; 0x504 <mrf_rx_disable>
        // read start of rxfifo for, has 2 bytes more added by FCS. frame_length = m + n + 2
        uint8_t frame_length = mrf_read_long(0x300);
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	93 e0       	ldi	r25, 0x03	; 3
 548:	98 de       	rcall	.-720    	; 0x27a <mrf_read_long>
 54a:	a8 2e       	mov	r10, r24

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
 54c:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <mrf_flags>
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 550:	ea 2c       	mov	r14, r10
 552:	f1 2c       	mov	r15, r1
 554:	1e 14       	cp	r1, r14
 556:	1f 04       	cpc	r1, r15
 558:	9c f4       	brge	.+38     	; 0x580 <mrf_interrupt_handler+0x6c>
 55a:	c7 01       	movw	r24, r14
 55c:	9c 01       	movw	r18, r24
 55e:	21 58       	subi	r18, 0x81	; 129
 560:	3e 4f       	sbci	r19, 0xFE	; 254
 562:	69 01       	movw	r12, r18
 564:	cf e7       	ldi	r28, 0x7F	; 127
 566:	d1 e0       	ldi	r29, 0x01	; 1
                rx_buf[rb_ptr++] = mrf_read_long(0x301 + i);
 568:	01 e0       	ldi	r16, 0x01	; 1
 56a:	13 e0       	ldi	r17, 0x03	; 3
 56c:	0f 57       	subi	r16, 0x7F	; 127
 56e:	11 40       	sbci	r17, 0x01	; 1
 570:	c8 01       	movw	r24, r16
 572:	8c 0f       	add	r24, r28
 574:	9d 1f       	adc	r25, r29
 576:	81 de       	rcall	.-766    	; 0x27a <mrf_read_long>
 578:	89 93       	st	Y+, r24
        uint8_t frame_length = mrf_read_long(0x300);

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 57a:	cc 15       	cp	r28, r12
 57c:	dd 05       	cpc	r29, r13
 57e:	c1 f7       	brne	.-16     	; 0x570 <mrf_interrupt_handler+0x5c>
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 580:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rx_info>
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0b 97       	sbiw	r24, 0x0b	; 11
 588:	18 16       	cp	r1, r24
 58a:	19 06       	cpc	r1, r25
 58c:	ac f4       	brge	.+42     	; 0x5b8 <mrf_interrupt_handler+0xa4>
 58e:	c7 e0       	ldi	r28, 0x07	; 7
 590:	d1 e0       	ldi	r29, 0x01	; 1
 592:	c1 2c       	mov	r12, r1
 594:	d1 2c       	mov	r13, r1
uint8_t * mrf_get_rxbuf(void) {
    return rx_buf;
}

int mrf_rx_datalength(void) {
    return rx_info.frame_length - bytes_nodata;
 596:	06 e0       	ldi	r16, 0x06	; 6
 598:	11 e0       	ldi	r17, 0x01	; 1

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
 59a:	3f ef       	ldi	r19, 0xFF	; 255
 59c:	c3 1a       	sub	r12, r19
 59e:	d3 0a       	sbc	r13, r19
 5a0:	c6 01       	movw	r24, r12
 5a2:	87 5f       	subi	r24, 0xF7	; 247
 5a4:	9c 4f       	sbci	r25, 0xFC	; 252
 5a6:	69 de       	rcall	.-814    	; 0x27a <mrf_read_long>
 5a8:	89 93       	st	Y+, r24
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 5aa:	f8 01       	movw	r30, r16
 5ac:	80 81       	ld	r24, Z
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0b 97       	sbiw	r24, 0x0b	; 11
 5b2:	c8 16       	cp	r12, r24
 5b4:	d9 06       	cpc	r13, r25
 5b6:	8c f3       	brlt	.-30     	; 0x59a <mrf_interrupt_handler+0x86>
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
        }

        rx_info.frame_length = frame_length;
 5b8:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <rx_info>
        // same as datasheet 0x301 + (m + n + 2) <-- frame_length
        rx_info.lqi = mrf_read_long(0x301 + frame_length);
 5bc:	c7 01       	movw	r24, r14
 5be:	8f 5f       	subi	r24, 0xFF	; 255
 5c0:	9c 4f       	sbci	r25, 0xFC	; 252
 5c2:	5b de       	rcall	.-842    	; 0x27a <mrf_read_long>
 5c4:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <rx_info+0x75>
        // same as datasheet 0x301 + (m + n + 3) <-- frame_length + 1
        rx_info.rssi = mrf_read_long(0x301 + frame_length + 1);
 5c8:	c7 01       	movw	r24, r14
 5ca:	8e 5f       	subi	r24, 0xFE	; 254
 5cc:	9c 4f       	sbci	r25, 0xFC	; 252
 5ce:	55 de       	rcall	.-854    	; 0x27a <mrf_read_long>
 5d0:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <rx_info+0x76>

        mrf_rx_enable();
 5d4:	9b df       	rcall	.-202    	; 0x50c <mrf_rx_enable>
    //    sei();
    }
    if (last_interrupt & MRF_I_TXNIF) {
 5d6:	b0 fe       	sbrs	r11, 0
 5d8:	1c c0       	rjmp	.+56     	; 0x612 <mrf_interrupt_handler+0xfe>
        flag_got_tx++;
 5da:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <flag_got_tx>
 5de:	8f 5f       	subi	r24, 0xFF	; 255
 5e0:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <flag_got_tx>
        mrf_reg_TXSTAT = mrf_read_short(MRF_TXSTAT);
 5e4:	84 e2       	ldi	r24, 0x24	; 36
 5e6:	38 de       	rcall	.-912    	; 0x258 <mrf_read_short>
 5e8:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <mrf_reg_TXSTAT>
        // 1 means it failed, we want 1 to mean it worked.
        tx_info.tx_ok = !(mrf_reg_TXSTAT & 0x3F);
 5ec:	98 2f       	mov	r25, r24
 5ee:	9f 73       	andi	r25, 0x3F	; 63
 5f0:	21 e0       	ldi	r18, 0x01	; 1
 5f2:	09 f0       	breq	.+2      	; 0x5f6 <mrf_interrupt_handler+0xe2>
 5f4:	20 e0       	ldi	r18, 0x00	; 0
 5f6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <tx_info>
 5fa:	20 fb       	bst	r18, 0
 5fc:	90 f9       	bld	r25, 0
        tx_info.retries = mrf_reg_TXSTAT >> 6;
 5fe:	82 95       	swap	r24
 600:	86 95       	lsr	r24
 602:	86 95       	lsr	r24
 604:	83 70       	andi	r24, 0x03	; 3
 606:	88 0f       	add	r24, r24
 608:	99 7f       	andi	r25, 0xF9	; 249
        tx_info.channel_busy = (mrf_reg_TXSTAT & (1 << CCAFAIL));
 60a:	89 2b       	or	r24, r25
 60c:	87 7f       	andi	r24, 0xF7	; 247
 60e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tx_info>
    }
//DROP_ISR_MUTEX;
    isr_lock = 0;
 612:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <isr_lock>
}
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	1f 91       	pop	r17
 61c:	0f 91       	pop	r16
 61e:	ff 90       	pop	r15
 620:	ef 90       	pop	r14
 622:	df 90       	pop	r13
 624:	cf 90       	pop	r12
 626:	bf 90       	pop	r11
 628:	af 90       	pop	r10
 62a:	08 95       	ret

0000062c <mrf_get_rxdata>:
}

uint8_t* mrf_get_rxdata()
{
	return rx_info.rx_data;
}
 62c:	87 e0       	ldi	r24, 0x07	; 7
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	08 95       	ret

00000632 <spi_setup>:

void spi_setup()
{

	#ifndef SPI_ON_USI
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0); //enables SPI, sets chip as master, sets clock speed to fosc/16
 632:	81 e5       	ldi	r24, 0x51	; 81
 634:	8c bd       	out	0x2c, r24	; 44
 636:	08 95       	ret

00000638 <spi_transfer_byte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 638:	e7 ea       	ldi	r30, 0xA7	; 167
 63a:	f1 e6       	ldi	r31, 0x61	; 97
 63c:	31 97       	sbiw	r30, 0x01	; 1
 63e:	f1 f7       	brne	.-4      	; 0x63c <spi_transfer_byte+0x4>
 640:	00 c0       	rjmp	.+0      	; 0x642 <spi_transfer_byte+0xa>
 642:	00 00       	nop
void spi_transfer_byte(uint8_t* bout, uint8_t* bin)
{
	/*Outgoing data into data register*/
	//PORTD |= (1<<GREEN_LIGHT);
	_delay_ms(100);
	DATAREG = *bout;
 644:	fc 01       	movw	r30, r24
 646:	80 81       	ld	r24, Z
 648:	8e bd       	out	0x2e, r24	; 46
	while(! SPI_BYTE_XFER_DONE)
 64a:	0d b4       	in	r0, 0x2d	; 45
 64c:	07 fe       	sbrs	r0, 7
 64e:	fd cf       	rjmp	.-6      	; 0x64a <spi_transfer_byte+0x12>
		USICR = usi_clk_lo;
		USICR = usi_clk_hi;
		#endif
	} 
	/*Incoming data out of data register*/
	*bin = DATAREG;
 650:	8e b5       	in	r24, 0x2e	; 46
 652:	fb 01       	movw	r30, r22
 654:	80 83       	st	Z, r24
 656:	08 95       	ret

00000658 <spi_transfer_nbytes>:
}

/*Selects the slave (cs)  and transfers n bytes. The input and output buffers must be defined and contain at least n bytes each*/

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
 658:	cf 92       	push	r12
 65a:	df 92       	push	r13
 65c:	ef 92       	push	r14
 65e:	ff 92       	push	r15
 660:	0f 93       	push	r16
 662:	1f 93       	push	r17
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
 668:	ec 01       	movw	r28, r24
 66a:	8b 01       	movw	r16, r22
 66c:	3f e3       	ldi	r19, 0x3F	; 63
 66e:	8d e0       	ldi	r24, 0x0D	; 13
 670:	93 e0       	ldi	r25, 0x03	; 3
 672:	31 50       	subi	r19, 0x01	; 1
 674:	80 40       	sbci	r24, 0x00	; 0
 676:	90 40       	sbci	r25, 0x00	; 0
 678:	e1 f7       	brne	.-8      	; 0x672 <spi_transfer_nbytes+0x1a>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <spi_transfer_nbytes+0x24>
 67c:	00 00       	nop
	DDRD |= (1<<RED_LIGHT);
	DDRD |= (1<<GREEN_LIGHT);
	PORTD |= (1<<BLUE_LIGHT);*/
	_delay_ms(1000);
	//PORTD &= ~(1<<BLUE_LIGHT);
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
 67e:	85 b1       	in	r24, 0x05	; 5
 680:	61 e0       	ldi	r22, 0x01	; 1
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	6b 01       	movw	r12, r22
 686:	02 c0       	rjmp	.+4      	; 0x68c <spi_transfer_nbytes+0x34>
 688:	cc 0c       	add	r12, r12
 68a:	dd 1c       	adc	r13, r13
 68c:	2a 95       	dec	r18
 68e:	e2 f7       	brpl	.-8      	; 0x688 <spi_transfer_nbytes+0x30>
 690:	9c 2d       	mov	r25, r12
 692:	90 95       	com	r25
 694:	89 23       	and	r24, r25
 696:	85 b9       	out	0x05, r24	; 5
	while(n)
 698:	44 23       	and	r20, r20
 69a:	a9 f0       	breq	.+42     	; 0x6c6 <spi_transfer_nbytes+0x6e>
 69c:	41 50       	subi	r20, 0x01	; 1
 69e:	e4 2e       	mov	r14, r20
 6a0:	f1 2c       	mov	r15, r1
 6a2:	3f ef       	ldi	r19, 0xFF	; 255
 6a4:	e3 1a       	sub	r14, r19
 6a6:	f3 0a       	sbc	r15, r19
 6a8:	ec 0e       	add	r14, r28
 6aa:	fd 1e       	adc	r15, r29
	{
		PORTD |= (1<<RED_LIGHT);
 6ac:	5f 9a       	sbi	0x0b, 7	; 11
		//_delay_ms(1000);
		PORTD &= ~(1<<RED_LIGHT);
 6ae:	5f 98       	cbi	0x0b, 7	; 11
		//_delay_ms(1000);
		spi_transfer_byte(out,in);    /*transfer byte */
 6b0:	b8 01       	movw	r22, r16
 6b2:	ce 01       	movw	r24, r28
 6b4:	c1 df       	rcall	.-126    	; 0x638 <spi_transfer_byte>
		PORTD |= (1<<RED_LIGHT);
 6b6:	5f 9a       	sbi	0x0b, 7	; 11
		//_delay_ms(1000);
		PORTD &= ~(1<<RED_LIGHT);
 6b8:	5f 98       	cbi	0x0b, 7	; 11
		//_delay_ms(1000);
		/*advance iterators*/
		out = out + 1;
 6ba:	21 96       	adiw	r28, 0x01	; 1
		in = in + 1;
 6bc:	0f 5f       	subi	r16, 0xFF	; 255
 6be:	1f 4f       	sbci	r17, 0xFF	; 255
	DDRD |= (1<<GREEN_LIGHT);
	PORTD |= (1<<BLUE_LIGHT);*/
	_delay_ms(1000);
	//PORTD &= ~(1<<BLUE_LIGHT);
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
	while(n)
 6c0:	ec 16       	cp	r14, r28
 6c2:	fd 06       	cpc	r15, r29
 6c4:	99 f7       	brne	.-26     	; 0x6ac <spi_transfer_nbytes+0x54>
		/*advance iterators*/
		out = out + 1;
		in = in + 1;
		n = n - 1;
	}
	CS_PORT |= 1<<cs;/*Deselect slave chip*/
 6c6:	85 b1       	in	r24, 0x05	; 5
 6c8:	c8 2a       	or	r12, r24
 6ca:	c5 b8       	out	0x05, r12	; 5
}
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	1f 91       	pop	r17
 6d2:	0f 91       	pop	r16
 6d4:	ff 90       	pop	r15
 6d6:	ef 90       	pop	r14
 6d8:	df 90       	pop	r13
 6da:	cf 90       	pop	r12
 6dc:	08 95       	ret

000006de <memcpy>:
 6de:	fb 01       	movw	r30, r22
 6e0:	dc 01       	movw	r26, r24
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <memcpy+0xa>
 6e4:	01 90       	ld	r0, Z+
 6e6:	0d 92       	st	X+, r0
 6e8:	41 50       	subi	r20, 0x01	; 1
 6ea:	50 40       	sbci	r21, 0x00	; 0
 6ec:	d8 f7       	brcc	.-10     	; 0x6e4 <memcpy+0x6>
 6ee:	08 95       	ret

000006f0 <_exit>:
 6f0:	f8 94       	cli

000006f2 <__stop_program>:
 6f2:	ff cf       	rjmp	.-2      	; 0x6f2 <__stop_program>
