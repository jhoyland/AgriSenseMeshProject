
3WayRelay-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000088a  0000091e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000088a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015c  00800102  00800102  00000920  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000950  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025cf  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4d  00000000  00000000  0000318b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f40  00000000  00000000  00003dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000584  00000000  00000000  00004d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000090b  00000000  00000000  0000529c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016d4  00000000  00000000  00005ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0000727b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	85 c0       	rjmp	.+266    	; 0x10e <__vector_1>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	ea e8       	ldi	r30, 0x8A	; 138
  3c:	f8 e0       	ldi	r31, 0x08	; 8
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a2 30       	cpi	r26, 0x02	; 2
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	22 e0       	ldi	r18, 0x02	; 2
  4c:	a2 e0       	ldi	r26, 0x02	; 2
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	ae 35       	cpi	r26, 0x5E	; 94
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	a1 d1       	rcall	.+834    	; 0x39e <main>
  5c:	14 c4       	rjmp	.+2088   	; 0x886 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <bytes_to_word>:
uint16_t bytes_to_word(uint8_t* b)
{
    uint16_t hi = (uint16_t) b[0];
    uint16_t lo = (uint16_t) b[1];

    return (hi << 8) | lo;
  60:	fc 01       	movw	r30, r24
  62:	20 81       	ld	r18, Z
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	32 2f       	mov	r19, r18
  68:	22 27       	eor	r18, r18
  6a:	81 81       	ldd	r24, Z+1	; 0x01
}
  6c:	a9 01       	movw	r20, r18
  6e:	48 2b       	or	r20, r24
  70:	ca 01       	movw	r24, r20
  72:	08 95       	ret

00000074 <word_to_bytes>:

void word_to_bytes(uint8_t* b, uint16_t d)
{
    b[0] = (uint8_t)(d >> 8);
  74:	fc 01       	movw	r30, r24
  76:	70 83       	st	Z, r23
    b[1] = (uint8_t)(255 & d);
  78:	61 83       	std	Z+1, r22	; 0x01
  7a:	08 95       	ret

0000007c <handle_tx>:
	running_status &= ~(1<<RU_RX_HANDLE);
}


void loop()
{
  7c:	08 95       	ret

0000007e <setup>:
  7e:	55 9a       	sbi	0x0a, 5	; 10
  80:	56 9a       	sbi	0x0a, 6	; 10
  82:	57 9a       	sbi	0x0a, 7	; 10
  84:	85 b1       	in	r24, 0x05	; 5
  86:	8c 6e       	ori	r24, 0xEC	; 236
  88:	85 b9       	out	0x05, r24	; 5
  8a:	84 b1       	in	r24, 0x04	; 4
  8c:	8c 6e       	ori	r24, 0xEC	; 236
  8e:	84 b9       	out	0x04, r24	; 4
  90:	24 98       	cbi	0x04, 4	; 4
  92:	ad d3       	rcall	.+1882   	; 0x7ee <spi_setup>
  94:	8b d1       	rcall	.+790    	; 0x3ac <mrf_reset>
  96:	8c d2       	rcall	.+1304   	; 0x5b0 <mrf_init>
  98:	8e ef       	ldi	r24, 0xFE	; 254
  9a:	9a ec       	ldi	r25, 0xCA	; 202
  9c:	f5 d1       	rcall	.+1002   	; 0x488 <mrf_set_pan>
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	fc d1       	rcall	.+1016   	; 0x49c <mrf_address16_write>
  a4:	78 94       	sei
  a6:	e8 9a       	sbi	0x1d, 0	; 29
  a8:	e9 e6       	ldi	r30, 0x69	; 105
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
  b2:	82 e3       	ldi	r24, 0x32	; 50
  b4:	92 e0       	ldi	r25, 0x02	; 2
  b6:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <transmit_command_header+0x1>
  ba:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <transmit_command_header>
  be:	8a e0       	ldi	r24, 0x0A	; 10
  c0:	92 e0       	ldi	r25, 0x02	; 2
  c2:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <recieved_command_header+0x1>
  c6:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <recieved_command_header>
  ca:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <neighbor_status>
  ce:	8a e0       	ldi	r24, 0x0A	; 10
  d0:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <command_status>
  d4:	88 e2       	ldi	r24, 0x28	; 40
  d6:	ea e2       	ldi	r30, 0x2A	; 42
  d8:	f2 e0       	ldi	r31, 0x02	; 2
  da:	df 01       	movw	r26, r30
  dc:	98 2f       	mov	r25, r24
  de:	1d 92       	st	X+, r1
  e0:	9a 95       	dec	r25
  e2:	e9 f7       	brne	.-6      	; 0xde <setup+0x60>
  e4:	e2 e0       	ldi	r30, 0x02	; 2
  e6:	f2 e0       	ldi	r31, 0x02	; 2
  e8:	df 01       	movw	r26, r30
  ea:	1d 92       	st	X+, r1
  ec:	8a 95       	dec	r24
  ee:	e9 f7       	brne	.-6      	; 0xea <setup+0x6c>
  f0:	5f 9a       	sbi	0x0b, 7	; 11
  f2:	8f e4       	ldi	r24, 0x4F	; 79
  f4:	93 ec       	ldi	r25, 0xC3	; 195
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <setup+0x78>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <setup+0x7e>
  fc:	00 00       	nop
  fe:	5f 98       	cbi	0x0b, 7	; 11
 100:	af e4       	ldi	r26, 0x4F	; 79
 102:	b3 ec       	ldi	r27, 0xC3	; 195
 104:	11 97       	sbiw	r26, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <setup+0x86>
 108:	00 c0       	rjmp	.+0      	; 0x10a <setup+0x8c>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <__vector_1>:
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
 130:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 134:	80 61       	ori	r24, 0x10	; 16
 136:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 13a:	a5 d2       	rcall	.+1354   	; 0x686 <mrf_interrupt_handler>
 13c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 140:	8f 7e       	andi	r24, 0xEF	; 239
 142:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	7f 91       	pop	r23
 154:	6f 91       	pop	r22
 156:	5f 91       	pop	r21
 158:	4f 91       	pop	r20
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <send_message>:
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	8c 01       	movw	r16, r24
 172:	eb 01       	movw	r28, r22
 174:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <PAN_ID>
 178:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <PAN_ID+0x1>
 17c:	ce 01       	movw	r24, r28
 17e:	12 d3       	rcall	.+1572   	; 0x7a4 <Set_Dest_Panid>
 180:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <PAN_ID>
 184:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <PAN_ID+0x1>
 188:	ce 01       	movw	r24, r28
 18a:	0e d3       	rcall	.+1564   	; 0x7a8 <Set_Src_Panid>
 18c:	68 e2       	ldi	r22, 0x28	; 40
 18e:	ce 01       	movw	r24, r28
 190:	0e d3       	rcall	.+1564   	; 0x7ae <Set_Packet_Size>
 192:	b8 01       	movw	r22, r16
 194:	ce 01       	movw	r24, r28
 196:	0e d3       	rcall	.+1564   	; 0x7b4 <Set_Target_Node>
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	ce 01       	movw	r24, r28
 19c:	21 d3       	rcall	.+1602   	; 0x7e0 <Set_Src_Node>
 19e:	48 e2       	ldi	r20, 0x28	; 40
 1a0:	be 01       	movw	r22, r28
 1a2:	c8 01       	movw	r24, r16
 1a4:	94 d1       	rcall	.+808    	; 0x4ce <mrf_send16>
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	08 95       	ret

000001b0 <get_data>:
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	7c 01       	movw	r14, r24
 1bc:	eb 01       	movw	r28, r22
 1be:	5e 9a       	sbi	0x0b, 6	; 11
 1c0:	8f e4       	ldi	r24, 0x4F	; 79
 1c2:	93 ec       	ldi	r25, 0xC3	; 195
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <get_data+0x14>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <get_data+0x1a>
 1ca:	00 00       	nop
 1cc:	5e 98       	cbi	0x0b, 6	; 11
 1ce:	8f e4       	ldi	r24, 0x4F	; 79
 1d0:	93 ec       	ldi	r25, 0xC3	; 195
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <get_data+0x22>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <get_data+0x28>
 1d8:	00 00       	nop
 1da:	04 e0       	ldi	r16, 0x04	; 4
 1dc:	23 e0       	ldi	r18, 0x03	; 3
 1de:	42 e0       	ldi	r20, 0x02	; 2
 1e0:	61 e4       	ldi	r22, 0x41	; 65
 1e2:	74 e4       	ldi	r23, 0x44	; 68
 1e4:	ce 01       	movw	r24, r28
 1e6:	e9 d2       	rcall	.+1490   	; 0x7ba <Set_Command>
 1e8:	be 01       	movw	r22, r28
 1ea:	c7 01       	movw	r24, r14
 1ec:	bd df       	rcall	.-134    	; 0x168 <send_message>
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	0f 91       	pop	r16
 1f4:	ff 90       	pop	r15
 1f6:	ef 90       	pop	r14
 1f8:	08 95       	ret

000001fa <forward_data>:
 1fa:	ef 92       	push	r14
 1fc:	ff 92       	push	r15
 1fe:	0f 93       	push	r16
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	7c 01       	movw	r14, r24
 206:	eb 01       	movw	r28, r22
 208:	04 e0       	ldi	r16, 0x04	; 4
 20a:	23 e0       	ldi	r18, 0x03	; 3
 20c:	42 e0       	ldi	r20, 0x02	; 2
 20e:	6e ec       	ldi	r22, 0xCE	; 206
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	ce 01       	movw	r24, r28
 214:	d2 d2       	rcall	.+1444   	; 0x7ba <Set_Command>
 216:	be 01       	movw	r22, r28
 218:	c7 01       	movw	r24, r14
 21a:	a6 df       	rcall	.-180    	; 0x168 <send_message>
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	08 95       	ret

00000228 <COMMAND_HANDLER>:
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	8c 01       	movw	r16, r24
 232:	5d 9a       	sbi	0x0b, 5	; 11
 234:	8f e4       	ldi	r24, 0x4F	; 79
 236:	93 ec       	ldi	r25, 0xC3	; 195
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <COMMAND_HANDLER+0x10>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <COMMAND_HANDLER+0x16>
 23e:	00 00       	nop
 240:	5d 98       	cbi	0x0b, 5	; 11
 242:	ef e4       	ldi	r30, 0x4F	; 79
 244:	f3 ec       	ldi	r31, 0xC3	; 195
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <COMMAND_HANDLER+0x1e>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <COMMAND_HANDLER+0x24>
 24c:	00 00       	nop
 24e:	e8 01       	movw	r28, r16
 250:	2a 96       	adiw	r28, 0x0a	; 10
 252:	ce 01       	movw	r24, r28
 254:	05 df       	rcall	.-502    	; 0x60 <bytes_to_word>
 256:	82 35       	cpi	r24, 0x52	; 82
 258:	95 44       	sbci	r25, 0x45	; 69
 25a:	f1 f4       	brne	.+60     	; 0x298 <COMMAND_HANDLER+0x70>
 25c:	c8 01       	movw	r24, r16
 25e:	06 96       	adiw	r24, 0x06	; 6
 260:	ff de       	rcall	.-514    	; 0x60 <bytes_to_word>
 262:	82 34       	cpi	r24, 0x42	; 66
 264:	91 43       	sbci	r25, 0x31	; 49
 266:	c1 f4       	brne	.+48     	; 0x298 <COMMAND_HANDLER+0x70>
 268:	5e 9a       	sbi	0x0b, 6	; 11
 26a:	8f e4       	ldi	r24, 0x4F	; 79
 26c:	93 ec       	ldi	r25, 0xC3	; 195
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <COMMAND_HANDLER+0x46>
 272:	00 c0       	rjmp	.+0      	; 0x274 <COMMAND_HANDLER+0x4c>
 274:	00 00       	nop
 276:	5e 98       	cbi	0x0b, 6	; 11
 278:	ef e4       	ldi	r30, 0x4F	; 79
 27a:	f3 ec       	ldi	r31, 0xC3	; 195
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <COMMAND_HANDLER+0x54>
 280:	00 c0       	rjmp	.+0      	; 0x282 <COMMAND_HANDLER+0x5a>
 282:	00 00       	nop
 284:	6a e2       	ldi	r22, 0x2A	; 42
 286:	72 e0       	ldi	r23, 0x02	; 2
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	91 df       	rcall	.-222    	; 0x1b0 <get_data>
 28e:	88 e2       	ldi	r24, 0x28	; 40
 290:	f8 01       	movw	r30, r16
 292:	11 92       	st	Z+, r1
 294:	8a 95       	dec	r24
 296:	e9 f7       	brne	.-6      	; 0x292 <COMMAND_HANDLER+0x6a>
 298:	ce 01       	movw	r24, r28
 29a:	e2 de       	rcall	.-572    	; 0x60 <bytes_to_word>
 29c:	8e 3c       	cpi	r24, 0xCE	; 206
 29e:	91 05       	cpc	r25, r1
 2a0:	29 f5       	brne	.+74     	; 0x2ec <COMMAND_HANDLER+0xc4>
 2a2:	5d 9a       	sbi	0x0b, 5	; 11
 2a4:	8f e4       	ldi	r24, 0x4F	; 79
 2a6:	93 ec       	ldi	r25, 0xC3	; 195
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <COMMAND_HANDLER+0x80>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <COMMAND_HANDLER+0x86>
 2ae:	00 00       	nop
 2b0:	5d 98       	cbi	0x0b, 5	; 11
 2b2:	ef e4       	ldi	r30, 0x4F	; 79
 2b4:	f3 ec       	ldi	r31, 0xC3	; 195
 2b6:	31 97       	sbiw	r30, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <COMMAND_HANDLER+0x8e>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <COMMAND_HANDLER+0x94>
 2bc:	00 00       	nop
 2be:	5e 9a       	sbi	0x0b, 6	; 11
 2c0:	8f e4       	ldi	r24, 0x4F	; 79
 2c2:	93 ec       	ldi	r25, 0xC3	; 195
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <COMMAND_HANDLER+0x9c>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <COMMAND_HANDLER+0xa2>
 2ca:	00 00       	nop
 2cc:	5e 98       	cbi	0x0b, 6	; 11
 2ce:	ef e4       	ldi	r30, 0x4F	; 79
 2d0:	f3 ec       	ldi	r31, 0xC3	; 195
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <COMMAND_HANDLER+0xaa>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <COMMAND_HANDLER+0xb0>
 2d8:	00 00       	nop
 2da:	b8 01       	movw	r22, r16
 2dc:	82 e4       	ldi	r24, 0x42	; 66
 2de:	91 e3       	ldi	r25, 0x31	; 49
 2e0:	8c df       	rcall	.-232    	; 0x1fa <forward_data>
 2e2:	88 e2       	ldi	r24, 0x28	; 40
 2e4:	f8 01       	movw	r30, r16
 2e6:	11 92       	st	Z+, r1
 2e8:	8a 95       	dec	r24
 2ea:	e9 f7       	brne	.-6      	; 0x2e6 <COMMAND_HANDLER+0xbe>
 2ec:	ce 01       	movw	r24, r28
 2ee:	b8 de       	rcall	.-656    	; 0x60 <bytes_to_word>
 2f0:	81 34       	cpi	r24, 0x41	; 65
 2f2:	94 44       	sbci	r25, 0x44	; 68
 2f4:	f1 f4       	brne	.+60     	; 0x332 <__stack+0x33>
 2f6:	5e 9a       	sbi	0x0b, 6	; 11
 2f8:	8f e4       	ldi	r24, 0x4F	; 79
 2fa:	93 ec       	ldi	r25, 0xC3	; 195
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <COMMAND_HANDLER+0xd4>
 300:	00 c0       	rjmp	.+0      	; 0x302 <__stack+0x3>
 302:	00 00       	nop
 304:	5e 98       	cbi	0x0b, 6	; 11
 306:	ef e4       	ldi	r30, 0x4F	; 79
 308:	f3 ec       	ldi	r31, 0xC3	; 195
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <__stack+0xb>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <__stack+0x11>
 310:	00 00       	nop
 312:	65 e5       	ldi	r22, 0x55	; 85
 314:	75 e5       	ldi	r23, 0x55	; 85
 316:	8a e2       	ldi	r24, 0x2A	; 42
 318:	92 e0       	ldi	r25, 0x02	; 2
 31a:	66 d2       	rcall	.+1228   	; 0x7e8 <Add_Data>
 31c:	c8 01       	movw	r24, r16
 31e:	06 96       	adiw	r24, 0x06	; 6
 320:	9f de       	rcall	.-706    	; 0x60 <bytes_to_word>
 322:	6a e2       	ldi	r22, 0x2A	; 42
 324:	72 e0       	ldi	r23, 0x02	; 2
 326:	69 df       	rcall	.-302    	; 0x1fa <forward_data>
 328:	88 e2       	ldi	r24, 0x28	; 40
 32a:	f8 01       	movw	r30, r16
 32c:	11 92       	st	Z+, r1
 32e:	8a 95       	dec	r24
 330:	e9 f7       	brne	.-6      	; 0x32c <__stack+0x2d>
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	08 95       	ret

0000033c <handle_rx>:
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 344:	88 60       	ori	r24, 0x08	; 8
 346:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 34a:	90 d1       	rcall	.+800    	; 0x66c <mrf_rx_datalength>
 34c:	ec 01       	movw	r28, r24
 34e:	27 d2       	rcall	.+1102   	; 0x79e <mrf_get_rxdata>
 350:	ae 01       	movw	r20, r28
 352:	bc 01       	movw	r22, r24
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	92 e0       	ldi	r25, 0x02	; 2
 358:	8d d2       	rcall	.+1306   	; 0x874 <memcpy>
 35a:	84 e0       	ldi	r24, 0x04	; 4
 35c:	92 e0       	ldi	r25, 0x02	; 2
 35e:	80 de       	rcall	.-768    	; 0x60 <bytes_to_word>
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	91 f4       	brne	.+36     	; 0x388 <handle_rx+0x4c>
 364:	5f 9a       	sbi	0x0b, 7	; 11
 366:	8f e4       	ldi	r24, 0x4F	; 79
 368:	93 ec       	ldi	r25, 0xC3	; 195
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <handle_rx+0x2e>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <handle_rx+0x34>
 370:	00 00       	nop
 372:	5f 98       	cbi	0x0b, 7	; 11
 374:	8f e4       	ldi	r24, 0x4F	; 79
 376:	93 ec       	ldi	r25, 0xC3	; 195
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <handle_rx+0x3c>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <handle_rx+0x42>
 37e:	00 00       	nop
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	92 e0       	ldi	r25, 0x02	; 2
 384:	51 df       	rcall	.-350    	; 0x228 <COMMAND_HANDLER>
 386:	03 c0       	rjmp	.+6      	; 0x38e <handle_rx+0x52>
 388:	84 e0       	ldi	r24, 0x04	; 4
 38a:	92 e0       	ldi	r25, 0x02	; 2
 38c:	69 de       	rcall	.-814    	; 0x60 <bytes_to_word>
 38e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 392:	87 7f       	andi	r24, 0xF7	; 247
 394:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <main>:
	
}
int main(void)
{
	setup();
 39e:	6f de       	rcall	.-802    	; 0x7e <setup>
    while (1) 
    {
		mrf_check_flags(&handle_rx,&handle_tx);
 3a0:	6e e3       	ldi	r22, 0x3E	; 62
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	8e e9       	ldi	r24, 0x9E	; 158
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	47 d1       	rcall	.+654    	; 0x638 <mrf_check_flags>
 3aa:	fa cf       	rjmp	.-12     	; 0x3a0 <main+0x2>

000003ac <mrf_reset>:
        mrf_write_long(MRF_TESTMODE, 0x00); // Disable PA/LNA on MRF24J40MB module.
    }
}

void mrf_rx_flush(void) {
    mrf_write_short(MRF_RXFLUSH, 0x01);
 3ac:	59 98       	cbi	0x0b, 1	; 11
 3ae:	87 ea       	ldi	r24, 0xA7	; 167
 3b0:	91 e6       	ldi	r25, 0x61	; 97
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <mrf_reset+0x6>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <mrf_reset+0xc>
 3b8:	00 00       	nop
 3ba:	59 9a       	sbi	0x0b, 1	; 11
 3bc:	83 e2       	ldi	r24, 0x23	; 35
 3be:	94 ef       	ldi	r25, 0xF4	; 244
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <mrf_reset+0x14>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <mrf_reset+0x1a>
 3c6:	00 00       	nop
 3c8:	08 95       	ret

000003ca <mrf_read_short>:
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	c3 e0       	ldi	r28, 0x03	; 3
 3d0:	d1 e0       	ldi	r29, 0x01	; 1
 3d2:	88 0f       	add	r24, r24
 3d4:	8e 77       	andi	r24, 0x7E	; 126
 3d6:	88 83       	st	Y, r24
 3d8:	19 82       	std	Y+1, r1	; 0x01
 3da:	26 e0       	ldi	r18, 0x06	; 6
 3dc:	42 e0       	ldi	r20, 0x02	; 2
 3de:	be 01       	movw	r22, r28
 3e0:	ce 01       	movw	r24, r28
 3e2:	12 d2       	rcall	.+1060   	; 0x808 <spi_transfer_nbytes>
 3e4:	89 81       	ldd	r24, Y+1	; 0x01
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <mrf_read_long>:
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	c3 e0       	ldi	r28, 0x03	; 3
 3f2:	d1 e0       	ldi	r29, 0x01	; 1
 3f4:	9c 01       	movw	r18, r24
 3f6:	36 95       	lsr	r19
 3f8:	27 95       	ror	r18
 3fa:	36 95       	lsr	r19
 3fc:	27 95       	ror	r18
 3fe:	36 95       	lsr	r19
 400:	27 95       	ror	r18
 402:	20 68       	ori	r18, 0x80	; 128
 404:	28 83       	st	Y, r18
 406:	82 95       	swap	r24
 408:	88 0f       	add	r24, r24
 40a:	80 7e       	andi	r24, 0xE0	; 224
 40c:	89 83       	std	Y+1, r24	; 0x01
 40e:	1a 82       	std	Y+2, r1	; 0x02
 410:	26 e0       	ldi	r18, 0x06	; 6
 412:	43 e0       	ldi	r20, 0x03	; 3
 414:	be 01       	movw	r22, r28
 416:	ce 01       	movw	r24, r28
 418:	f7 d1       	rcall	.+1006   	; 0x808 <spi_transfer_nbytes>
 41a:	8a 81       	ldd	r24, Y+2	; 0x02
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <mrf_write_short>:
 422:	e3 e0       	ldi	r30, 0x03	; 3
 424:	f1 e0       	ldi	r31, 0x01	; 1
 426:	88 0f       	add	r24, r24
 428:	8e 77       	andi	r24, 0x7E	; 126
 42a:	81 60       	ori	r24, 0x01	; 1
 42c:	80 83       	st	Z, r24
 42e:	61 83       	std	Z+1, r22	; 0x01
 430:	26 e0       	ldi	r18, 0x06	; 6
 432:	42 e0       	ldi	r20, 0x02	; 2
 434:	bf 01       	movw	r22, r30
 436:	cf 01       	movw	r24, r30
 438:	e7 d1       	rcall	.+974    	; 0x808 <spi_transfer_nbytes>
 43a:	08 95       	ret

0000043c <mrf_write_long>:
 43c:	e3 e0       	ldi	r30, 0x03	; 3
 43e:	f1 e0       	ldi	r31, 0x01	; 1
 440:	9c 01       	movw	r18, r24
 442:	36 95       	lsr	r19
 444:	27 95       	ror	r18
 446:	36 95       	lsr	r19
 448:	27 95       	ror	r18
 44a:	36 95       	lsr	r19
 44c:	27 95       	ror	r18
 44e:	20 68       	ori	r18, 0x80	; 128
 450:	20 83       	st	Z, r18
 452:	82 95       	swap	r24
 454:	88 0f       	add	r24, r24
 456:	80 7e       	andi	r24, 0xE0	; 224
 458:	80 61       	ori	r24, 0x10	; 16
 45a:	81 83       	std	Z+1, r24	; 0x01
 45c:	62 83       	std	Z+2, r22	; 0x02
 45e:	26 e0       	ldi	r18, 0x06	; 6
 460:	43 e0       	ldi	r20, 0x03	; 3
 462:	bf 01       	movw	r22, r30
 464:	cf 01       	movw	r24, r30
 466:	d0 d1       	rcall	.+928    	; 0x808 <spi_transfer_nbytes>
 468:	08 95       	ret

0000046a <mrf_get_pan>:
 46a:	cf 93       	push	r28
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	ad df       	rcall	.-166    	; 0x3ca <mrf_read_short>
 470:	c8 2f       	mov	r28, r24
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	aa df       	rcall	.-172    	; 0x3ca <mrf_read_short>
 476:	2c 2f       	mov	r18, r28
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	32 2f       	mov	r19, r18
 47c:	22 27       	eor	r18, r18
 47e:	a9 01       	movw	r20, r18
 480:	48 2b       	or	r20, r24
 482:	ca 01       	movw	r24, r20
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <mrf_set_pan>:
 488:	cf 93       	push	r28
 48a:	c8 2f       	mov	r28, r24
 48c:	69 2f       	mov	r22, r25
 48e:	82 e0       	ldi	r24, 0x02	; 2
 490:	c8 df       	rcall	.-112    	; 0x422 <mrf_write_short>
 492:	6c 2f       	mov	r22, r28
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	c5 df       	rcall	.-118    	; 0x422 <mrf_write_short>
 498:	cf 91       	pop	r28
 49a:	08 95       	ret

0000049c <mrf_address16_write>:
 49c:	cf 93       	push	r28
 49e:	c8 2f       	mov	r28, r24
 4a0:	69 2f       	mov	r22, r25
 4a2:	84 e0       	ldi	r24, 0x04	; 4
 4a4:	be df       	rcall	.-132    	; 0x422 <mrf_write_short>
 4a6:	6c 2f       	mov	r22, r28
 4a8:	83 e0       	ldi	r24, 0x03	; 3
 4aa:	bb df       	rcall	.-138    	; 0x422 <mrf_write_short>
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

000004b0 <mrf_address16_read>:
 4b0:	cf 93       	push	r28
 4b2:	84 e0       	ldi	r24, 0x04	; 4
 4b4:	8a df       	rcall	.-236    	; 0x3ca <mrf_read_short>
 4b6:	c8 2f       	mov	r28, r24
 4b8:	83 e0       	ldi	r24, 0x03	; 3
 4ba:	87 df       	rcall	.-242    	; 0x3ca <mrf_read_short>
 4bc:	2c 2f       	mov	r18, r28
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	32 2f       	mov	r19, r18
 4c2:	22 27       	eor	r18, r18
 4c4:	a9 01       	movw	r20, r18
 4c6:	48 2b       	or	r20, r24
 4c8:	ca 01       	movw	r24, r20
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <mrf_send16>:
 4ce:	df 92       	push	r13
 4d0:	ef 92       	push	r14
 4d2:	ff 92       	push	r15
 4d4:	0f 93       	push	r16
 4d6:	1f 93       	push	r17
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	d8 2f       	mov	r29, r24
 4de:	c9 2f       	mov	r28, r25
 4e0:	7b 01       	movw	r14, r22
 4e2:	d4 2e       	mov	r13, r20
 4e4:	69 e0       	ldi	r22, 0x09	; 9
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	a8 df       	rcall	.-176    	; 0x43c <mrf_write_long>
 4ec:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <ignoreBytes>
 4f0:	67 5f       	subi	r22, 0xF7	; 247
 4f2:	6d 0d       	add	r22, r13
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	a1 df       	rcall	.-190    	; 0x43c <mrf_write_long>
 4fa:	61 e6       	ldi	r22, 0x61	; 97
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	9d df       	rcall	.-198    	; 0x43c <mrf_write_long>
 502:	68 e8       	ldi	r22, 0x88	; 136
 504:	83 e0       	ldi	r24, 0x03	; 3
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	99 df       	rcall	.-206    	; 0x43c <mrf_write_long>
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	84 e0       	ldi	r24, 0x04	; 4
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	95 df       	rcall	.-214    	; 0x43c <mrf_write_long>
 512:	ab df       	rcall	.-170    	; 0x46a <mrf_get_pan>
 514:	19 2f       	mov	r17, r25
 516:	68 2f       	mov	r22, r24
 518:	85 e0       	ldi	r24, 0x05	; 5
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	8f df       	rcall	.-226    	; 0x43c <mrf_write_long>
 51e:	61 2f       	mov	r22, r17
 520:	86 e0       	ldi	r24, 0x06	; 6
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	8b df       	rcall	.-234    	; 0x43c <mrf_write_long>
 526:	6d 2f       	mov	r22, r29
 528:	87 e0       	ldi	r24, 0x07	; 7
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	87 df       	rcall	.-242    	; 0x43c <mrf_write_long>
 52e:	6c 2f       	mov	r22, r28
 530:	88 e0       	ldi	r24, 0x08	; 8
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	83 df       	rcall	.-250    	; 0x43c <mrf_write_long>
 536:	bc df       	rcall	.-136    	; 0x4b0 <mrf_address16_read>
 538:	c9 2f       	mov	r28, r25
 53a:	68 2f       	mov	r22, r24
 53c:	89 e0       	ldi	r24, 0x09	; 9
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	7d df       	rcall	.-262    	; 0x43c <mrf_write_long>
 542:	6c 2f       	mov	r22, r28
 544:	8a e0       	ldi	r24, 0x0A	; 10
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	79 df       	rcall	.-270    	; 0x43c <mrf_write_long>
 54a:	c0 91 7e 01 	lds	r28, 0x017E	; 0x80017e <ignoreBytes>
 54e:	d0 91 7f 01 	lds	r29, 0x017F	; 0x80017f <ignoreBytes+0x1>
 552:	2b 96       	adiw	r28, 0x0b	; 11
 554:	dd 20       	and	r13, r13
 556:	61 f0       	breq	.+24     	; 0x570 <mrf_send16+0xa2>
 558:	87 01       	movw	r16, r14
 55a:	ed 0c       	add	r14, r13
 55c:	f1 1c       	adc	r15, r1
 55e:	f8 01       	movw	r30, r16
 560:	61 91       	ld	r22, Z+
 562:	8f 01       	movw	r16, r30
 564:	ce 01       	movw	r24, r28
 566:	6a df       	rcall	.-300    	; 0x43c <mrf_write_long>
 568:	21 96       	adiw	r28, 0x01	; 1
 56a:	0e 15       	cp	r16, r14
 56c:	1f 05       	cpc	r17, r15
 56e:	b9 f7       	brne	.-18     	; 0x55e <mrf_send16+0x90>
 570:	65 e0       	ldi	r22, 0x05	; 5
 572:	8b e1       	ldi	r24, 0x1B	; 27
 574:	56 df       	rcall	.-340    	; 0x422 <mrf_write_short>
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	ff 90       	pop	r15
 580:	ef 90       	pop	r14
 582:	df 90       	pop	r13
 584:	08 95       	ret

00000586 <mrf_set_interrupts>:
 586:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <isr_lock>
 58a:	66 ef       	ldi	r22, 0xF6	; 246
 58c:	82 e3       	ldi	r24, 0x32	; 50
 58e:	49 df       	rcall	.-366    	; 0x422 <mrf_write_short>
 590:	08 95       	ret

00000592 <mrf_set_channel>:
 592:	68 2f       	mov	r22, r24
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	6b 50       	subi	r22, 0x0B	; 11
 598:	71 09       	sbc	r23, r1
 59a:	62 95       	swap	r22
 59c:	72 95       	swap	r23
 59e:	70 7f       	andi	r23, 0xF0	; 240
 5a0:	76 27       	eor	r23, r22
 5a2:	60 7f       	andi	r22, 0xF0	; 240
 5a4:	76 27       	eor	r23, r22
 5a6:	63 60       	ori	r22, 0x03	; 3
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	92 e0       	ldi	r25, 0x02	; 2
 5ac:	47 df       	rcall	.-370    	; 0x43c <mrf_write_long>
 5ae:	08 95       	ret

000005b0 <mrf_init>:
 5b0:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <mrf_flags>
 5b4:	67 e0       	ldi	r22, 0x07	; 7
 5b6:	8a e2       	ldi	r24, 0x2A	; 42
 5b8:	34 df       	rcall	.-408    	; 0x422 <mrf_write_short>
 5ba:	68 e9       	ldi	r22, 0x98	; 152
 5bc:	88 e1       	ldi	r24, 0x18	; 24
 5be:	31 df       	rcall	.-414    	; 0x422 <mrf_write_short>
 5c0:	65 e9       	ldi	r22, 0x95	; 149
 5c2:	8e e2       	ldi	r24, 0x2E	; 46
 5c4:	2e df       	rcall	.-420    	; 0x422 <mrf_write_short>
 5c6:	63 e0       	ldi	r22, 0x03	; 3
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	92 e0       	ldi	r25, 0x02	; 2
 5cc:	37 df       	rcall	.-402    	; 0x43c <mrf_write_long>
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	92 e0       	ldi	r25, 0x02	; 2
 5d4:	33 df       	rcall	.-410    	; 0x43c <mrf_write_long>
 5d6:	60 e8       	ldi	r22, 0x80	; 128
 5d8:	82 e0       	ldi	r24, 0x02	; 2
 5da:	92 e0       	ldi	r25, 0x02	; 2
 5dc:	2f df       	rcall	.-418    	; 0x43c <mrf_write_long>
 5de:	60 e9       	ldi	r22, 0x90	; 144
 5e0:	86 e0       	ldi	r24, 0x06	; 6
 5e2:	92 e0       	ldi	r25, 0x02	; 2
 5e4:	2b df       	rcall	.-426    	; 0x43c <mrf_write_long>
 5e6:	60 e8       	ldi	r22, 0x80	; 128
 5e8:	87 e0       	ldi	r24, 0x07	; 7
 5ea:	92 e0       	ldi	r25, 0x02	; 2
 5ec:	27 df       	rcall	.-434    	; 0x43c <mrf_write_long>
 5ee:	60 e1       	ldi	r22, 0x10	; 16
 5f0:	88 e0       	ldi	r24, 0x08	; 8
 5f2:	92 e0       	ldi	r25, 0x02	; 2
 5f4:	23 df       	rcall	.-442    	; 0x43c <mrf_write_long>
 5f6:	61 e2       	ldi	r22, 0x21	; 33
 5f8:	80 e2       	ldi	r24, 0x20	; 32
 5fa:	92 e0       	ldi	r25, 0x02	; 2
 5fc:	1f df       	rcall	.-450    	; 0x43c <mrf_write_long>
 5fe:	60 e8       	ldi	r22, 0x80	; 128
 600:	8a e3       	ldi	r24, 0x3A	; 58
 602:	0f df       	rcall	.-482    	; 0x422 <mrf_write_short>
 604:	60 e6       	ldi	r22, 0x60	; 96
 606:	8f e3       	ldi	r24, 0x3F	; 63
 608:	0c df       	rcall	.-488    	; 0x422 <mrf_write_short>
 60a:	60 e4       	ldi	r22, 0x40	; 64
 60c:	8e e3       	ldi	r24, 0x3E	; 62
 60e:	09 df       	rcall	.-494    	; 0x422 <mrf_write_short>
 610:	ba df       	rcall	.-140    	; 0x586 <mrf_set_interrupts>
 612:	84 e1       	ldi	r24, 0x14	; 20
 614:	be df       	rcall	.-132    	; 0x592 <mrf_set_channel>
 616:	64 e0       	ldi	r22, 0x04	; 4
 618:	86 e3       	ldi	r24, 0x36	; 54
 61a:	03 df       	rcall	.-506    	; 0x422 <mrf_write_short>
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	86 e3       	ldi	r24, 0x36	; 54
 620:	00 df       	rcall	.-512    	; 0x422 <mrf_write_short>
 622:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <flag_got_rx>
 626:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <flag_got_tx>
 62a:	89 ef       	ldi	r24, 0xF9	; 249
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	01 97       	sbiw	r24, 0x01	; 1
 630:	f1 f7       	brne	.-4      	; 0x62e <mrf_init+0x7e>
 632:	00 c0       	rjmp	.+0      	; 0x634 <mrf_init+0x84>
 634:	00 00       	nop
 636:	08 95       	ret

00000638 <mrf_check_flags>:
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
 63c:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <isr_lock>
 640:	21 11       	cpse	r18, r1
 642:	11 c0       	rjmp	.+34     	; 0x666 <mrf_check_flags+0x2e>
 644:	eb 01       	movw	r28, r22
 646:	fc 01       	movw	r30, r24
 648:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <flag_got_rx>
 64c:	22 23       	and	r18, r18
 64e:	19 f0       	breq	.+6      	; 0x656 <mrf_check_flags+0x1e>
 650:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <flag_got_rx>
 654:	09 95       	icall
 656:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <flag_got_tx>
 65a:	88 23       	and	r24, r24
 65c:	21 f0       	breq	.+8      	; 0x666 <mrf_check_flags+0x2e>
 65e:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <flag_got_tx>
 662:	fe 01       	movw	r30, r28
 664:	09 95       	icall
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	08 95       	ret

0000066c <mrf_rx_datalength>:
 66c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rx_info>
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0b 97       	sbiw	r24, 0x0b	; 11
 674:	08 95       	ret

00000676 <mrf_rx_disable>:
}

void mrf_rx_disable(void) {
    mrf_write_short(MRF_BBREG1, 0x04);  // RXDECINV - disable receiver
 676:	64 e0       	ldi	r22, 0x04	; 4
 678:	89 e3       	ldi	r24, 0x39	; 57
 67a:	d3 de       	rcall	.-602    	; 0x422 <mrf_write_short>
 67c:	08 95       	ret

0000067e <mrf_rx_enable>:
}

void mrf_rx_enable(void) {
    mrf_write_short(MRF_BBREG1, 0x00);  // RXDECINV - enable receiver
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	89 e3       	ldi	r24, 0x39	; 57
 682:	cf de       	rcall	.-610    	; 0x422 <mrf_write_short>
 684:	08 95       	ret

00000686 <mrf_interrupt_handler>:
 * Call this from within an interrupt handler connected to the MRFs output
 * interrupt pin.  It handles reading in any data from the module, and letting it
 * continue working.
 * Only the most recent data is ever kept.
 */
void mrf_interrupt_handler(void) {
 686:	af 92       	push	r10
 688:	bf 92       	push	r11
 68a:	cf 92       	push	r12
 68c:	df 92       	push	r13
 68e:	ef 92       	push	r14
 690:	ff 92       	push	r15
 692:	0f 93       	push	r16
 694:	1f 93       	push	r17
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
    //GRAB_ISR_MUTEX;
    isr_lock = 1;
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <isr_lock>
    uint8_t last_interrupt = mrf_read_short(MRF_INTSTAT);
 6a0:	81 e3       	ldi	r24, 0x31	; 49
 6a2:	93 de       	rcall	.-730    	; 0x3ca <mrf_read_short>
 6a4:	b8 2e       	mov	r11, r24
    if (last_interrupt & MRF_I_RXIF) {
 6a6:	83 ff       	sbrs	r24, 3
 6a8:	4f c0       	rjmp	.+158    	; 0x748 <mrf_interrupt_handler+0xc2>
        int i = 0;
        flag_got_rx++;
 6aa:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <flag_got_rx>
 6ae:	8f 5f       	subi	r24, 0xFF	; 255
 6b0:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <flag_got_rx>
        // read out the packet data...
    //    cli();
        mrf_rx_disable();
 6b4:	e0 df       	rcall	.-64     	; 0x676 <mrf_rx_disable>
        // read start of rxfifo for, has 2 bytes more added by FCS. frame_length = m + n + 2
        uint8_t frame_length = mrf_read_long(0x300);
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	93 e0       	ldi	r25, 0x03	; 3
 6ba:	98 de       	rcall	.-720    	; 0x3ec <mrf_read_long>
 6bc:	a8 2e       	mov	r10, r24

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
 6be:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <mrf_flags>
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 6c2:	ea 2c       	mov	r14, r10
 6c4:	f1 2c       	mov	r15, r1
 6c6:	1e 14       	cp	r1, r14
 6c8:	1f 04       	cpc	r1, r15
 6ca:	9c f4       	brge	.+38     	; 0x6f2 <mrf_interrupt_handler+0x6c>
 6cc:	c7 01       	movw	r24, r14
 6ce:	9c 01       	movw	r18, r24
 6d0:	20 58       	subi	r18, 0x80	; 128
 6d2:	3e 4f       	sbci	r19, 0xFE	; 254
 6d4:	69 01       	movw	r12, r18
 6d6:	c0 e8       	ldi	r28, 0x80	; 128
 6d8:	d1 e0       	ldi	r29, 0x01	; 1
                rx_buf[rb_ptr++] = mrf_read_long(0x301 + i);
 6da:	01 e0       	ldi	r16, 0x01	; 1
 6dc:	13 e0       	ldi	r17, 0x03	; 3
 6de:	00 58       	subi	r16, 0x80	; 128
 6e0:	11 40       	sbci	r17, 0x01	; 1
 6e2:	c8 01       	movw	r24, r16
 6e4:	8c 0f       	add	r24, r28
 6e6:	9d 1f       	adc	r25, r29
 6e8:	81 de       	rcall	.-766    	; 0x3ec <mrf_read_long>
 6ea:	89 93       	st	Y+, r24
        uint8_t frame_length = mrf_read_long(0x300);

        // buffer all bytes in PHY Payload
        if(mrf_flags | MRF_BUF_PHY){
            int rb_ptr = 0;
            for (i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
 6ec:	cc 15       	cp	r28, r12
 6ee:	dd 05       	cpc	r29, r13
 6f0:	c1 f7       	brne	.-16     	; 0x6e2 <mrf_interrupt_handler+0x5c>
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 6f2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rx_info>
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0b 97       	sbiw	r24, 0x0b	; 11
 6fa:	18 16       	cp	r1, r24
 6fc:	19 06       	cpc	r1, r25
 6fe:	ac f4       	brge	.+42     	; 0x72a <mrf_interrupt_handler+0xa4>
 700:	c8 e0       	ldi	r28, 0x08	; 8
 702:	d1 e0       	ldi	r29, 0x01	; 1
 704:	c1 2c       	mov	r12, r1
 706:	d1 2c       	mov	r13, r1
uint8_t * mrf_get_rxbuf(void) {
    return rx_buf;
}

int mrf_rx_datalength(void) {
    return rx_info.frame_length - bytes_nodata;
 708:	07 e0       	ldi	r16, 0x07	; 7
 70a:	11 e0       	ldi	r17, 0x01	; 1

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
 70c:	3f ef       	ldi	r19, 0xFF	; 255
 70e:	c3 1a       	sub	r12, r19
 710:	d3 0a       	sbc	r13, r19
 712:	c6 01       	movw	r24, r12
 714:	87 5f       	subi	r24, 0xF7	; 247
 716:	9c 4f       	sbci	r25, 0xFC	; 252
 718:	69 de       	rcall	.-814    	; 0x3ec <mrf_read_long>
 71a:	89 93       	st	Y+, r24
        }

        // buffer data bytes
        int rd_ptr = 0;
        // from (0x301 + bytes_MHR) to (0x301 + frame_length - bytes_nodata - 1)
        for (i = 0; i < mrf_rx_datalength(); i++) {
 71c:	f8 01       	movw	r30, r16
 71e:	80 81       	ld	r24, Z
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0b 97       	sbiw	r24, 0x0b	; 11
 724:	c8 16       	cp	r12, r24
 726:	d9 06       	cpc	r13, r25
 728:	8c f3       	brlt	.-30     	; 0x70c <mrf_interrupt_handler+0x86>
            rx_info.rx_data[rd_ptr++] = mrf_read_long(0x301 + bytes_MHR + i);
        }

        rx_info.frame_length = frame_length;
 72a:	a0 92 07 01 	sts	0x0107, r10	; 0x800107 <rx_info>
        // same as datasheet 0x301 + (m + n + 2) <-- frame_length
        rx_info.lqi = mrf_read_long(0x301 + frame_length);
 72e:	c7 01       	movw	r24, r14
 730:	8f 5f       	subi	r24, 0xFF	; 255
 732:	9c 4f       	sbci	r25, 0xFC	; 252
 734:	5b de       	rcall	.-842    	; 0x3ec <mrf_read_long>
 736:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <rx_info+0x75>
        // same as datasheet 0x301 + (m + n + 3) <-- frame_length + 1
        rx_info.rssi = mrf_read_long(0x301 + frame_length + 1);
 73a:	c7 01       	movw	r24, r14
 73c:	8e 5f       	subi	r24, 0xFE	; 254
 73e:	9c 4f       	sbci	r25, 0xFC	; 252
 740:	55 de       	rcall	.-854    	; 0x3ec <mrf_read_long>
 742:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <rx_info+0x76>

        mrf_rx_enable();
 746:	9b df       	rcall	.-202    	; 0x67e <mrf_rx_enable>
    //    sei();
    }
    if (last_interrupt & MRF_I_TXNIF) {
 748:	b0 fe       	sbrs	r11, 0
 74a:	1c c0       	rjmp	.+56     	; 0x784 <mrf_interrupt_handler+0xfe>
        flag_got_tx++;
 74c:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <flag_got_tx>
 750:	8f 5f       	subi	r24, 0xFF	; 255
 752:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <flag_got_tx>
        mrf_reg_TXSTAT = mrf_read_short(MRF_TXSTAT);
 756:	84 e2       	ldi	r24, 0x24	; 36
 758:	38 de       	rcall	.-912    	; 0x3ca <mrf_read_short>
 75a:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <mrf_reg_TXSTAT>
        // 1 means it failed, we want 1 to mean it worked.
        tx_info.tx_ok = !(mrf_reg_TXSTAT & 0x3F);
 75e:	98 2f       	mov	r25, r24
 760:	9f 73       	andi	r25, 0x3F	; 63
 762:	21 e0       	ldi	r18, 0x01	; 1
 764:	09 f0       	breq	.+2      	; 0x768 <mrf_interrupt_handler+0xe2>
 766:	20 e0       	ldi	r18, 0x00	; 0
 768:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <tx_info>
 76c:	20 fb       	bst	r18, 0
 76e:	90 f9       	bld	r25, 0
        tx_info.retries = mrf_reg_TXSTAT >> 6;
 770:	82 95       	swap	r24
 772:	86 95       	lsr	r24
 774:	86 95       	lsr	r24
 776:	83 70       	andi	r24, 0x03	; 3
 778:	88 0f       	add	r24, r24
 77a:	99 7f       	andi	r25, 0xF9	; 249
        tx_info.channel_busy = (mrf_reg_TXSTAT & (1 << CCAFAIL));
 77c:	89 2b       	or	r24, r25
 77e:	87 7f       	andi	r24, 0xF7	; 247
 780:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tx_info>
    }
//DROP_ISR_MUTEX;
    isr_lock = 0;
 784:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <isr_lock>
}
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	1f 91       	pop	r17
 78e:	0f 91       	pop	r16
 790:	ff 90       	pop	r15
 792:	ef 90       	pop	r14
 794:	df 90       	pop	r13
 796:	cf 90       	pop	r12
 798:	bf 90       	pop	r11
 79a:	af 90       	pop	r10
 79c:	08 95       	ret

0000079e <mrf_get_rxdata>:
}

uint8_t* mrf_get_rxdata()
{
	return rx_info.rx_data;
}
 79e:	88 e0       	ldi	r24, 0x08	; 8
 7a0:	91 e0       	ldi	r25, 0x01	; 1
 7a2:	08 95       	ret

000007a4 <Set_Dest_Panid>:
#include "bitmanip.h"
#include "packet_specs.h"

void Set_Dest_Panid(uint8_t* buff, uint16_t panid)
{
	word_to_bytes(&buff[PK_DEST_PANID_HI],panid);
 7a4:	67 dc       	rcall	.-1842   	; 0x74 <word_to_bytes>
 7a6:	08 95       	ret

000007a8 <Set_Src_Panid>:
}

void Set_Src_Panid(uint8_t* buff, uint16_t panid)
{
	word_to_bytes(&buff[PK_SRC_PANID_HI],panid);
 7a8:	04 96       	adiw	r24, 0x04	; 4
 7aa:	64 dc       	rcall	.-1848   	; 0x74 <word_to_bytes>
 7ac:	08 95       	ret

000007ae <Set_Packet_Size>:
}

void Set_Packet_Size(uint8_t* buff, uint8_t sz)
{
	buff[PK_COMMAND_HEADER + PK_SZ_PACKET] = sz;
 7ae:	fc 01       	movw	r30, r24
 7b0:	61 87       	std	Z+9, r22	; 0x09
 7b2:	08 95       	ret

000007b4 <Set_Target_Node>:
}

void Set_Target_Node(uint8_t* buff, uint16_t target_node)
{
	word_to_bytes(&buff[PK_DEST_ADDR_HI],target_node);
 7b4:	02 96       	adiw	r24, 0x02	; 2
 7b6:	5e dc       	rcall	.-1860   	; 0x74 <word_to_bytes>
 7b8:	08 95       	ret

000007ba <Set_Command>:
}

void Set_Command(uint8_t* buff, uint16_t cmd_id, /*uint8_t cmd2,*/ uint8_t cmd3, uint8_t cmd4, uint8_t cmd5)
{
 7ba:	ff 92       	push	r15
 7bc:	0f 93       	push	r16
 7be:	1f 93       	push	r17
 7c0:	cf 93       	push	r28
 7c2:	df 93       	push	r29
 7c4:	ec 01       	movw	r28, r24
 7c6:	f4 2e       	mov	r15, r20
 7c8:	12 2f       	mov	r17, r18
	word_to_bytes(&buff[PK_COMMAND_HEADER+PK_CMD_HI],cmd_id);
 7ca:	0a 96       	adiw	r24, 0x0a	; 10
 7cc:	53 dc       	rcall	.-1882   	; 0x74 <word_to_bytes>
	//buff[PK_COMMAND_HEADER+PK_CMD_DATA_0] = cmd2;
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_1] = cmd3;
 7ce:	fd 86       	std	Y+13, r15	; 0x0d
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_2] = cmd4;
 7d0:	1e 87       	std	Y+14, r17	; 0x0e
	buff[PK_COMMAND_HEADER+PK_CMD_DATA_3] = cmd5;
 7d2:	0f 87       	std	Y+15, r16	; 0x0f
}
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	1f 91       	pop	r17
 7da:	0f 91       	pop	r16
 7dc:	ff 90       	pop	r15
 7de:	08 95       	ret

000007e0 <Set_Src_Node>:

void Set_Src_Node(uint8_t* buff, uint8_t origin)
{
	//used for setting where this particular packet is coming from: the source of "data" would be held
	//later in the packet, in the data bytes.
	word_to_bytes(&buff[PK_SRC_ADDR_HI],origin);
 7e0:	70 e0       	ldi	r23, 0x00	; 0
 7e2:	06 96       	adiw	r24, 0x06	; 6
 7e4:	47 dc       	rcall	.-1906   	; 0x74 <word_to_bytes>
 7e6:	08 95       	ret

000007e8 <Add_Data>:
}

void Add_Data(uint8_t* buff, uint16_t data)
{
	word_to_bytes(&buff[PK_DATA_START],data);
 7e8:	40 96       	adiw	r24, 0x10	; 16
 7ea:	44 dc       	rcall	.-1912   	; 0x74 <word_to_bytes>
 7ec:	08 95       	ret

000007ee <spi_setup>:

void spi_setup()
{

	#ifndef SPI_ON_USI
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0); //enables SPI, sets chip as master, sets clock speed to fosc/16
 7ee:	81 e5       	ldi	r24, 0x51	; 81
 7f0:	8c bd       	out	0x2c, r24	; 44
 7f2:	08 95       	ret

000007f4 <spi_transfer_byte>:
void spi_transfer_byte(uint8_t* bout, uint8_t* bin)
{
	/*Outgoing data into data register*/
	//PORTD |= (1<<GREEN_LIGHT);
	//_delay_ms(100);
	DATAREG = *bout;
 7f4:	fc 01       	movw	r30, r24
 7f6:	80 81       	ld	r24, Z
 7f8:	8e bd       	out	0x2e, r24	; 46
	while(! SPI_BYTE_XFER_DONE)
 7fa:	0d b4       	in	r0, 0x2d	; 45
 7fc:	07 fe       	sbrs	r0, 7
 7fe:	fd cf       	rjmp	.-6      	; 0x7fa <spi_transfer_byte+0x6>
		USICR = usi_clk_lo;
		USICR = usi_clk_hi;
		#endif
	} 
	/*Incoming data out of data register*/
	*bin = DATAREG;
 800:	8e b5       	in	r24, 0x2e	; 46
 802:	fb 01       	movw	r30, r22
 804:	80 83       	st	Z, r24
 806:	08 95       	ret

00000808 <spi_transfer_nbytes>:
}

/*Selects the slave (cs)  and transfers n bytes. The input and output buffers must be defined and contain at least n bytes each*/

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
 808:	cf 92       	push	r12
 80a:	df 92       	push	r13
 80c:	ef 92       	push	r14
 80e:	ff 92       	push	r15
 810:	0f 93       	push	r16
 812:	1f 93       	push	r17
 814:	cf 93       	push	r28
 816:	df 93       	push	r29
 818:	ec 01       	movw	r28, r24
 81a:	8b 01       	movw	r16, r22
	DDRD |= (1<<RED_LIGHT);
	DDRD |= (1<<GREEN_LIGHT);
	PORTD |= (1<<BLUE_LIGHT);*/
	//_delay_ms(1000);
	//PORTD &= ~(1<<BLUE_LIGHT);
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
 81c:	85 b1       	in	r24, 0x05	; 5
 81e:	61 e0       	ldi	r22, 0x01	; 1
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	6b 01       	movw	r12, r22
 824:	02 c0       	rjmp	.+4      	; 0x82a <spi_transfer_nbytes+0x22>
 826:	cc 0c       	add	r12, r12
 828:	dd 1c       	adc	r13, r13
 82a:	2a 95       	dec	r18
 82c:	e2 f7       	brpl	.-8      	; 0x826 <spi_transfer_nbytes+0x1e>
 82e:	9c 2d       	mov	r25, r12
 830:	90 95       	com	r25
 832:	89 23       	and	r24, r25
 834:	85 b9       	out	0x05, r24	; 5
	while(n)
 836:	44 23       	and	r20, r20
 838:	89 f0       	breq	.+34     	; 0x85c <spi_transfer_nbytes+0x54>
 83a:	41 50       	subi	r20, 0x01	; 1
 83c:	e4 2e       	mov	r14, r20
 83e:	f1 2c       	mov	r15, r1
 840:	8f ef       	ldi	r24, 0xFF	; 255
 842:	e8 1a       	sub	r14, r24
 844:	f8 0a       	sbc	r15, r24
 846:	ec 0e       	add	r14, r28
 848:	fd 1e       	adc	r15, r29
	{
		
		spi_transfer_byte(out,in);    /*transfer byte */
 84a:	b8 01       	movw	r22, r16
 84c:	ce 01       	movw	r24, r28
 84e:	d2 df       	rcall	.-92     	; 0x7f4 <spi_transfer_byte>

		/*advance iterators*/
		out = out + 1;
 850:	21 96       	adiw	r28, 0x01	; 1
		in = in + 1;
 852:	0f 5f       	subi	r16, 0xFF	; 255
 854:	1f 4f       	sbci	r17, 0xFF	; 255
	DDRD |= (1<<GREEN_LIGHT);
	PORTD |= (1<<BLUE_LIGHT);*/
	//_delay_ms(1000);
	//PORTD &= ~(1<<BLUE_LIGHT);
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
	while(n)
 856:	ec 16       	cp	r14, r28
 858:	fd 06       	cpc	r15, r29
 85a:	b9 f7       	brne	.-18     	; 0x84a <spi_transfer_nbytes+0x42>
		/*advance iterators*/
		out = out + 1;
		in = in + 1;
		n = n - 1;
	}
	CS_PORT |= 1<<cs;/*Deselect slave chip*/
 85c:	85 b1       	in	r24, 0x05	; 5
 85e:	c8 2a       	or	r12, r24
 860:	c5 b8       	out	0x05, r12	; 5
}
 862:	df 91       	pop	r29
 864:	cf 91       	pop	r28
 866:	1f 91       	pop	r17
 868:	0f 91       	pop	r16
 86a:	ff 90       	pop	r15
 86c:	ef 90       	pop	r14
 86e:	df 90       	pop	r13
 870:	cf 90       	pop	r12
 872:	08 95       	ret

00000874 <memcpy>:
 874:	fb 01       	movw	r30, r22
 876:	dc 01       	movw	r26, r24
 878:	02 c0       	rjmp	.+4      	; 0x87e <memcpy+0xa>
 87a:	01 90       	ld	r0, Z+
 87c:	0d 92       	st	X+, r0
 87e:	41 50       	subi	r20, 0x01	; 1
 880:	50 40       	sbci	r21, 0x00	; 0
 882:	d8 f7       	brcc	.-10     	; 0x87a <memcpy+0x6>
 884:	08 95       	ret

00000886 <_exit>:
 886:	f8 94       	cli

00000888 <__stop_program>:
 888:	ff cf       	rjmp	.-2      	; 0x888 <__stop_program>
