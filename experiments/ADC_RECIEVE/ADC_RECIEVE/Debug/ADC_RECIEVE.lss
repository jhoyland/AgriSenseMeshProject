
ADC_RECIEVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800100  00800100  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b2a  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab1  00000000  00000000  0000210a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bee  00000000  00000000  00002bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  000037ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ef  00000000  00000000  00003afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d8f  00000000  00000000  000041eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00004f7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
  26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
  34:	21 e0       	ldi	r18, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
  3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
  3e:	a2 38       	cpi	r26, 0x82	; 130
  40:	b2 07       	cpc	r27, r18
  42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
  44:	72 d0       	rcall	.+228    	; 0x12a <main>
  46:	a1 c1       	rjmp	.+834    	; 0x38a <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <handle_rx>:
	EICRA |= (1<<ISC01);
	BLINK(LIGHT_PORT,YELLOW_LIGHT);
}

void handle_rx(){
	if(mrf_get_bufferPHY()){} //not needed
  4a:	3e d1       	rcall	.+636    	; 0x2c8 <mrf_get_bufferPHY>
	PORTD |= (1<<BLUE_LIGHT); //this does not light up; this loop never enters
  4c:	5c 9a       	sbi	0x0b, 4	; 11
	uint8_t * rx_data = mrf_get_rxdata();
  4e:	40 d1       	rcall	.+640    	; 0x2d0 <mrf_get_rxdata>
	if(*rx_data >= 100) BLINK(LIGHT_PORT,GREEN_LIGHT);
  50:	fc 01       	movw	r30, r24
  52:	20 81       	ld	r18, Z
  54:	24 36       	cpi	r18, 0x64	; 100
  56:	08 f0       	brcs	.+2      	; 0x5a <handle_rx+0x10>
  58:	5d 9a       	sbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5a:	ef e4       	ldi	r30, 0x4F	; 79
  5c:	f3 ec       	ldi	r31, 0xC3	; 195
  5e:	31 97       	sbiw	r30, 0x01	; 1
  60:	f1 f7       	brne	.-4      	; 0x5e <handle_rx+0x14>
  62:	00 c0       	rjmp	.+0      	; 0x64 <handle_rx+0x1a>
  64:	00 00       	nop
  66:	5d 98       	cbi	0x0b, 5	; 11
  68:	ef e4       	ldi	r30, 0x4F	; 79
  6a:	f3 ec       	ldi	r31, 0xC3	; 195
  6c:	31 97       	sbiw	r30, 0x01	; 1
  6e:	f1 f7       	brne	.-4      	; 0x6c <handle_rx+0x22>
  70:	00 c0       	rjmp	.+0      	; 0x72 <handle_rx+0x28>
  72:	00 00       	nop
	
	if(*rx_data < 100) BLINK(LIGHT_PORT, RED_LIGHT);
  74:	fc 01       	movw	r30, r24
  76:	80 81       	ld	r24, Z
  78:	84 36       	cpi	r24, 0x64	; 100
  7a:	08 f4       	brcc	.+2      	; 0x7e <handle_rx+0x34>
  7c:	5f 9a       	sbi	0x0b, 7	; 11
  7e:	8f e4       	ldi	r24, 0x4F	; 79
  80:	93 ec       	ldi	r25, 0xC3	; 195
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <handle_rx+0x38>
  86:	00 c0       	rjmp	.+0      	; 0x88 <handle_rx+0x3e>
  88:	00 00       	nop
  8a:	5f 98       	cbi	0x0b, 7	; 11
  8c:	ef e4       	ldi	r30, 0x4F	; 79
  8e:	f3 ec       	ldi	r31, 0xC3	; 195
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <handle_rx+0x46>
  94:	00 c0       	rjmp	.+0      	; 0x96 <handle_rx+0x4c>
  96:	00 00       	nop
  98:	08 95       	ret

0000009a <handle_tx>:
	
	//look at the rx_data and make a decision
}

void handle_tx(){ //a successful transmission involves sending and receiving a message.
	if(mrf_tx_ok()){
  9a:	1d d1       	rcall	.+570    	; 0x2d6 <mrf_tx_ok>
  9c:	08 95       	ret

0000009e <setup>:
uint16_t message; //this is the message that will be recieved


void setup()
{
	DDRD |= (1 << RED_LIGHT); //set PD7 to output for LED
  9e:	57 9a       	sbi	0x0a, 7	; 10
	DDRD |= (1 << GREEN_LIGHT);
  a0:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << YELLOW_LIGHT);
  a2:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << BLUE_LIGHT);
  a4:	54 9a       	sbi	0x0a, 4	; 10
	
	PORTB |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<ADC_CS) | (1<<SPI_SS); //set these ports to high (required)
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	8c 6a       	ori	r24, 0xAC	; 172
  aa:	85 b9       	out	0x05, r24	; 5
	DDRB |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<ADC_CS) | (1<<SPI_SS);  //set these to output
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	8c 6a       	ori	r24, 0xAC	; 172
  b0:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<SPI_MISO);	//master in slave out, input on attiny
  b2:	24 98       	cbi	0x04, 4	; 4
	
	//BLINK(LIGHT_PORT,GREEN_LIGHT);
	spi_setup();
  b4:	14 d1       	rcall	.+552    	; 0x2de <spi_setup>
	//BLINK(LIGHT_PORT,GREEN_LIGHT);

	mrf_reset();
  b6:	4e d0       	rcall	.+156    	; 0x154 <mrf_reset>
	BLINK(LIGHT_PORT,YELLOW_LIGHT);
  b8:	5e 9a       	sbi	0x0b, 6	; 11
  ba:	8f e4       	ldi	r24, 0x4F	; 79
  bc:	93 ec       	ldi	r25, 0xC3	; 195
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <setup+0x20>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <setup+0x26>
  c4:	00 00       	nop
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	8f e4       	ldi	r24, 0x4F	; 79
  ca:	93 ec       	ldi	r25, 0xC3	; 195
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <setup+0x2e>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <setup+0x34>
  d2:	00 00       	nop
	mrf_init(); //this function cannot complete??
  d4:	9b d0       	rcall	.+310    	; 0x20c <mrf_init>
	BLINK(LIGHT_PORT,YELLOW_LIGHT);
  d6:	5e 9a       	sbi	0x0b, 6	; 11
  d8:	8f e4       	ldi	r24, 0x4F	; 79
  da:	93 ec       	ldi	r25, 0xC3	; 195
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <setup+0x3e>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <setup+0x44>
  e2:	00 00       	nop
  e4:	5e 98       	cbi	0x0b, 6	; 11
  e6:	8f e4       	ldi	r24, 0x4F	; 79
  e8:	93 ec       	ldi	r25, 0xC3	; 195
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <setup+0x4c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <setup+0x52>
  f0:	00 00       	nop

	
	mrf_set_pan(ASMP_PANID);
  f2:	8e ef       	ldi	r24, 0xFE	; 254
  f4:	9a ec       	ldi	r25, 0xCA	; 202
  f6:	61 d0       	rcall	.+194    	; 0x1ba <mrf_set_pan>
	mrf_address16_write(THIS_DEVICE); //do I need this??
  f8:	82 e3       	ldi	r24, 0x32	; 50
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	68 d0       	rcall	.+208    	; 0x1ce <mrf_address16_write>
	
	sei(); //starts interrupts, essential to let chip know message is being handled
  fe:	78 94       	sei
	EIMSK |= (1<<INT0);
 100:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC01);
 102:	e9 e6       	ldi	r30, 0x69	; 105
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	80 83       	st	Z, r24
	BLINK(LIGHT_PORT,YELLOW_LIGHT);
 10c:	5e 9a       	sbi	0x0b, 6	; 11
 10e:	8f e4       	ldi	r24, 0x4F	; 79
 110:	93 ec       	ldi	r25, 0xC3	; 195
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <setup+0x74>
 116:	00 c0       	rjmp	.+0      	; 0x118 <setup+0x7a>
 118:	00 00       	nop
 11a:	5e 98       	cbi	0x0b, 6	; 11
 11c:	8f e4       	ldi	r24, 0x4F	; 79
 11e:	93 ec       	ldi	r25, 0xC3	; 195
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <setup+0x82>
 124:	00 c0       	rjmp	.+0      	; 0x126 <setup+0x88>
 126:	00 00       	nop
 128:	08 95       	ret

0000012a <main>:
	}
}

int main(void)
{
	setup();
 12a:	b9 df       	rcall	.-142    	; 0x9e <setup>
    /* Replace with your application code */
	BLINK(LIGHT_PORT,BLUE_LIGHT);
 12c:	5c 9a       	sbi	0x0b, 4	; 11
 12e:	8f e4       	ldi	r24, 0x4F	; 79
 130:	93 ec       	ldi	r25, 0xC3	; 195
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x8>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0xe>
 138:	00 00       	nop
 13a:	5c 98       	cbi	0x0b, 4	; 11
 13c:	8f e4       	ldi	r24, 0x4F	; 79
 13e:	93 ec       	ldi	r25, 0xC3	; 195
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x16>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x1c>
 146:	00 00       	nop
	while (1) 
    {	
		mrf_check_flags(&handle_rx, &handle_tx);
 148:	6d e4       	ldi	r22, 0x4D	; 77
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	85 e2       	ldi	r24, 0x25	; 37
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	a1 d0       	rcall	.+322    	; 0x294 <mrf_check_flags>
 152:	fa cf       	rjmp	.-12     	; 0x148 <main+0x1e>

00000154 <mrf_reset>:
        tx_info.retries = mrf_reg_TXSTAT >> 6;
        tx_info.channel_busy = (mrf_reg_TXSTAT & (1 << CCAFAIL));
    }
//DROP_ISR_MUTEX;
    isr_lock = 0;
}
 154:	59 98       	cbi	0x0b, 1	; 11
 156:	87 ea       	ldi	r24, 0xA7	; 167
 158:	91 e6       	ldi	r25, 0x61	; 97
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <mrf_reset+0x6>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <mrf_reset+0xc>
 160:	00 00       	nop
 162:	59 9a       	sbi	0x0b, 1	; 11
 164:	83 e2       	ldi	r24, 0x23	; 35
 166:	94 ef       	ldi	r25, 0xF4	; 244
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <mrf_reset+0x14>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <mrf_reset+0x1a>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <mrf_write_short>:
 172:	e0 e0       	ldi	r30, 0x00	; 0
 174:	f1 e0       	ldi	r31, 0x01	; 1
 176:	88 0f       	add	r24, r24
 178:	8e 77       	andi	r24, 0x7E	; 126
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 83       	st	Z, r24
 17e:	61 83       	std	Z+1, r22	; 0x01
 180:	27 e0       	ldi	r18, 0x07	; 7
 182:	42 e0       	ldi	r20, 0x02	; 2
 184:	bf 01       	movw	r22, r30
 186:	cf 01       	movw	r24, r30
 188:	bd d0       	rcall	.+378    	; 0x304 <spi_transfer_nbytes>
 18a:	08 95       	ret

0000018c <mrf_write_long>:
 18c:	e0 e0       	ldi	r30, 0x00	; 0
 18e:	f1 e0       	ldi	r31, 0x01	; 1
 190:	9c 01       	movw	r18, r24
 192:	36 95       	lsr	r19
 194:	27 95       	ror	r18
 196:	36 95       	lsr	r19
 198:	27 95       	ror	r18
 19a:	36 95       	lsr	r19
 19c:	27 95       	ror	r18
 19e:	20 68       	ori	r18, 0x80	; 128
 1a0:	20 83       	st	Z, r18
 1a2:	82 95       	swap	r24
 1a4:	88 0f       	add	r24, r24
 1a6:	80 7e       	andi	r24, 0xE0	; 224
 1a8:	80 61       	ori	r24, 0x10	; 16
 1aa:	81 83       	std	Z+1, r24	; 0x01
 1ac:	62 83       	std	Z+2, r22	; 0x02
 1ae:	27 e0       	ldi	r18, 0x07	; 7
 1b0:	43 e0       	ldi	r20, 0x03	; 3
 1b2:	bf 01       	movw	r22, r30
 1b4:	cf 01       	movw	r24, r30
 1b6:	a6 d0       	rcall	.+332    	; 0x304 <spi_transfer_nbytes>
 1b8:	08 95       	ret

000001ba <mrf_set_pan>:
 1ba:	cf 93       	push	r28
 1bc:	c8 2f       	mov	r28, r24
 1be:	69 2f       	mov	r22, r25
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	d7 df       	rcall	.-82     	; 0x172 <mrf_write_short>
 1c4:	6c 2f       	mov	r22, r28
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	d4 df       	rcall	.-88     	; 0x172 <mrf_write_short>
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <mrf_address16_write>:
 1ce:	cf 93       	push	r28
 1d0:	c8 2f       	mov	r28, r24
 1d2:	69 2f       	mov	r22, r25
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	cd df       	rcall	.-102    	; 0x172 <mrf_write_short>
 1d8:	6c 2f       	mov	r22, r28
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	ca df       	rcall	.-108    	; 0x172 <mrf_write_short>
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <mrf_set_interrupts>:
 1e2:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <isr_lock>
 1e6:	66 ef       	ldi	r22, 0xF6	; 246
 1e8:	82 e3       	ldi	r24, 0x32	; 50
 1ea:	c3 df       	rcall	.-122    	; 0x172 <mrf_write_short>
 1ec:	08 95       	ret

000001ee <mrf_set_channel>:
 1ee:	68 2f       	mov	r22, r24
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	6b 50       	subi	r22, 0x0B	; 11
 1f4:	71 09       	sbc	r23, r1
 1f6:	62 95       	swap	r22
 1f8:	72 95       	swap	r23
 1fa:	70 7f       	andi	r23, 0xF0	; 240
 1fc:	76 27       	eor	r23, r22
 1fe:	60 7f       	andi	r22, 0xF0	; 240
 200:	76 27       	eor	r23, r22
 202:	63 60       	ori	r22, 0x03	; 3
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	92 e0       	ldi	r25, 0x02	; 2
 208:	c1 df       	rcall	.-126    	; 0x18c <mrf_write_long>
 20a:	08 95       	ret

0000020c <mrf_init>:
 20c:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <mrf_flags>
 210:	67 e0       	ldi	r22, 0x07	; 7
 212:	8a e2       	ldi	r24, 0x2A	; 42
 214:	ae df       	rcall	.-164    	; 0x172 <mrf_write_short>
 216:	68 e9       	ldi	r22, 0x98	; 152
 218:	88 e1       	ldi	r24, 0x18	; 24
 21a:	ab df       	rcall	.-170    	; 0x172 <mrf_write_short>
 21c:	65 e9       	ldi	r22, 0x95	; 149
 21e:	8e e2       	ldi	r24, 0x2E	; 46
 220:	a8 df       	rcall	.-176    	; 0x172 <mrf_write_short>
 222:	63 e0       	ldi	r22, 0x03	; 3
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	92 e0       	ldi	r25, 0x02	; 2
 228:	b1 df       	rcall	.-158    	; 0x18c <mrf_write_long>
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	92 e0       	ldi	r25, 0x02	; 2
 230:	ad df       	rcall	.-166    	; 0x18c <mrf_write_long>
 232:	60 e8       	ldi	r22, 0x80	; 128
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	92 e0       	ldi	r25, 0x02	; 2
 238:	a9 df       	rcall	.-174    	; 0x18c <mrf_write_long>
 23a:	60 e9       	ldi	r22, 0x90	; 144
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	a5 df       	rcall	.-182    	; 0x18c <mrf_write_long>
 242:	60 e8       	ldi	r22, 0x80	; 128
 244:	87 e0       	ldi	r24, 0x07	; 7
 246:	92 e0       	ldi	r25, 0x02	; 2
 248:	a1 df       	rcall	.-190    	; 0x18c <mrf_write_long>
 24a:	60 e1       	ldi	r22, 0x10	; 16
 24c:	88 e0       	ldi	r24, 0x08	; 8
 24e:	92 e0       	ldi	r25, 0x02	; 2
 250:	9d df       	rcall	.-198    	; 0x18c <mrf_write_long>
 252:	61 e2       	ldi	r22, 0x21	; 33
 254:	80 e2       	ldi	r24, 0x20	; 32
 256:	92 e0       	ldi	r25, 0x02	; 2
 258:	99 df       	rcall	.-206    	; 0x18c <mrf_write_long>
 25a:	60 e8       	ldi	r22, 0x80	; 128
 25c:	8a e3       	ldi	r24, 0x3A	; 58
 25e:	89 df       	rcall	.-238    	; 0x172 <mrf_write_short>
 260:	60 e6       	ldi	r22, 0x60	; 96
 262:	8f e3       	ldi	r24, 0x3F	; 63
 264:	86 df       	rcall	.-244    	; 0x172 <mrf_write_short>
 266:	60 e4       	ldi	r22, 0x40	; 64
 268:	8e e3       	ldi	r24, 0x3E	; 62
 26a:	83 df       	rcall	.-250    	; 0x172 <mrf_write_short>
 26c:	ba df       	rcall	.-140    	; 0x1e2 <mrf_set_interrupts>
 26e:	84 e1       	ldi	r24, 0x14	; 20
 270:	be df       	rcall	.-132    	; 0x1ee <mrf_set_channel>
 272:	64 e0       	ldi	r22, 0x04	; 4
 274:	86 e3       	ldi	r24, 0x36	; 54
 276:	7d df       	rcall	.-262    	; 0x172 <mrf_write_short>
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	86 e3       	ldi	r24, 0x36	; 54
 27c:	7a df       	rcall	.-268    	; 0x172 <mrf_write_short>
 27e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <flag_got_rx>
 282:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <flag_got_tx>
 286:	89 ef       	ldi	r24, 0xF9	; 249
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <mrf_init+0x7e>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <mrf_init+0x84>
 290:	00 00       	nop
 292:	08 95       	ret

00000294 <mrf_check_flags>:
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <isr_lock>
 29c:	21 11       	cpse	r18, r1
 29e:	11 c0       	rjmp	.+34     	; 0x2c2 <mrf_check_flags+0x2e>
 2a0:	eb 01       	movw	r28, r22
 2a2:	fc 01       	movw	r30, r24
 2a4:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <flag_got_rx>
 2a8:	22 23       	and	r18, r18
 2aa:	19 f0       	breq	.+6      	; 0x2b2 <mrf_check_flags+0x1e>
 2ac:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <flag_got_rx>
 2b0:	09 95       	icall
 2b2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <flag_got_tx>
 2b6:	88 23       	and	r24, r24
 2b8:	21 f0       	breq	.+8      	; 0x2c2 <mrf_check_flags+0x2e>
 2ba:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <flag_got_tx>
 2be:	fe 01       	movw	r30, r28
 2c0:	09 95       	icall
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <mrf_get_bufferPHY>:
 2c8:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <mrf_flags>
 2cc:	84 60       	ori	r24, 0x04	; 4
 2ce:	08 95       	ret

000002d0 <mrf_get_rxdata>:
}

uint8_t* mrf_get_rxdata()
{
	return rx_info.rx_data;
}
 2d0:	85 e0       	ldi	r24, 0x05	; 5
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	08 95       	ret

000002d6 <mrf_tx_ok>:


uint8_t mrf_tx_ok()
{
	return tx_info.tx_ok;
 2d6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tx_info>
}
 2da:	81 70       	andi	r24, 0x01	; 1
 2dc:	08 95       	ret

000002de <spi_setup>:

void spi_setup()
{

	#ifndef SPI_ON_USI
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0); //enables SPI, sets chip as master, sets clock speed to fosc/16
 2de:	81 e5       	ldi	r24, 0x51	; 81
 2e0:	8c bd       	out	0x2c, r24	; 44
 2e2:	08 95       	ret

000002e4 <spi_transfer_byte>:
 2e4:	e7 ea       	ldi	r30, 0xA7	; 167
 2e6:	f1 e6       	ldi	r31, 0x61	; 97
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <spi_transfer_byte+0x4>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <spi_transfer_byte+0xa>
 2ee:	00 00       	nop
void spi_transfer_byte(uint8_t* bout, uint8_t* bin)
{
	/*Outgoing data into data register*/
	//PORTD |= (1<<GREEN_LIGHT);
	_delay_ms(100);
	DATAREG = *bout;
 2f0:	fc 01       	movw	r30, r24
 2f2:	80 81       	ld	r24, Z
 2f4:	8e bd       	out	0x2e, r24	; 46
	while(! SPI_BYTE_XFER_DONE)
 2f6:	0d b4       	in	r0, 0x2d	; 45
 2f8:	07 fe       	sbrs	r0, 7
 2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <spi_transfer_byte+0x12>
		USICR = usi_clk_lo;
		USICR = usi_clk_hi;
		#endif
	} 
	/*Incoming data out of data register*/
	*bin = DATAREG;
 2fc:	8e b5       	in	r24, 0x2e	; 46
 2fe:	fb 01       	movw	r30, r22
 300:	80 83       	st	Z, r24
 302:	08 95       	ret

00000304 <spi_transfer_nbytes>:
}

/*Selects the slave (cs)  and transfers n bytes. The input and output buffers must be defined and contain at least n bytes each*/

void spi_transfer_nbytes(uint8_t* out, uint8_t* in, uint8_t n, uint8_t cs)
{
 304:	cf 92       	push	r12
 306:	df 92       	push	r13
 308:	ef 92       	push	r14
 30a:	ff 92       	push	r15
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	ec 01       	movw	r28, r24
 316:	8b 01       	movw	r16, r22
 318:	3f e3       	ldi	r19, 0x3F	; 63
 31a:	8d e0       	ldi	r24, 0x0D	; 13
 31c:	93 e0       	ldi	r25, 0x03	; 3
 31e:	31 50       	subi	r19, 0x01	; 1
 320:	80 40       	sbci	r24, 0x00	; 0
 322:	90 40       	sbci	r25, 0x00	; 0
 324:	e1 f7       	brne	.-8      	; 0x31e <spi_transfer_nbytes+0x1a>
 326:	00 c0       	rjmp	.+0      	; 0x328 <spi_transfer_nbytes+0x24>
 328:	00 00       	nop
	DDRD |= (1<<RED_LIGHT);
	DDRD |= (1<<GREEN_LIGHT);
	PORTD |= (1<<BLUE_LIGHT);*/
	_delay_ms(1000);
	//PORTD &= ~(1<<BLUE_LIGHT);
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
 32a:	85 b1       	in	r24, 0x05	; 5
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	6b 01       	movw	r12, r22
 332:	02 c0       	rjmp	.+4      	; 0x338 <spi_transfer_nbytes+0x34>
 334:	cc 0c       	add	r12, r12
 336:	dd 1c       	adc	r13, r13
 338:	2a 95       	dec	r18
 33a:	e2 f7       	brpl	.-8      	; 0x334 <spi_transfer_nbytes+0x30>
 33c:	9c 2d       	mov	r25, r12
 33e:	90 95       	com	r25
 340:	89 23       	and	r24, r25
 342:	85 b9       	out	0x05, r24	; 5
	while(n)
 344:	44 23       	and	r20, r20
 346:	a9 f0       	breq	.+42     	; 0x372 <spi_transfer_nbytes+0x6e>
 348:	41 50       	subi	r20, 0x01	; 1
 34a:	e4 2e       	mov	r14, r20
 34c:	f1 2c       	mov	r15, r1
 34e:	3f ef       	ldi	r19, 0xFF	; 255
 350:	e3 1a       	sub	r14, r19
 352:	f3 0a       	sbc	r15, r19
 354:	ec 0e       	add	r14, r28
 356:	fd 1e       	adc	r15, r29
	{
		PORTD |= (1<<RED_LIGHT);
 358:	5f 9a       	sbi	0x0b, 7	; 11
		//_delay_ms(1000);
		PORTD &= ~(1<<RED_LIGHT);
 35a:	5f 98       	cbi	0x0b, 7	; 11
		//_delay_ms(1000);
		spi_transfer_byte(out,in);    /*transfer byte */
 35c:	b8 01       	movw	r22, r16
 35e:	ce 01       	movw	r24, r28
 360:	c1 df       	rcall	.-126    	; 0x2e4 <spi_transfer_byte>
		PORTD |= (1<<RED_LIGHT);
 362:	5f 9a       	sbi	0x0b, 7	; 11
		//_delay_ms(1000);
		PORTD &= ~(1<<RED_LIGHT);
 364:	5f 98       	cbi	0x0b, 7	; 11
		//_delay_ms(1000);
		/*advance iterators*/
		out = out + 1;
 366:	21 96       	adiw	r28, 0x01	; 1
		in = in + 1;
 368:	0f 5f       	subi	r16, 0xFF	; 255
 36a:	1f 4f       	sbci	r17, 0xFF	; 255
	DDRD |= (1<<GREEN_LIGHT);
	PORTD |= (1<<BLUE_LIGHT);*/
	_delay_ms(1000);
	//PORTD &= ~(1<<BLUE_LIGHT);
	CS_PORT &= ~(1<<cs); /*Select slave chip*/
	while(n)
 36c:	ec 16       	cp	r14, r28
 36e:	fd 06       	cpc	r15, r29
 370:	99 f7       	brne	.-26     	; 0x358 <spi_transfer_nbytes+0x54>
		/*advance iterators*/
		out = out + 1;
		in = in + 1;
		n = n - 1;
	}
	CS_PORT |= 1<<cs;/*Deselect slave chip*/
 372:	85 b1       	in	r24, 0x05	; 5
 374:	c8 2a       	or	r12, r24
 376:	c5 b8       	out	0x05, r12	; 5
}
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
 384:	df 90       	pop	r13
 386:	cf 90       	pop	r12
 388:	08 95       	ret

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
