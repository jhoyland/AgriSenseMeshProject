
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000072  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f8  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062f  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026f  00000000  00000000  00000e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	1a c0       	rjmp	.+52     	; 0x38 <__bad_interrupt>
   4:	19 c0       	rjmp	.+50     	; 0x38 <__bad_interrupt>
   6:	18 c0       	rjmp	.+48     	; 0x38 <__bad_interrupt>
   8:	17 c0       	rjmp	.+46     	; 0x38 <__bad_interrupt>
   a:	16 c0       	rjmp	.+44     	; 0x38 <__bad_interrupt>
   c:	15 c0       	rjmp	.+42     	; 0x38 <__bad_interrupt>
   e:	14 c0       	rjmp	.+40     	; 0x38 <__bad_interrupt>
  10:	13 c0       	rjmp	.+38     	; 0x38 <__bad_interrupt>
  12:	12 c0       	rjmp	.+36     	; 0x38 <__bad_interrupt>
  14:	11 c0       	rjmp	.+34     	; 0x38 <__bad_interrupt>
  16:	10 c0       	rjmp	.+32     	; 0x38 <__bad_interrupt>
  18:	0f c0       	rjmp	.+30     	; 0x38 <__bad_interrupt>
  1a:	0e c0       	rjmp	.+28     	; 0x38 <__bad_interrupt>
  1c:	0d c0       	rjmp	.+26     	; 0x38 <__bad_interrupt>
  1e:	0c c0       	rjmp	.+24     	; 0x38 <__bad_interrupt>
  20:	0b c0       	rjmp	.+22     	; 0x38 <__bad_interrupt>
  22:	0a c0       	rjmp	.+20     	; 0x38 <__bad_interrupt>
  24:	09 c0       	rjmp	.+18     	; 0x38 <__bad_interrupt>
  26:	08 c0       	rjmp	.+16     	; 0x38 <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61
  34:	19 d0       	rcall	.+50     	; 0x68 <main>
  36:	1b c0       	rjmp	.+54     	; 0x6e <_exit>

00000038 <__bad_interrupt>:
  38:	e3 cf       	rjmp	.-58     	; 0x0 <__vectors>

0000003a <setup>:
void setup(){
    //everything that runs only once
    //establish which pin does what
    
    //LED is on PD3 and PD4
    DDRD |= (1<<PD3); //sets DDRD to output. PD3 is the Pin designation
  3a:	53 9a       	sbi	0x0a, 3	; 10
  3c:	08 95       	ret

0000003e <loop>:
}
//loop
void loop(){
    //toggle the LED on and off
    PORTD |= (1<<PD3);//turns 
  3e:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  40:	2f e3       	ldi	r18, 0x3F	; 63
  42:	8d e0       	ldi	r24, 0x0D	; 13
  44:	93 e0       	ldi	r25, 0x03	; 3
  46:	21 50       	subi	r18, 0x01	; 1
  48:	80 40       	sbci	r24, 0x00	; 0
  4a:	90 40       	sbci	r25, 0x00	; 0
  4c:	e1 f7       	brne	.-8      	; 0x46 <__SREG__+0x7>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <__SREG__+0x11>
  50:	00 00       	nop
    _delay_ms(1000);
    
    PORTD &= ~(1<<PD3);//turns off
  52:	5b 98       	cbi	0x0b, 3	; 11
  54:	2f e3       	ldi	r18, 0x3F	; 63
  56:	8d e0       	ldi	r24, 0x0D	; 13
  58:	93 e0       	ldi	r25, 0x03	; 3
  5a:	21 50       	subi	r18, 0x01	; 1
  5c:	80 40       	sbci	r24, 0x00	; 0
  5e:	90 40       	sbci	r25, 0x00	; 0
  60:	e1 f7       	brne	.-8      	; 0x5a <__SREG__+0x1b>
  62:	00 c0       	rjmp	.+0      	; 0x64 <__SREG__+0x25>
  64:	00 00       	nop
  66:	08 95       	ret

00000068 <main>:
   _delay_ms(1000);
}

int main(){
    setup();
  68:	e8 df       	rcall	.-48     	; 0x3a <setup>
    while(1) loop();
  6a:	e9 df       	rcall	.-46     	; 0x3e <loop>
  6c:	fe cf       	rjmp	.-4      	; 0x6a <main+0x2>

0000006e <_exit>:
  6e:	f8 94       	cli

00000070 <__stop_program>:
  70:	ff cf       	rjmp	.-2      	; 0x70 <__stop_program>
